/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:08:09 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.stream.Stream;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLWarning", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.initCause(batchUpdateException0);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLWarning", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(')');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(')', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVParser0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(')', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(')', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      
      cSVPrinter0.printComment("\rH\n");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(") \r\n) H\r\n) \r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(')', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "\rH\n";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "\rH\n";
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(9, objectArray0.length);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(')', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('p');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('p', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVParser0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('p', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      
      cSVPrinter0.printComment("\r\n");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("p \r\np \r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('p', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      cSVPrinter0.print(pipedOutputStream0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('p', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9.|qf");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("9.|qf", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("9.|qf", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals(12, objectArray0.length);
      assertEquals("9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("9.|qf", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertEquals(12, objectArray0.length);
      assertEquals("9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n9.|qf\r\n\"\"\t\t\t\t\t\t\t\t\t\t\t\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@i.-Y[w");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("@i.-Y[w", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('4', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("@i.-Y[w", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('4', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isCommentingEnabled());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("@i.-Y[w");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|JTy");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("|JTy", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("|JTy", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("|JTy", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("_", cSVFormat2.getRecordSeparator());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("|JTy", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(5, objectArray0.length);
      assertEquals("\"|JTy\"\r\n\"|JTy\"\r\n\"|JTy\"\r\n\"|JTy\"\r\n\"|JTy\"\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("|JTy", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockPrintWriter> arrayList0 = new ArrayList<MockPrintWriter>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      Character character0 = Character.valueOf('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('6', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('c');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('6', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('6', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('c', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('6', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('6', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('c', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals('6', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('c', (char)cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('6', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('6', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('c', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals('6', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('c', (char)cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      cSVPrinter0.print(integer0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('6', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('6', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('c', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals('6', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('c', (char)cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("7=,f9");
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("7=,f9", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isNullHandling());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("7=,f9", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertEquals("7=,f9", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isNullHandling());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("7=,f9", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertEquals("7=,f9", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isNullHandling());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuotePolicy());
      assertEquals('o', (char)cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isNullHandling());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("7=,f9", cSVFormat4.getNullString());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVPrinter0);
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("7=,f9", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertEquals("7=,f9", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isNullHandling());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuotePolicy());
      assertEquals('o', (char)cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isNullHandling());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("7=,f9", cSVFormat4.getNullString());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertEquals(7, objectArray0.length);
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("7=,f9", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals(319, charArrayWriter0.size());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertEquals("7=,f9", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isNullHandling());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuotePolicy());
      assertEquals('o', (char)cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isNullHandling());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("7=,f9", cSVFormat4.getNullString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("No quotes mde set but noscape character is set");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("No quotes mde set but noscape character is set", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean0 = pipedReader0.markSupported();
      assertFalse(boolean0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVParser0);
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("No quotes mde set but noscape character is set", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
      assertEquals("No quotes mde set but noscape character is set\r\nNo quotes mde set but noscape character is set\r\nNo quotes mde set but noscape character is set\r\nNo quotes mde set but noscape character is set\r\nNo quotes mde set but noscape character is set\r\nNo quotes mde set but noscape character is set\r\nNo quotes mde set but noscape character is set\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("No quotes mde set but noscape character is set", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      String string0 = "y\\|$Lc1${4\\";
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(")hx/:1j^eG$`");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals(")hx/:1j^eG$`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals('N', (char)cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals("", cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertTrue(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals(")hx/:1j^eG$`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      Quote quote0 = Quote.NON_NUMERIC;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      assertNotNull(string0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 8, sQLWarning0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(8, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.initCause(sQLNonTransientConnectionException0);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(8, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getMessage());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertEquals(0, objectArray0.length);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) sQLWarning0;
      objectArray1[2] = (Object) sQLNonTransientConnectionException0;
      objectArray1[3] = (Object) sQLNonTransientConnectionException0;
      objectArray1[4] = (Object) cSVPrinter0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertEquals('y', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)90;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)79, (byte)30, (byte) (-64), (byte)44, (byte)4, (byte)98, (byte)2, (byte)90}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertEquals('y', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertEquals('y', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("DCl7", "DCl7");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("DCl7", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: DCl7", sQLTransientConnectionException0.toString());
      assertEquals("DCl7", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      boolean boolean2 = arrayList0.add(sQLTransientConnectionException0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(sQLTransientConnectionException0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("DCl7", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: DCl7", sQLTransientConnectionException0.toString());
      assertEquals("DCl7", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Quote quote0 = Quote.NON_NUMERIC;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 8, sQLWarning0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(8, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.initCause(sQLNonTransientConnectionException0);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(8, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLWarning1.getSQLState());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertEquals(0, objectArray0.length);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("<Q=");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("<Q=", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullHandling());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("<Q=", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullHandling());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals(12, objectArray0.length);
      assertEquals("\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n\"<Q=\"\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("<Q=", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullHandling());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLWarning0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("Unexpected Quote value: ", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("Unexpected Quote value: ", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
      assertEquals("\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \"\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("Unexpected Quote value: ", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \"\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      cSVPrinter1.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals(7, objectArray0.length);
      assertEquals("\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \"\r\n\"\",,,,,,\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0!a.Bs9&|={/!");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0!a.Bs9&|={/!", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0!a.Bs9&|={/!", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
      assertEquals("0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!\r\n", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0!a.Bs9&|={/!", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashSet<ObjectOutputStream> hashSet0 = new HashSet<ObjectOutputStream>(arrayList0);
      assertNotNull(hashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!,0!a.Bs9&|={/!\r\n", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0!a.Bs9&|={/!", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[a");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("CBU");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("CBU", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat3 = cSVFormat0.withNullString((String) null);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isCommentingEnabled());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("CBU", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals(7, objectArray0.length);
      assertEquals("CBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\n", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("CBU", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter2);
      assertEquals("CBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\n", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      cSVPrinter2.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertEquals(7, objectArray0.length);
      assertEquals("CBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("Fc?Hp[D?TxT");
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat4);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("CBU", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("Fc?Hp[D?TxT", cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isNullHandling());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getEscape());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.isEscaping());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("9(7,{yd(%*[[r|D");
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat6);
      assertNull(cSVFormat6.getEscape());
      assertNull(cSVFormat6.getCommentStart());
      assertEquals('\"', (char)cSVFormat6.getQuoteChar());
      assertNull(cSVFormat6.getNullString());
      assertEquals("9(7,{yd(%*[[r|D", cSVFormat6.getRecordSeparator());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isQuoting());
      assertFalse(cSVFormat6.isEscaping());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isNullHandling());
      assertNull(cSVFormat6.getQuotePolicy());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getEscape());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.isEscaping());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("[a");
      assertNotNull(mockFileWriter0);
      
      CSVPrinter cSVPrinter3 = cSVFormat6.print(mockFileWriter0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVPrinter3, cSVPrinter1);
      assertNotSame(cSVPrinter3, cSVPrinter2);
      assertNotSame(cSVPrinter3, cSVPrinter0);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter3);
      assertNull(cSVFormat6.getEscape());
      assertNull(cSVFormat6.getCommentStart());
      assertEquals('\"', (char)cSVFormat6.getQuoteChar());
      assertNull(cSVFormat6.getNullString());
      assertEquals("9(7,{yd(%*[[r|D", cSVFormat6.getRecordSeparator());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertTrue(cSVFormat6.isQuoting());
      assertFalse(cSVFormat6.isEscaping());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isNullHandling());
      assertNull(cSVFormat6.getQuotePolicy());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getEscape());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.isEscaping());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      
      cSVPrinter2.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter3));
      assertEquals(7, objectArray0.length);
      assertEquals("CBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      StringWriter stringWriter1 = (StringWriter)cSVPrinter2.getOut();
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter3));
      assertNotNull(stringWriter1);
      assertEquals("CBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("CBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\nCBU\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n\"[a\",[a,[a,[a,[a,[a,[a\r\n", stringWriter1.toString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("[a", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("\"\",,,,,,", string0);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("'4-Bu");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("'4-Bu", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("'4-Bu");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("'4-Bu", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isNullHandling());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("'4-Bu", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"\",,,,,,");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("'4-Bu", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\"\",,,,,,", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertEquals(7, objectArray0.length);
      assertEquals("\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n", stringWriter0.toString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("'4-Bu", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n", stringWriter0.toString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("'4-Bu", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\"\",,,,,,", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      
      cSVPrinter1.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals(7, objectArray0.length);
      assertEquals("\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"\"\"\"\",,,,,,\",\"\"\"\"\",,,,,,\",\"\"\"\"\",,,,,,\",\"\"\"\"\",,,,,,\",\"\"\"\"\",,,,,,\",\"\"\"\"\",,,,,,\",\"\"\"\"\",,,,,,\"\r\n", stringWriter0.toString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("'4-Bu", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\"\",,,,,,", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      
      cSVPrinter0.print((Object) null);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\"\"", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      
      cSVPrinter0.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4R}nkeRsTEHC");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("4R}nkeRsTEHC", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("4R}nkeRsTEHC", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertNotNull(cSVPrinter2);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("4R}nkeRsTEHC", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("4R}nkeRsTEHC", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals("", cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertNotSame(cSVPrinter0, cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertEquals(5, objectArray0.length);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      cSVPrinter2.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals(5, objectArray0.length);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("4R}nkeRsTEHC", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter3 = cSVFormat3.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVPrinter3, cSVPrinter2);
      assertNotSame(cSVPrinter3, cSVPrinter1);
      assertNotSame(cSVPrinter3, cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter3);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals("4R}nkeRsTEHC", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("", cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals("", cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVPrinter0, cSVPrinter3);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertNotSame(cSVPrinter0, cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter3));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertEquals(5, objectArray0.length);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC,4R}nkeRsTEHC\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVPrinter0, cSVPrinter3);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertNotSame(cSVPrinter0, cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter3));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      Object[] objectArray0 = new Object[8];
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<SQLWarning> linkedList1 = new LinkedList<SQLWarning>(linkedList0);
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(sQLWarning0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Stream<SQLWarning> stream0 = linkedList1.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedList1.contains(sQLWarning0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("S");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("S", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("S", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("S");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("S", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("S", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertEquals(8, objectArray0.length);
      assertEquals("S\r\nS\r\nS\r\nS\r\nS\r\nS\r\nS\r\nS\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("S", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertEquals(8, objectArray0.length);
      assertEquals("S\r\nS\r\nS\r\nS\r\nS\r\nS\r\nS\r\nS\r\nS,S,S,S,S,S,S,S\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("S", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      Object[] objectArray0 = new Object[7];
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<SQLWarning> linkedList1 = new LinkedList<SQLWarning>(linkedList0);
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(sQLWarning0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Stream<SQLWarning> stream0 = linkedList1.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedList1.contains(sQLWarning0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(105);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("'4-Bu");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("'4-Bu", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("'4-Bu", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
      assertEquals("\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n\"'4-Bu\"\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("'4-Bu", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      Object[] objectArray0 = new Object[16];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(16, objectArray0.length);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      
      Long long0 = new Long(469L);
      assertEquals(469L, (long)long0);
      assertNotNull(long0);
      
      cSVPrinter0.print(long0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      
      cSVPrinter0.print(fileSystemHandling0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('j');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('j', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-49);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)118;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)32, (byte)91, (byte) (-49), (byte)0, (byte)48, (byte)3, (byte)110, (byte)118}, byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(9, byteArray0.length);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)32, (byte)91, (byte) (-49), (byte)0, (byte)48, (byte)3, (byte)110, (byte)118}, byteArray0);
      assertNotNull(charBuffer0);
      assertEquals(9, byteArray0.length);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=9 lim=9 cap=9]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("\uFFFD [\uFFFD\u00000\u0003nv", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)32, (byte)91, (byte) (-49), (byte)0, (byte)48, (byte)3, (byte)110, (byte)118}, byteArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(9, byteArray0.length);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals("\uFFFD [\uFFFD\u00000\u0003nv", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=9 lim=9 cap=9]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("\uFFFD [\uFFFD\u00000\u0003nv", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)32, (byte)91, (byte) (-49), (byte)0, (byte)48, (byte)3, (byte)110, (byte)118}, byteArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertNotNull(cSVPrinter0);
      assertEquals(9, byteArray0.length);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals("\uFFFD [\uFFFD\u00000\u0003nv", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('j', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=9 lim=9 cap=9]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals("\uFFFD [\uFFFD\u00000\u0003nv", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)110;
      objectArray0[3] = (Object) (byte)48;
      objectArray0[4] = (Object) (byte)110;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      
      stringWriter0.write("4V");
      assertEquals("4V", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      
      Character character0 = new Character('f');
      assertEquals('f', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('f');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isQuoting());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("4V", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isQuoting());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "4V");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("4V4V", stringWriter0.toString());
      assertEquals("4V4V", stringWriter1.toString());
      
      cSVPrinter0.printRecords(objectArray0);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals(1, objectArray0.length);
      assertEquals("4V4V\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isQuoting());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      
      cSVPrinter0.printRecord(objectArray0);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals(1, objectArray0.length);
      assertEquals("4V4V\r\n\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isQuoting());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      
      cSVPrinter0.print(cSVFormat2);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isQuoting());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      stringWriter0.write("4V");
      assertEquals("4V", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      Character character0 = new Character('f');
      assertEquals('f', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('f');
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("4V", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals(1, objectArray0.length);
      assertEquals("4V\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertEquals(1, objectArray0.length);
      assertEquals("4V\r\n\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(Quote.NONE, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertEquals('f', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('f', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('f', (char)cSVFormat3.getEscape());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('f', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('f', (char)cSVFormat4.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = '_';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'u', '_'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.capacity());
      assertEquals("u_", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertArrayEquals(new char[] {'u', '_'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.capacity());
      assertEquals("u_", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(2, charBuffer1.length());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("u_", charBuffer1.toString());
      
      CharBuffer charBuffer2 = charBuffer1.duplicate();
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer2, charBuffer1);
      assertArrayEquals(new char[] {'u', '_'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.capacity());
      assertEquals("u_", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(2, charBuffer1.length());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("u_", charBuffer1.toString());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(2, charBuffer2.remaining());
      assertEquals(2, charBuffer2.capacity());
      assertEquals("u_", charBuffer2.toString());
      assertFalse(charBuffer2.isDirect());
      assertEquals(2, charBuffer2.length());
      assertEquals(2, charBuffer2.limit());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer2, cSVFormat0);
      assertArrayEquals(new char[] {'u', '_'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer1.equals((Object)charBuffer2));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals(2, charArray0.length);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("u_", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(2, charBuffer1.length());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("u_", charBuffer1.toString());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(2, charBuffer2.remaining());
      assertEquals(2, charBuffer2.capacity());
      assertEquals("u_", charBuffer2.toString());
      assertFalse(charBuffer2.isDirect());
      assertEquals(2, charBuffer2.length());
      assertEquals(2, charBuffer2.limit());
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) charset1;
      objectArray0[3] = (Object) 'u';
      objectArray0[4] = (Object) charset0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertEquals(5, objectArray0.length);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.print(object0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('l', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('l', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      String string0 = "Unexpected Quote value: ";
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('l');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('l', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('E');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("E", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'E', 'E', 'E'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("EEE", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('g');
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat4);
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('8');
      assertNotSame(cSVFormat3, cSVFormat5);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat5);
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('g', cSVFormat5.getDelimiter());
      assertEquals("8", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      
      Character character0 = Character.valueOf('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('K');
      assertFalse(character1.equals((Object)character0));
      assertEquals('K', (char)character1);
      assertNotNull(character1);
      
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertNotNull(cSVFormat6);
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.isNullHandling());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertNull(cSVFormat6.getQuoteChar());
      assertEquals('\\', (char)cSVFormat6.getEscape());
      assertFalse(cSVFormat6.isQuoting());
      assertTrue(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getQuotePolicy());
      assertTrue(cSVFormat6.isEscaping());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getCommentStart());
      
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat7 = cSVFormat4.withQuotePolicy(quote0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertNotNull(cSVFormat7);
      assertEquals(Quote.MINIMAL, cSVFormat7.getQuotePolicy());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      assertFalse(cSVFormat7.isQuoting());
      assertFalse(cSVFormat7.isCommentingEnabled());
      assertEquals('g', cSVFormat7.getDelimiter());
      assertEquals('\\', (char)cSVFormat7.getEscape());
      assertFalse(cSVFormat7.isNullHandling());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getCommentStart());
      assertNull(cSVFormat7.getQuoteChar());
      assertTrue(cSVFormat7.isEscaping());
      assertNull(cSVFormat7.getNullString());
      assertFalse(cSVFormat7.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      
      CSVFormat cSVFormat8 = cSVFormat5.withEscape('n');
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat8);
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.isQuoting());
      assertTrue(cSVFormat8.isEscaping());
      assertNull(cSVFormat8.getQuotePolicy());
      assertFalse(cSVFormat8.isCommentingEnabled());
      assertEquals('n', (char)cSVFormat8.getEscape());
      assertFalse(cSVFormat8.isNullHandling());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('g', cSVFormat8.getDelimiter());
      assertNull(cSVFormat8.getCommentStart());
      assertNull(cSVFormat8.getQuoteChar());
      assertNull(cSVFormat8.getNullString());
      assertEquals("8", cSVFormat8.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('g', cSVFormat5.getDelimiter());
      assertEquals("8", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat9 = cSVFormat8.withIgnoreEmptyLines(true);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat9);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat9);
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getIgnoreEmptyLines());
      assertFalse(cSVFormat8.isQuoting());
      assertTrue(cSVFormat8.isEscaping());
      assertNull(cSVFormat8.getQuotePolicy());
      assertFalse(cSVFormat8.isCommentingEnabled());
      assertEquals('n', (char)cSVFormat8.getEscape());
      assertFalse(cSVFormat8.isNullHandling());
      assertFalse(cSVFormat8.getSkipHeaderRecord());
      assertEquals('g', cSVFormat8.getDelimiter());
      assertNull(cSVFormat8.getCommentStart());
      assertNull(cSVFormat8.getQuoteChar());
      assertNull(cSVFormat8.getNullString());
      assertEquals("8", cSVFormat8.getRecordSeparator());
      assertEquals("8", cSVFormat9.getRecordSeparator());
      assertEquals('g', cSVFormat9.getDelimiter());
      assertNull(cSVFormat9.getCommentStart());
      assertTrue(cSVFormat9.isEscaping());
      assertFalse(cSVFormat9.isNullHandling());
      assertNull(cSVFormat9.getQuotePolicy());
      assertFalse(cSVFormat9.isCommentingEnabled());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertEquals('n', (char)cSVFormat9.getEscape());
      assertTrue(cSVFormat9.getIgnoreEmptyLines());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.isQuoting());
      assertNull(cSVFormat9.getNullString());
      assertNull(cSVFormat9.getQuoteChar());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('g', cSVFormat5.getDelimiter());
      assertEquals("8", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat10 = cSVFormat2.withEscape('n');
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat10);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertNull(cSVFormat10.getCommentStart());
      assertEquals('\"', (char)cSVFormat10.getQuoteChar());
      assertTrue(cSVFormat10.isQuoting());
      assertEquals(',', cSVFormat10.getDelimiter());
      assertEquals("E", cSVFormat10.getRecordSeparator());
      assertNull(cSVFormat10.getNullString());
      assertFalse(cSVFormat10.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertFalse(cSVFormat10.isNullHandling());
      assertTrue(cSVFormat10.isEscaping());
      assertEquals('n', (char)cSVFormat10.getEscape());
      assertNull(cSVFormat10.getQuotePolicy());
      assertFalse(cSVFormat10.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("E", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat9));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat10));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('g', cSVFormat5.getDelimiter());
      assertEquals("8", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'E', 'E', 'E'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(3, charArray0.length);
      assertFalse(charBuffer1.isDirect());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(3, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals("EEE", charBuffer1.toString());
      assertEquals(3, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("EEE", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat9));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat10));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertEquals(3, objectArray0.length);
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('g', cSVFormat5.getDelimiter());
      assertEquals("8", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      cSVPrinter0.print(long0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat9);
      assertSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat10);
      assertNotSame(cSVFormat3, cSVFormat7);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat7);
      assertNotSame(cSVFormat5, cSVFormat9);
      assertNotSame(cSVFormat5, cSVFormat8);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat10);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat9));
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat10));
      assertFalse(cSVFormat3.equals((Object)cSVFormat7));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat7));
      assertFalse(cSVFormat5.equals((Object)cSVFormat9));
      assertFalse(cSVFormat5.equals((Object)cSVFormat8));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat10));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('g', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals('g', cSVFormat5.getDelimiter());
      assertEquals("8", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("zzzz", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals("z", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      
      Character character0 = Character.valueOf('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals("z", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals("z", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines(false);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuotePolicy());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertFalse(cSVFormat5.isNullHandling());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertTrue(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('z');
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat6);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuotePolicy());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertFalse(cSVFormat5.isNullHandling());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertTrue(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertEquals(',', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertFalse(cSVFormat6.isNullHandling());
      assertTrue(cSVFormat6.isEscaping());
      assertTrue(cSVFormat6.isQuoting());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat6.getQuoteChar());
      assertEquals('z', (char)cSVFormat6.getEscape());
      assertNull(cSVFormat6.getCommentStart());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertNotNull(cSVPrinter0);
      assertEquals(4, charArray0.length);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("zzzz", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals("z", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals("z", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("zzzz", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(4, charBuffer1.length());
      assertEquals(4, charBuffer1.limit());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("zzzz", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2228);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.allocate('d');
      assertNotNull(charBuffer0);
      assertEquals(100, charBuffer0.remaining());
      assertEquals(100, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(100, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(100, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('d');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('d', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('d', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('d', cSVFormat2.getDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('d', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('d', cSVFormat2.getDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
      
      Character character0 = new Character(',');
      assertEquals(',', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('d', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('d', cSVFormat2.getDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('d', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals(',', (char)cSVFormat3.getQuoteChar());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(100, charBuffer0.remaining());
      assertEquals(100, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(100, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(100, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(100, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(100, charBuffer1.remaining());
      assertEquals(100, charBuffer1.capacity());
      assertEquals(100, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharBuffer charBuffer2 = charBuffer0.get(charArray0);
      assertSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer2);
      assertEquals(2, charArray0.length);
      assertEquals(100, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(98, charBuffer0.remaining());
      assertEquals(98, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(100, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer2.remaining());
      assertEquals(100, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(100, charBuffer2.limit());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals(98, charBuffer2.length());
      assertEquals(2, charBuffer2.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      
      objectArray0[1] = object0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) '\u0000';
      objectArray0[5] = (Object) charBuffer1;
      objectArray0[6] = (Object) '\u0000';
      objectArray0[7] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals(8, objectArray0.length);
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('d', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('d', cSVFormat2.getDelimiter());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      cSVPrinter0.close();
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) bufferedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat0;
      String string0 = cSVFormat0.format(objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      try { 
        cSVPrinter1.print(object2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('M');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "org.apache.commons.csv.CSVPrinter");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("org.apache.commons.csv.CSVPrinter", cSVFormat2.getNullString());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      mockPrintStream0.println();
      assertSame(mockPrintStream0, printStream0);
      
      Appendable appendable0 = cSVPrinter0.getOut();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertSame(appendable0, printStream0);
      assertSame(appendable0, mockPrintStream0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertNotNull(appendable0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("lp,G=*4g", "Y1", 181, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(181, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: lp,G=*4g", sQLClientInfoException0.toString());
      assertEquals("lp,G=*4g", sQLClientInfoException0.getMessage());
      assertEquals("Y1", sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(181, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: lp,G=*4g", sQLClientInfoException0.toString());
      assertEquals("lp,G=*4g", sQLClientInfoException0.getMessage());
      assertEquals("Y1", sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.csv.CSVPrinter", map0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(181, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: lp,G=*4g", sQLClientInfoException0.toString());
      assertEquals("lp,G=*4g", sQLClientInfoException0.getMessage());
      assertEquals("Y1", sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.csv.CSVPrinter", sQLClientInfoException1.toString());
      assertEquals("org.apache.commons.csv.CSVPrinter", sQLClientInfoException1.getMessage());
      
      cSVPrinter0.print(sQLClientInfoException1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(181, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: lp,G=*4g", sQLClientInfoException0.toString());
      assertEquals("lp,G=*4g", sQLClientInfoException0.getMessage());
      assertEquals("Y1", sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.csv.CSVPrinter", sQLClientInfoException1.toString());
      assertEquals("org.apache.commons.csv.CSVPrinter", sQLClientInfoException1.getMessage());
      
      cSVPrinter0.print(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      Appendable appendable1 = cSVPrinter0.getOut();
      assertSame(appendable1, appendable0);
      assertSame(appendable1, printStream0);
      assertSame(appendable1, mockPrintStream0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(mockPrintStream0, appendable1);
      assertSame(printStream0, appendable1);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertNotNull(appendable1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      cSVPrinter0.printComment("Y1");
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(mockPrintStream0, appendable1);
      assertSame(printStream0, appendable1);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(mockPrintStream0, appendable1);
      assertSame(printStream0, appendable1);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(mockPrintStream0, appendable1);
      assertSame(printStream0, appendable1);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(181, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: lp,G=*4g", sQLClientInfoException0.toString());
      assertEquals("lp,G=*4g", sQLClientInfoException0.getMessage());
      assertEquals("Y1", sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.csv.CSVPrinter", sQLClientInfoException1.toString());
      assertEquals("org.apache.commons.csv.CSVPrinter", sQLClientInfoException1.getMessage());
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) appendable0;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) appendable0;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[5] = object0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, appendable0);
      assertSame(mockPrintStream0, appendable1);
      assertSame(printStream0, appendable1);
      assertSame(printStream0, mockPrintStream0);
      assertSame(printStream0, appendable0);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, objectArray1.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('M', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("z", charBuffer0.toString());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('E');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("E", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      
      Character character0 = Character.valueOf('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(')');
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat4 = cSVFormat1.withQuotePolicy(quote0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals(Quote.ALL, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals(Quote.ALL, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertEquals('\t', cSVFormat5.getDelimiter());
      
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('a');
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat6);
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals(Quote.ALL, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat6.getQuotePolicy());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentStart());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isNullHandling());
      assertTrue(cSVFormat6.isEscaping());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.isQuoting());
      assertNull(cSVFormat6.getQuoteChar());
      assertEquals('a', (char)cSVFormat6.getEscape());
      
      CSVPrinter cSVPrinter0 = cSVFormat6.print(stringWriter0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals(Quote.ALL, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat6.getQuotePolicy());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentStart());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isNullHandling());
      assertTrue(cSVFormat6.isEscaping());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.isQuoting());
      assertNull(cSVFormat6.getQuoteChar());
      assertEquals('a', (char)cSVFormat6.getEscape());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("z", charBuffer0.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("z", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("YDn#x+t~%:$MGN");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("YDn#x+t~%:$MGN"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YDn#x+t~%:$MGN");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat6));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(priorityQueue0.contains("YDn#x+t~%:$MGN"));
      assertEquals(1, priorityQueue0.size());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals(Quote.ALL, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat5.getEscape());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat6.getQuotePolicy());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentStart());
      assertEquals("\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isNullHandling());
      assertTrue(cSVFormat6.isEscaping());
      assertFalse(cSVFormat6.isCommentingEnabled());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.isQuoting());
      assertNull(cSVFormat6.getQuoteChar());
      assertEquals('a', (char)cSVFormat6.getEscape());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('C');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) '\u0000');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\u0000', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isQuoting());
      
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\u0000', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\u0000', (char)cSVFormat3.getCommentStart());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\u0000', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\u0000', (char)cSVFormat3.getCommentStart());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals('\u0000', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('C');
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\u0000', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\u0000', (char)cSVFormat3.getCommentStart());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals('\u0000', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertEquals('C', (char)cSVFormat5.getEscape());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getQuoteChar());
      assertTrue(cSVFormat5.isEscaping());
      assertEquals("C", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\u0000', (char)cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charBuffer0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\u0000', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\u0000', (char)cSVFormat3.getCommentStart());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("C", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertEquals('\u0000', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isQuoting());
      assertEquals('C', (char)cSVFormat5.getEscape());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getQuoteChar());
      assertTrue(cSVFormat5.isEscaping());
      assertEquals("C", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\u0000', (char)cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isCommentingEnabled());
      
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataTruncation dataTruncation0 = new DataTruncation(4, false, true, 4, 4);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      boolean boolean0 = linkedList0.add((SQLWarning) dataTruncation0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) linkedList0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = CSVFormat.newFormat('{');
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('{', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('z');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('z', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('z');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      
      Character character1 = Character.valueOf('{');
      assertFalse(character1.equals((Object)character0));
      assertEquals('{', (char)character1);
      assertNotNull(character1);
      
      cSVPrinter0.printComment("");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("z \r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      
      CSVFormat cSVFormat4 = cSVFormat0.withCommentStart(character1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(character1.equals((Object)character0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('{', (char)cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getQuotePolicy());
      
      cSVPrinter0.printComment("Unexpected Token type: ");
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("z \r\nz Unexpected Token type: \r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Unexpected Token type: ";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) character1;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals(9, objectArray0.length);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      
      Character character0 = new Character('\\');
      assertEquals('\\', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      PriorityQueue<InputStreamReader> priorityQueue0 = new PriorityQueue<InputStreamReader>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
      assertEquals(0, priorityQueue0.size());
      
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<SQLWarning> linkedList1 = new LinkedList<SQLWarning>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Stream<SQLWarning> stream0 = linkedList1.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      SQLWarning sQLWarning0 = new SQLWarning("", "'tX");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("'tX", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      CharBuffer charBuffer2 = charBuffer1.duplicate();
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer2, charBuffer1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertNotNull(charBuffer2);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.limit());
      assertEquals(0, charBuffer2.remaining());
      assertTrue(charBuffer2.isReadOnly());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.capacity());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.length());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLWarning0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals(1, objectArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(36, charArrayWriter0.size());
      
      cSVPrinter0.print(byteBuffer0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(72, charArrayWriter0.size());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)cSVPrinter0.getOut();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(charArrayWriter1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(72, charArrayWriter0.size());
      assertEquals(72, charArrayWriter1.size());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals(1, objectArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(107, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = CSVFormat.newFormat('{');
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('{', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('z');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('z', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('z');
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat4 = cSVFormat0.withCommentStart(character0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('z', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getEscape());
      
      cSVPrinter0.printComment("");
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertEquals("z \r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertEquals('z', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("1", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('C');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      
      Character character0 = Character.valueOf('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertEquals('1', (char)cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertEquals('1', (char)cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('1', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertEquals('1', (char)cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('1', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('1', (char)cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isQuoting());
      assertEquals("C", cSVFormat4.getRecordSeparator());
      
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('C');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNotNull(cSVFormat5);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertEquals('1', (char)cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('1', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('1', (char)cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isQuoting());
      assertEquals("C", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isQuoting());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteChar());
      assertEquals('C', (char)cSVFormat5.getEscape());
      assertEquals('1', (char)cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.isNullHandling());
      assertTrue(cSVFormat5.isEscaping());
      
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charBuffer0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertNotNull(cSVPrinter0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("1", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("C", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals("C", cSVFormat2.getRecordSeparator());
      assertEquals('1', (char)cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('1', (char)cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("C", cSVFormat3.getRecordSeparator());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('1', (char)cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isQuoting());
      assertEquals("C", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertEquals("C", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isQuoting());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getQuoteChar());
      assertEquals('C', (char)cSVFormat5.getEscape());
      assertEquals('1', (char)cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.isNullHandling());
      assertTrue(cSVFormat5.isEscaping());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("1", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("1", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("YDn#x+t~%:$MGN");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("YDn#x+t~%:$MGN"));
      assertEquals(1, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      assertEquals(2, charArray0.length);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("YDn#x+t~%:$MGN");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("YDn#x+t~%:$MGN"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YDn#x+t~%:$MGN");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals(0, charArray0.length);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isQuoting());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2228);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Iterable<PipedOutputStream> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      cSVPrinter0.flush();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedReader0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) pipedReader0;
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      assertNotNull(bufferedWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      bufferedWriter0.close();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      cSVPrinter0.flush();
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bufferedWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      cSVPrinter1.printRecord(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals(9, objectArray0.length);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals("\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>(arrayList0);
      assertNotNull(linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      Stream<SQLWarning> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      cSVPrinter1.flush();
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'d', 'd'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("dd", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('J');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('f');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals('J', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('f', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(' ');
      assertFalse(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      assertNotNull(character1);
      
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteChar(character1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals(' ', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isQuoting());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'d', 'd'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("dd", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertEquals("dd", charBuffer1.toString());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(2, charBuffer1.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      Character character2 = Character.valueOf(' ');
      assertFalse(character2.equals((Object)character0));
      assertEquals(' ', (char)character2);
      assertNotNull(character2);
      
      CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar(character2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(character2.equals((Object)character0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.isNullHandling());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertTrue(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) 'd';
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) 'd';
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertEquals(8, objectArray0.length);
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      cSVPrinter0.flush();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      cSVPrinter0.flush();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter1.toString());
      
      cSVPrinter0.print(charBuffer0);
      assertNotSame(stringWriter0, stringWriter1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertArrayEquals(new char[] {'d', 'd'}, charArray0);
      assertFalse(stringWriter0.equals((Object)stringWriter1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertEquals(2, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("dd", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('J', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('f', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('J', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(cSVPrinter0);
      assertEquals(2, charArray0.length);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.position());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(2, charBuffer1.length());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals(2, charArray0.length);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      cSVPrinter0.close();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertEquals(2, charArray0.length);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      cSVPrinter0.println();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertArrayEquals(new char[] {'\r', '\n'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertEquals(2, charArray0.length);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.position());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("*ZMV+LH+O", "");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("*ZMV+LH+O", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: *ZMV+LH+O", sQLTransientConnectionException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("*ZMV+LH+O", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: *ZMV+LH+O", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("*ZMV+LH+O", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: *ZMV+LH+O", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransientConnectionException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.print(cSVFormat0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2228);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {',', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(",\u0000", charBuffer0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('d');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      Character character0 = new Character(',');
      assertEquals(',', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', (char)cSVFormat4.getQuoteChar());
      assertEquals('d', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('I', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {',', '\u0000'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(2, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(",\u0000", charBuffer0.toString());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(",\u0000", charBuffer1.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {',', '\u0000'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(stringWriter1);
      assertEquals(2, charArray0.length);
      assertEquals(",\u0000", stringWriter1.toString());
      assertEquals(",\u0000", stringWriter0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(",\u0000", charBuffer0.toString());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(",\u0000", charBuffer1.toString());
      
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) ',';
      objectArray0[5] = (Object) charBuffer1;
      objectArray0[6] = (Object) '\u0000';
      objectArray0[7] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertEquals(8, objectArray0.length);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      cSVPrinter0.flush();
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      cSVPrinter0.flush();
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, appendable0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertSame(appendable0, stringWriter0);
      assertSame(appendable0, stringWriter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertNotNull(appendable0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      cSVPrinter0.print(objectArray0[4]);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, appendable0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertEquals(8, objectArray0.length);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, appendable0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NP&34Ar", "/Xe=^>k9a>;ah");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: NP&34Ar", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("NP&34Ar", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("/Xe=^>k9a>;ah", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, appendable0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('d', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('d', (char)cSVFormat2.getEscape());
      assertEquals('I', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('I', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('d', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: NP&34Ar", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("NP&34Ar", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("/Xe=^>k9a>;ah", sQLInvalidAuthorizationSpecException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      assertNotNull(bufferedWriter0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "hS[a;CWH~O[");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("hS[a;CWH~O[", charBuffer0.toString());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("hS[a;CWH~O[", charBuffer0.toString());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(11, charBuffer1.remaining());
      assertEquals(11, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(11, charBuffer1.limit());
      assertEquals(11, charBuffer1.length());
      assertEquals("hS[a;CWH~O[", charBuffer1.toString());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("hS[a;CWH~O[", charBuffer0.toString());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(11, charBuffer1.remaining());
      assertEquals(11, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(11, charBuffer1.limit());
      assertEquals(11, charBuffer1.length());
      assertEquals("hS[a;CWH~O[", charBuffer1.toString());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer1;
      objectArray0[3] = (Object) charBuffer1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      cSVPrinter0.close();
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      cSVPrinter0.flush();
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bufferedWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bufferedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) bufferedWriter0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals("\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>(arrayList0);
      assertNotNull(linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      Stream<SQLWarning> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      SQLWarning sQLWarning0 = new SQLWarning("'tX", "'tX");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: 'tX", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("'tX", sQLWarning0.getMessage());
      assertEquals("'tX", sQLWarning0.getSQLState());
      
      boolean boolean1 = linkedList0.add(sQLWarning0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(sQLWarning0));
      assertTrue(linkedList0.contains(sQLWarning0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, linkedList0.size());
      assertEquals("java.sql.SQLWarning: 'tX", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("'tX", sQLWarning0.getMessage());
      assertEquals("'tX", sQLWarning0.getSQLState());
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) cSVFormat0;
      String string0 = cSVFormat0.format(objectArray0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      stringWriter0.close();
      assertEquals("\r\n", stringWriter0.toString());
      
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) resultSet1;
      objectArray0[4] = (Object) resultSet0;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('I', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      SQLWarning sQLWarning1 = new SQLWarning("4D3S'I^FS!zJZGMw", "", 0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNotNull(sQLWarning1);
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: 4D3S'I^FS!zJZGMw", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertEquals("4D3S'I^FS!zJZGMw", sQLWarning1.getMessage());
      
      boolean boolean2 = arrayList0.add(sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(arrayList0.contains(sQLWarning0));
      assertTrue(arrayList0.contains(sQLWarning1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: 4D3S'I^FS!zJZGMw", sQLWarning1.toString());
      assertEquals("", sQLWarning1.getSQLState());
      assertEquals("4D3S'I^FS!zJZGMw", sQLWarning1.getMessage());
      
      Spliterator<SQLWarning> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(arrayList0.contains(sQLWarning0));
      assertTrue(arrayList0.contains(sQLWarning1));
      assertTrue(linkedList0.contains(sQLWarning0));
      assertFalse(linkedList0.contains(sQLWarning1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, linkedList0.size());
      
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(arrayList0.contains(sQLWarning0));
      assertTrue(arrayList0.contains(sQLWarning1));
      assertTrue(linkedList0.contains(sQLWarning0));
      assertFalse(linkedList0.contains(sQLWarning1));
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals("\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>(arrayList0);
      assertNotNull(linkedList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      Stream<SQLWarning> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      SQLWarning sQLWarning0 = new SQLWarning("'tX", "'tX");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: 'tX", sQLWarning0.toString());
      assertEquals("'tX", sQLWarning0.getMessage());
      assertEquals("'tX", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals("\r\n", stringWriter0.toString());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertNotNull(cSVPrinter2);
      assertEquals("\r\n", stringWriter0.toString());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      cSVPrinter2.close();
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals("\r\n", stringWriter0.toString());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) linkedList0;
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertEquals(2, objectArray0.length);
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      cSVPrinter2.println();
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      
      Appendable appendable0 = cSVPrinter1.getOut();
      assertSame(stringWriter0, appendable0);
      assertSame(appendable0, stringWriter0);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertNotNull(appendable0);
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals("\r\n", stringWriter0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>(arrayList0);
      assertNotNull(linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      Stream<SQLWarning> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      SQLWarning sQLWarning0 = new SQLWarning("", "'tX");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("'tX", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      
      boolean boolean1 = linkedList0.add(sQLWarning0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(sQLWarning0));
      assertTrue(linkedList0.contains(sQLWarning0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("'tX", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      
      Character character0 = Character.valueOf('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('3', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) sQLWarning0;
      objectArray0[3] = (Object) charset0;
      objectArray0[4] = (Object) stream0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      cSVPrinter0.println();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(stringWriter0, appendable0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(appendable0, stringWriter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotNull(appendable0);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(stringWriter1);
      assertEquals(1, charArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", stringWriter1.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Character character0 = Character.valueOf('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('z', (char)cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertEquals(1, charArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", stringWriter1.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('z', (char)cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      
      Buffer buffer0 = charBuffer1.flip();
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(buffer0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(1, buffer0.capacity());
      assertEquals(0, buffer0.remaining());
      assertTrue(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasArray());
      
      cSVPrinter0.printComment("G%9i%%efrwI&S_ESE");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(1, charArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", stringWriter1.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('z', (char)cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      
      cSVPrinter0.print((Object) null);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(1, charArray0.length);
      assertEquals("\"\"", stringWriter0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("\"\"", stringWriter1.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('z', (char)cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('Z');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('Z', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat2);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotNull(cSVPrinter1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.remaining());
      assertEquals("Z", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('Z', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("XX", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      assertNotNull(cSVPrinter0);
      assertEquals(2, charArray0.length);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("XX", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      
      Character character0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) 'X';
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      assertNotNull(bufferedWriter0);
      
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      mockPrintWriter0.println(0.0);
      assertSame(mockPrintWriter0, printWriter0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('J');
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("J", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("J", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentingEnabled());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printWriter0;
      mockPrintWriter0.println((Object) cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("J", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      
      Character character0 = new Character('T');
      assertEquals('T', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertEquals('T', (char)cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "out";
      stringArray0[1] = "52";
      stringArray0[2] = "NON_NUMERIC";
      stringArray0[3] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertEquals(4, stringArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertEquals('T', (char)cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertEquals('T', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('');
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertEquals(4, stringArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertEquals('T', (char)cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertEquals('T', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('T', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('', (char)cSVFormat4.getCommentStart());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVPrinter0);
      assertEquals(4, stringArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertEquals('T', (char)cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertEquals('T', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('T', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('', (char)cSVFormat4.getCommentStart());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      
      cSVPrinter0.close();
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertEquals(4, stringArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertEquals('T', (char)cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getNullString());
      assertEquals('T', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('T', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('', (char)cSVFormat4.getCommentStart());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      assertNotNull(bufferedWriter0);
      
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      mockPrintWriter0.println(0.0);
      assertSame(mockPrintWriter0, printWriter0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(')');
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertEquals(")", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isQuoting());
      assertEquals(")", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat0.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isQuoting());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getCommentStart());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("rlbT'qI}{>");
      char char0 = 'O';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rlbT'qI}{>");
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('O');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 'O';
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "rlbT'qI}{>";
      objectArray0[5] = (Object) 'O';
      Object object1 = new Object();
      objectArray0[6] = object1;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVFormat0.withQuoteChar((Character) null);
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.close();
      objectArray0[3] = (Object) cSVPrinter0;
      charBuffer0.duplicate();
      objectArray0[4] = (Object) '3';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '_';
      charArray0[2] = ')';
      charArray0[3] = '5';
      charArray0[4] = 'E';
      charArray0[5] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printRecord(objectArray0);
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>();
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
      assertArrayEquals(new char[] {'\r', '\n', ')', '5', 'E', '^'}, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bufferedWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bufferedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) bufferedWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) pipedWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>(arrayList0);
      linkedList0.parallelStream();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning("'tX", "'tX");
      linkedList0.add(sQLWarning0);
      cSVPrinter0.flush();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('X');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object object0 = new Object();
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b)Y7vvwGYPgZ;Q31%";
      stringArray0[1] = ";b]ZMv)Z}_r$l@bq0";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withQuotePolicy(quote0);
      cSVPrinter1.printRecord((Object[]) stringArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" EmptyLines:ignored", "", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, ";b]ZMv)Z}_r$l@bq0", map0, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("b)Y7vvwGYPgZ;Q31%", ";b]ZMv)Z}_r$l@bq0", 35, sQLClientInfoException1);
      cSVPrinter1.print(sQLInvalidAuthorizationSpecException0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      cSVPrinter0.print("");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("The escape character cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('8');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat1.withQuoteChar('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVFormat2.withNullString((String) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) "The escape character cannot be a line break";
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(mockPrintStream0);
      cSVPrinter0.getOut();
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream("The escape character cannot be a line break", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      charBuffer1.flip();
      cSVPrinter0.printComment("G%9i%%efrwI&S_ESE");
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
      assertEquals("\"\"", stringWriter1.toString());
      assertEquals("\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = new Character('j');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("u");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      mockPrintStream0.print((-2849));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "u";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "u";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) dataOutputStream0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "8-V<Mexm:W,Ng", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      char char0 = 'W';
      cSVPrinter0.printComment("8-V<Mexm:W,Ng");
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "u", (-2849), 3773);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVFormat0.withQuoteChar((Character) null);
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      charBuffer0.duplicate();
      objectArray0[4] = (Object) '3';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      Object object1 = new Object();
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      charArray0[1] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Q/Z?^7bpssd [)rpl");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bufferedWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bufferedWriter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) bufferedWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) pipedWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>();
      Short short0 = Short.valueOf((short)13);
      arrayDeque0.push(short0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'L';
      charArray0[2] = 'q';
      charArray0[3] = 'a';
      charArray0[4] = '@';
      charArray0[5] = '2';
      charArray0[6] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      ServiceLoader<FilterInputStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.io.FilterInputStream]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      mockPrintWriter0.println(0.0);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('J');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object object0 = new Object();
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printWriter0;
      mockPrintWriter0.println((Object) cSVFormat3);
      objectArray0[1] = (Object) printWriter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("No header mapping was specified, the record values can't be accessed by name");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No header mapping was specified, the record values can't be accessed by name", "No header mapping was specified, the record values can't be accessed by name", 92, sQLSyntaxErrorException0);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.newFormat('X');
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      stringWriter0.append((CharSequence) null, 0, 0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      priorityQueue0.add("string");
      HashSet<BufferedWriter> hashSet0 = new HashSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Appendable appendable1 = cSVPrinter0.getOut();
      assertSame(appendable1, appendable0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NON_NUMERIC");
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('8');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "NON_NUMERIC";
      objectArray0[1] = (Object) cSVPrinter0;
      Object object0 = new Object();
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "NON_NUMERIC";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[b~dq<=#~");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "u)Msuf~|~JxAYtO#";
      String string1 = "E";
      MockFile mockFile0 = new MockFile("E");
      File file0 = MockFile.createTempFile("u)Msuf~|~JxAYtO#", "E", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "u)Msuf~|~JxAYtO#", 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("rlbT'qI}{>");
      cSVFormat0.withQuoteChar('O');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      try { 
        pipedWriter0.write(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("The escape character cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('M');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVFormat2.withNullString((String) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) "The escape character cannot be a line break";
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(mockPrintStream0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      LinkedHashSet<BufferedOutputStream> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<BufferedOutputStream>((-1077), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1077
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
