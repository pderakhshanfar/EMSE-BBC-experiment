* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 16902
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 675636431
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:52:07.601 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:52:07.602 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:52:07.603 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:52:07.603 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:52:07.604 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:52:10.297 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:56:31.349 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 23:01:15.157 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 601s and 1061 generations, 577372 statements, best individual has fitness: 109.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 159
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 128
* Number of covered goals: 118
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 486
* Number of covered goals: 439
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 128
* Number of covered goals: 112
* Generated 73 tests with total length 439
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:03:44.627 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6689333333333334% of time used, but only 32/73 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 40%
* Compiling and checking tests
[MASTER] 23:03:53.403 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_17_1633647833403
[MASTER] 23:03:53.403 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 23:03:54.823 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:55.865 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:56.605 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:56.980 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:57.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:57.969 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:58.409 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:58.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:59.008 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:59.399 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:59.417 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_26_tmp__ESTest.test0(CSVPrinter_26_tmp__ESTest.java:27)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:59.427 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
Quote quote0 = Quote.NON_NUMERIC;
CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
Object[] objectArray0 = new Object[4];
cSVPrinter0.printRecords(objectArray0);
assertEquals(4, objectArray0.length);


[MASTER] 23:04:03.474 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:07.550 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_39_tmp__ESTest.test0(CSVPrinter_39_tmp__ESTest.java:27)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:07.551 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('t');
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
cSVPrinter0.print(mockFileOutputStream0);
cSVPrinter0.printComment("8VbOLNVB^PX 9(");

[MASTER] 23:04:17.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_57_tmp__ESTest.test0(CSVPrinter_57_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:17.383 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());

SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
assertNotNull(sQLIntegrityConstraintViolationException0);
assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
assertNull(sQLIntegrityConstraintViolationException0.getMessage());
assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());

cSVPrinter0.print(sQLIntegrityConstraintViolationException0);

[MASTER] 23:04:21.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_61_tmp__ESTest.test0(CSVPrinter_61_tmp__ESTest.java:80)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:21.762 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());

CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals('v', (char)cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getNullString());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertEquals('\t', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.isCommentingEnabled());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.isNullHandling());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals('v', (char)cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getNullString());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertEquals('\t', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.isCommentingEnabled());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

cSVPrinter0.printComment((String) null);

[MASTER] 23:04:26.748 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_67_tmp__ESTest.test0(CSVPrinter_67_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:26.748 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getCommentStart());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getCommentStart());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.printRecord((Object[]) null);

[MASTER] 23:04:30.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_71_tmp__ESTest.test0(CSVPrinter_71_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:31.030 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getNullString());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
assertNotNull(cSVPrinter0);
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getNullString());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.printRecords((Iterable<?>) null);

[MASTER] 23:04:40.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_82_tmp__ESTest.test0(CSVPrinter_82_tmp__ESTest.java:45)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:40.375 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.println();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-20/tests/9
* Done!

* Computation finished
