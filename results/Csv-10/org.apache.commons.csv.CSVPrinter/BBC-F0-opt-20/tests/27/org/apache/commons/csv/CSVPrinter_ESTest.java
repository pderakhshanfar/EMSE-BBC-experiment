/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:21:55 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.UnmappableCharacterException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.PriorityQueue;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[53];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A$$D>!h0_%");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("A$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\nA$$D>!h0_%\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5H+[1!4");
      Object[] objectArray0 = new Object[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("5H+[1!4");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('T');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.print(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = object0;
      MockFile mockFile0 = new MockFile(") EOF reached before encapsulated token finished");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%=?SS]1uo:b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[8];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2124);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 53, sQLWarning0);
      sQLWarning0.initCause(sQLInvalidAuthorizationSpecException0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Mppig for %s 1NtYlound, expeced nof5%s");
      priorityQueue0.add(mockFileWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Mppig for %s 1NtYlound, expeced nof5%s");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>();
      MockFile mockFile0 = new MockFile("5H+[1!4");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      priorityQueue0.add(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("string", true);
      priorityQueue0.add(mockFileWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ArrayDeque<CharArrayWriter> arrayDeque0 = new ArrayDeque<CharArrayWriter>(24);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      MockFile mockFile0 = new MockFile("The comment start and the escape character cannot be the same ('");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment("\u0085");
        fail("Expecting exception: UnmappableCharacterException");
      
      } catch(UnmappableCharacterException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.Lexer");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(1434);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 33, 1434);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Integer integer0 = new Integer(32);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(integer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("].Whpb<=7`*");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("].Whpb<=7`*");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("A`Rt./{2h2}GM7_ ");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      Character character0 = new Character('n');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('n')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(35);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CZ~8.fQPqIKd<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals(13, charArrayWriter0.size());
      assertEquals("CZ~8.fQPqIKd<", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) priorityQueue0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\n\n\n\n\n\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLWarning sQLWarning0 = new SQLWarning();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2124);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
      assertEquals(114, charBuffer0.length());
      assertEquals(8, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("AB\r");
      assertEquals("M AB\r\nM \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[4];
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) charArray0[0]);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printComment("Sf");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("|[N&l,?*iosyM,k");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printComment("|[N&l,?*iosyM,k");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("AB\r|\n");
      assertEquals("\\ AB\r\n\\ |\r\n\\ \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("The header contains duplicate names: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('j');
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|[N&l,?*iosyM,k");
      Object[] objectArray0 = new Object[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("|[N&l,?*iosyM,k");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^.8#*n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"^.8#*n\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":L|;HT");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\":L|;HT\",:L|;HT,:L|;HT,:L|;HT,:L|;HT,:L|;HT\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"gPgMZ?8FR$*W#'*");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"\"\"gPgMZ?8FR$*W#'*\",\"\"\"gPgMZ?8FR$*W#'*\",\"\"\"gPgMZ?8FR$*W#'*\",\"\"\"gPgMZ?8FR$*W#'*\",\"\"\"gPgMZ?8FR$*W#'*\",\"\"\"gPgMZ?8FR$*W#'*\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(20).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(23, charArrayWriter0.size());
      assertEquals("\"\",,,,,,,,,,,,,,,,,,,\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Float float0 = new Float((-36.33094700244471));
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('j');
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 5);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLRecoverableException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(34, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9Z0y$N/:9LPGz1");
      Object[] objectArray0 = new Object[9];
      MockPrintStream mockPrintStream0 = new MockPrintStream("9Z0y$N/:9LPGz1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[10];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "NONE");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        cSVPrinter0.print(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("].Whpb<=7`*");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintStream0, appendable0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
