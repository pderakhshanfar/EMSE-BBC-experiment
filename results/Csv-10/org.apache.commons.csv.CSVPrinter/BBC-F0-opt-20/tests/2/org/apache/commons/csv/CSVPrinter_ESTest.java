/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:06:24 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5");
      MockFileWriter mockFileWriter0 = new MockFileWriter("5");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('!');
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("j,'?#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "j,'?#");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(13);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "7$1e2ukEq$DxdDL4g>";
      stringArray0[2] = "]8v";
      stringArray0[3] = "a2I/";
      stringArray0[4] = "mj";
      stringArray0[5] = " SurroundingSpaces:ignored";
      cSVFormat1.withHeader(stringArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=;");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "F");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("UxpectedQuote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      objectArray0[2] = (Object) quote0;
      cSVPrinter0.println();
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}z^+ vH)}8QP&r~G");
      MockFileWriter mockFileWriter0 = new MockFileWriter("The header contains duplicate names: ");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("aSl[>M ", "_", 65, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("aSl[>M ", sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("}z^+ vH)}8QP&r~G", "<t~X*", (-3183), sQLSyntaxErrorException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_");
      cSVFormat0.withEscape('1');
      Charset.defaultCharset();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withNullString("tRcc n^");
      MockFileWriter mockFileWriter0 = new MockFileWriter("tRcc n^");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      int int0 = 1;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      String string0 = "";
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("").when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=;");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('[');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      Quote quote1 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote1);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) "=;";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) quote0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=;");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('[');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      Quote quote1 = Quote.NONE;
      cSVFormat3.withQuotePolicy(quote1);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) "=;";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) quote0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(25);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.print(objectArray0[4]);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("#2fpU'4u X0W");
      MockFileWriter mockFileWriter0 = new MockFileWriter("#2fpU'4u X0W", true);
      cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#2fpU'4u X0W");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVFormat0.withNullString("#2fpU'4u X0W");
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#2fpU'4u X0W");
      MockFileWriter mockFileWriter0 = new MockFileWriter("#2fpU'4u X0W", true);
      cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object1 = new Object();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      objectArray0[1] = object1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#2fpU'4u X0W");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('j');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2901);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#2fpU'4u X0W");
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat2;
      objectArray1[1] = (Object) quote0;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) cSVFormat0;
      objectArray1[4] = (Object) cSVFormat3;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) mockPrintStream0;
      objectArray1[7] = (Object) charArrayWriter0;
      objectArray1[8] = (Object) cSVFormat0;
      PrintStream printStream0 = mockPrintStream0.printf("#2fpU'4u X0W", objectArray1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      cSVPrinter0.print(bufferedOutputStream0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("aSl[>M ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("3/yp?P#c{", true);
      cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('L');
      cSVFormat4.withDelimiter('L');
      cSVFormat3.print(mockFileWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(']');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("#2fpU'4u X0W");
      MockFileWriter mockFileWriter0 = new MockFileWriter("3/yp?P#c{", true);
      cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter(']');
      cSVFormat4.withDelimiter(']');
      cSVFormat3.print(mockFileWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character.valueOf('h');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printComment("\r");
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      ServiceLoader<BufferedOutputStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('@');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('@');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(960);
      cSVPrinter0.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Float float0 = new Float(0.0);
      cSVPrinter0.print(float0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3540);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Double double0 = new Double(0.0);
      try { 
        cSVPrinter0.print(double0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('n');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('n');
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.flush();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVPrinter2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVPrinter1;
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("@=vcj}?JvhetrBVl0%[", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withNullString("");
      Character character0 = new Character(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('v');
      cSVFormat3.toString();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("@=vcj}?JvhetrBVl0%[");
      Object[] objectArray0 = new Object[0];
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      char[] charArray0 = new char[0];
      mockFileWriter0.write(charArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>(483);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('b');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('b');
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quote0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      CharBuffer charBuffer0 = CharBuffer.allocate(117);
      charBuffer0.order();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('b');
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      StringWriter stringWriter0 = new StringWriter();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("jLpXo!Z", "jLpXo!Z", 44, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLInvalidAuthorizationSpecException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      cSVFormat0.print(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Charset.defaultCharset();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileWriter mockFileWriter0 = new MockFileWriter("^>", true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("\r?");
      cSVPrinter0.printComment("ABpFT-P;^UG#");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      cSVPrinter0.printComment("9`3]]~!/I/cZb2U");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      Character character0 = new Character('h');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(101);
      charArrayWriter0.append('h');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(34);
      charArrayWriter0.flush();
      cSVFormat2.print(charArrayWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Charset.defaultCharset();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("^>", true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("\n");
      cSVPrinter0.printComment("ABpFT-P;^UG#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVPrinter0.printComment("9`3]]~!/I/cZb2U");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("R_0d:`BL", true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("^>");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      Character character0 = Character.valueOf('?');
      cSVFormat0.withQuoteChar(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(34);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('c');
      Object object0 = new Object();
      Object object1 = new Object();
      MockFileWriter mockFileWriter0 = new MockFileWriter("')", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Quote quote0 = Quote.MINIMAL;
      Quote[] quoteArray0 = new Quote[1];
      charArrayWriter2.reset();
      quoteArray0[0] = quote0;
      EnumSet<Quote> enumSet0 = EnumSet.of(quote0, quoteArray0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
      Object object2 = new Object();
      cSVFormat0.print(charArrayWriter2);
      Object object3 = new Object();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Parameter '", (String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart(character0);
      Character.valueOf(' ');
      Character character1 = Character.valueOf(' ');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator(" EmptyLines:ignored");
      Character character2 = new Character(' ');
      cSVFormat1.withEscape(character2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " EmptyLines:ignored", 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat5);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(":[Y)TV:5");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = '4';
      charArray0[4] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment(":[Y)TV:5");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(" EmptyLines:ignored");
      Character character1 = new Character('|');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|0`2Qf}@4KZM5]2tP", "jW`GbrT>H@QT");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jW`GbrT>H@QT");
      Character character0 = new Character('Q');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character1 = Character.valueOf('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Charset.defaultCharset();
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("^>", true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("\r\n");
      cSVPrinter0.printComment("ABpFT-P;^UG#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVPrinter0.printComment("9`3]]~!/I/cZb2U");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-5)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(26);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      stringWriter0.flush();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('[');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      Vector<MockFileReader> vector0 = new Vector<MockFileReader>(2);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charset0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('f');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3535);
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.println();
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = '\\';
      charArrayWriter0.write(charArray0);
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) charset0;
      objectArray1[1] = (Object) cSVFormat0;
      cSVPrinter0.close();
      objectArray1[3] = (Object) charset0;
      objectArray1[3] = (Object) charset0;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charset0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) charset0;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[3] = (Object) charset0;
      objectArray1[3] = (Object) charset0;
      HashSet<InputStreamReader> hashSet0 = new HashSet<InputStreamReader>(2, 2);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      cSVFormat0.withDelimiter('R');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("mbm5 =");
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('U');
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      Quote quote1 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator('g');
      cSVFormat7.withSkipHeaderRecord(true);
      cSVFormat6.withCommentStart((Character) null);
      Stack<BufferedWriter> stack0 = new Stack<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      StringWriter stringWriter0 = new StringWriter(2);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      stack0.addElement(bufferedWriter0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(64);
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("out");
      cSVPrinter0.printComment("out");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[0];
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.println();
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("z:mN]#e9j++9ju4\u0002=", "z:mN]#e9j++9ju4\u0002=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z:mN]#e9j++9ju4\u0002=");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("z:mN]#e9j++9ju4\u0002=");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printComment("");
      Object object0 = new Object();
      Locale locale0 = new Locale("harset", "harset", ";a");
      Object[] objectArray0 = null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "z:mN]#e9j++9ju4\u0002=", (Object[]) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      cSVPrinter0.close();
      cSVPrinter0.flush();
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x4F~90&&}U,C^0VCVi", ":34_4d9ubm7A");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) treeSet0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) sQLIntegrityConstraintViolationException0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter1;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(50);
      charset0.decode(byteBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
      cSVFormat2.print(pipedWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) byteBuffer0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) charset0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('b');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      cSVFormat3.withEscape('$');
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.write("QuoteChar=<");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Character.valueOf('R');
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withCommentStart((Character) null);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(0, 114);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1);
      vector0.addElement(bufferedWriter0);
      Object object0 = new Object();
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      charArrayWriter0.append('P');
      cSVPrinter0.close();
      cSVPrinter0.flush();
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x4F~90&&}U,C^0VCVi", ":34_4d9ubm7A");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) treeSet0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('b');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      cSVFormat3.withEscape('$');
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.write("QuoteChar=<");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Character.valueOf('R');
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withCommentStart((Character) null);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(0, 114);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1);
      vector0.addElement(bufferedWriter0);
      Object object0 = new Object();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[4] = (Object) null;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Short short0 = new Short((short) (-2));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("mbm5 =");
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('U');
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      Quote quote1 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quote1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) quote1;
      objectArray0[5] = (Object) byteBuffer0;
      objectArray0[6] = (Object) cSVFormat6;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) byteBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The quoteChar cannot be a line break");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("$C-Z`S]a(T@[t", true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.flush();
      mockFileWriter0.write((-237));
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat4;
      objectArray1[2] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray1[4] = object1;
      Object object2 = new Object();
      objectArray1[5] = object2;
      objectArray1[6] = (Object) null;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Iterable<DataInputStream> iterable0 = null;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withCommentStart(character0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(203, (-3737));
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      StringWriter stringWriter0 = new StringWriter(10);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 31);
      BufferedWriter bufferedWriter1 = new BufferedWriter(bufferedWriter0);
      vector0.addElement(bufferedWriter1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) bufferedWriter1;
      objectArray0[2] = (Object) appendable0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('b');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3535);
      charArrayWriter0.write("QuoteChar=<");
      File file0 = MockFile.createTempFile("QuoteChar=<", "xr[~s#");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      mockFileWriter0.write((-906));
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      cSVFormat0.withQuoteChar('\u0081');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      String string0 = "";
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(25);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(25);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      StringWriter stringWriter1 = new StringWriter(25);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      cSVPrinter0.printComment("");
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Object object2 = new Object();
      objectArray0[7] = object2;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('b');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3535);
      charArrayWriter0.write("QuoteChar=<");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter1);
      Character character0 = Character.valueOf('b');
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat3.withCommentStart(character0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(3535, 3535);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) vector0;
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      vector0.addElement(bufferedWriter0);
      objectArray0[2] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecord((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayDeque<DataTruncation> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
      cSVFormat0.withDelimiter('0');
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('b');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3535);
      charArrayWriter0.write("QuoteChar=<");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter1);
      Character character0 = Character.valueOf('b');
      cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(3535, 3535);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) vector0;
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      vector0.addElement(bufferedWriter0);
      objectArray0[2] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quote0;
      objectArray0[5] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.toString();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      char char0 = 'P';
      charArrayWriter0.append('P');
      cSVPrinter0.close();
      cSVPrinter0.flush();
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x4F~90&&}U,C^0VCVi", "");
      // Undeclared exception!
      try { 
        treeSet0.add(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = '!';
      CSVFormat.newFormat('!');
      StringWriter stringWriter0 = new StringWriter(869);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.getOut();
      Vector<SQLException> vector0 = null;
      try {
        vector0 = new Vector<SQLException>((Collection<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord(false);
      stringWriter0.flush();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.withSkipHeaderRecord(false);
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('h');
      StringWriter stringWriter1 = stringWriter0.append('q');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.println();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      stringWriter0.append('r');
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      cSVPrinter0.print(object0);
      objectArray0[4] = (Object) stringWriter0;
      cSVPrinter0.flush();
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      stringWriter0.close();
      cSVPrinter0.print(cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MINIMAL");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "MINIMAL";
      objectArray0[2] = (Object) "MINIMAL";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("MINIMAL", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("MINIMAL");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('A');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('A')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The quoteChar cannot be a line break");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("$C-Z`S]a(T@[t", true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.flush();
      mockFileWriter0.write((-237));
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat4;
      objectArray1[2] = (Object) cSVFormat4;
      objectArray1[3] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray1[4] = object1;
      Object object2 = new Object();
      objectArray1[5] = object2;
      objectArray1[6] = (Object) null;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|0`2Qf}@4KZM5]2tP", "|0`2Qf}@4KZM5]2tP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('|');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
