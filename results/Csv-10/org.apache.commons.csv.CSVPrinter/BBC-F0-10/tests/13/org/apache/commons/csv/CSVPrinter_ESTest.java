/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:06:39 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      String string0 = cSVFormat0.toString();
      assertNotNull(string0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("cGX}kGuxGF[]$#");
      assertNotNull(cSVFormat1);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("cGX}kGuxGF[]$#", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1295);
      assertNotNull(bufferedWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("cGX}kGuxGF[]$#", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      assertNotNull(bufferedReader0);
      assertEquals(0, pipedInputStream0.available());
      
      CSVParser cSVParser0 = cSVFormat1.parse(bufferedReader0);
      assertNotNull(cSVParser0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("cGX}kGuxGF[]$#", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter1 = cSVFormat0.print(bufferedWriter0);
      assertNotNull(cSVPrinter1);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bufferedInputStream0;
      cSVPrinter1.printRecords(objectArray0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(1, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>(comparator0);
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('j');
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('j', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('j', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printComment("I\r{c\n");
      assertEquals(15, charArrayWriter0.size());
      assertEquals("j I\r\nj {c\r\nj \r\n", charArrayWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('j', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      
      String string0 = "";
      String string1 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("MucNp]oMvLnW8", "MucNp]oMvLnW8");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException0.getMessage());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: MucNp]oMvLnW8", sQLTransientConnectionException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("MucNp]oMvLnW8", sQLTransientConnectionException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException0.getMessage());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: MucNp]oMvLnW8", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("MucNp]oMvLnW8", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: MucNp]oMvLnW8", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException0.getMessage());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: MucNp]oMvLnW8", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("MucNp]oMvLnW8", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: MucNp]oMvLnW8", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException1.getMessage());
      assertEquals("MucNp]oMvLnW8", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: MucNp]oMvLnW8", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertSame(cSVFormat1, cSVFormat0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('A');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('A', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('A', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printComment("\r");
      assertEquals("A \r\nA \r\n", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('A', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      
      String string0 = cSVFormat0.toString();
      assertNotNull(string0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1295);
      assertNotNull(bufferedWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) bufferedWriter0;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(16, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("o");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("o", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "o");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals("o", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("o", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals("o", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("uhA.M >Zvs=A");
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("uhA.M >Zvs=A");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("uhA.M >Zvs=A", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("uhA.M >Zvs=A", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      PipedReader pipedReader0 = new PipedReader(31);
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertNotNull(cSVParser0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertFalse(cSVParser0.isClosed());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      cSVPrinter0.print(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("uhA.M >Zvs=A", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVParser0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(')');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(')', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(')', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(')', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(')', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(')', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLClientInfoException0);
      assertNotNull(sQLWarning0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLClientInfoException: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      cSVPrinter0.print(sQLWarning0);
      assertEquals(30, charArrayWriter0.size());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(')', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals(')', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLClientInfoException: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)sQLClientInfoException0.initCause(sQLWarning0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLClientInfoException: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) sQLWarning0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      
      String string0 = cSVFormat0.toString();
      assertNotNull(string0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u001D');
      assertNotNull(cSVFormat1);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\u001D', (char)cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\u001D', (char)cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertEquals("\u001D Delimiter=<\t> Escape=<> RecordSeparator=<\n\u001D > SkipHeaderRecord:false\n", charArrayWriter0.toString());
      assertEquals(71, charArrayWriter0.size());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\u001D', (char)cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String string0 = cSVFormat0.toString();
      assertNotNull(string0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('o');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('o', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('o', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      assertEquals("o Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\no > SkipHeaderRecord:false\r\n", charArrayWriter0.toString());
      assertEquals(77, charArrayWriter0.size());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('o', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "CS$ars4a hs been @lused";
      objectArray0[1] = (Object) "CS$ars4a hs been @lused";
      objectArray0[4] = (Object) "CS$ars4a hs been @lused";
      objectArray0[6] = (Object) "CS$ars4a hs been @lused";
      objectArray0[7] = (Object) cSVFormat0;
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charArray0.length);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ad41,}?XV");
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Ad41,}?XV");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("Ad41,}?XV", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("Ad41,}?XV", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[5];
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("Ad41,}?XV", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals("Ad41,}?XV", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('t', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) "Ad41,}?XV";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(213, charArrayWriter0.size());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("Ad41,}?XV", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[1] = (Object) "Ad41,}?XV";
      objectArray1[2] = (Object) "Ad41,}?XV";
      cSVPrinter0.printRecords(objectArray1);
      assertEquals(282, charArrayWriter0.size());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("Ad41,}?XV", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals(3, objectArray1.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('8');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('8', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(24, charBuffer0.limit());
      assertEquals(24, charBuffer0.length());
      assertEquals(24, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(24, charBuffer0.remaining());
      assertEquals("Unexpected Quote value: ", charBuffer0.toString());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('8', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(24, charBuffer0.limit());
      assertEquals(24, charBuffer0.length());
      assertEquals(24, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(24, charBuffer0.remaining());
      assertEquals("Unexpected Quote value: ", charBuffer0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String string0 = "R";
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("R");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('9', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("E", charBuffer0.toString());
      assertEquals(1, charArray0.length);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('9', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("E", charBuffer0.toString());
      assertEquals(1, charArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("M?%>7q/\"X\"~/cDxp|");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getEscape());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isEscaping());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("", cSVFormat3.getNullString());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.print(cSVFormat0);
      assertEquals(45, charArrayWriter0.size());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      cSVPrinter0.flush();
      assertEquals(45, charArrayWriter0.size());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      cSVPrinter0.print(short0);
      assertEquals(72, charArrayWriter0.size());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CSVParserhas een closed");
      assertNotNull(mockPrintWriter0);
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('Z', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("zFEBX");
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('Z', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals("zFEBX", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('Z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('Z', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('Z', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals("zFEBX", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('Z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      cSVPrinter1.print(double0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('Z', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals("zFEBX", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals('Z', (char)cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "CSVParserhas een closed";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('Z', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('Z', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CSVParser has been closed");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9\")Z/");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("9\")Z/", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(Quote.MINIMAL, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("9\")Z/", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("9\")Z/", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ng#lSj\"^t #eh h!Y");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0\"]zG8WTdwp8Qr^ABP");
      assertNotNull(cSVFormat1);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("0\"]zG8WTdwp8Qr^ABP", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("0\"]zG8WTdwp8Qr^ABP", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("0\"]zG8WTdwp8Qr^ABP", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      assertNotNull(cSVFormat0);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String string1 = "mVl";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      assertNotNull(cSVPrinter1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      LinkedHashSet<MockFileOutputStream> linkedHashSet0 = new LinkedHashSet<MockFileOutputStream>(44, 44);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7ID?YQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" [");
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(" [", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(" [", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(" [", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(6, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NON_NUMERIC, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7ID?YQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?5");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("?5", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("?5", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("?5", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7ID?YQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_E");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("_E", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("_E", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("_E", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?YQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[11];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('W');
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('W', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('W', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.print(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('W', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      cSVPrinter0.printComment("' m.t nv be ul!");
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('W', (char)cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertSame(cSVFormat1, cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertSame(cSVFormat1, cSVFormat0);
      
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?YQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[11];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")H9o]^5|7Iz?YQ");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(14, charBuffer0.capacity());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer0.length());
      assertEquals(14, charBuffer0.limit());
      assertEquals(")H9o]^5|7Iz?YQ", charBuffer0.toString());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(14, charBuffer0.capacity());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer0.length());
      assertEquals(14, charBuffer0.limit());
      assertEquals(")H9o]^5|7Iz?YQ", charBuffer0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(579);
      assertNotNull(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(579, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(579, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(579, charBuffer0.capacity());
      assertEquals(579, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 579, 579);
      assertNotNull(charBuffer1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(579, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(579, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(579, charBuffer0.capacity());
      assertEquals(579, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer1.toString());
      assertEquals(579, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(579, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(579, charBuffer1.limit());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('}', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      String[] stringArray0 = new String[1];
      CharBuffer charBuffer2 = charBuffer0.put('}');
      assertNotNull(charBuffer2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(578, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(578, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(579, charBuffer0.capacity());
      assertEquals(579, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(579, charBuffer2.limit());
      assertEquals(579, charBuffer2.capacity());
      assertEquals(578, charBuffer2.remaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(578, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals(1, charBuffer2.position());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer0);
      
      stringArray0[0] = "-+>Q=U";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('}', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('}', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('}');
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('}', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('}', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('}', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      assertNotNull(cSVPrinter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(578, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(578, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(579, charBuffer0.capacity());
      assertEquals(579, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(579, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(579, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(579, charBuffer1.limit());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('}', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('}', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('}', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals(1, stringArray0.length);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer2));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('(');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('(', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(2708);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charArray0.length);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7IDz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4Q:W");
      assertNotNull(cSVFormat1);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(19, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Appendable appendable0 = cSVPrinter0.getOut();
      assertNotNull(appendable0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertSame(mockPrintWriter0, appendable0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertSame(appendable0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7IDz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4Q:W");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("4Q:W", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(19, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?YQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[11];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' m.t nv be ul!");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("' m.t nv be ul!", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("|Q,J*pfK:qhh");
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("' m.t nv be ul!", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("|Q,J*pfK:qhh", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("' m.t nv be ul!", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("|Q,J*pfK:qhh", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("' m.t nv be ul!", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("|Q,J*pfK:qhh", cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(11, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('p');
      assertNotNull(cSVFormat2);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals('p', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      File file0 = MockFile.createTempFile("r.~UJ,=5\"7ASdGD!cB", "r.~UJ,=5\"7ASdGD!cB");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals("r.~UJ,=5\"7ASdGD!cB0r.~UJ,=5\"7ASdGD!cB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/tmp/r.~UJ,=5\"7ASdGD!cB0r.~UJ,=5\"7ASdGD!cB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals('p', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(file0.isHidden());
      assertEquals("r.~UJ,=5\"7ASdGD!cB0r.~UJ,=5\"7ASdGD!cB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/tmp/r.~UJ,=5\"7ASdGD!cB0r.~UJ,=5\"7ASdGD!cB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.close();
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isEscaping());
      assertEquals('p', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(file0.isHidden());
      assertEquals("r.~UJ,=5\"7ASdGD!cB0r.~UJ,=5\"7ASdGD!cB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/tmp/r.~UJ,=5\"7ASdGD!cB0r.~UJ,=5\"7ASdGD!cB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3bxpT,xoHr#R%kI");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)49;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-123), (byte)49}, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertNotNull(cSVParser0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      cSVPrinter0.println();
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      cSVPrinter0.print(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      cSVPrinter0.print(pipedReader0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte) (-123);
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) (byte) (-123);
      objectArray0[4] = (Object) (byte) (-44);
      objectArray0[5] = (Object) pipedWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(6, objectArray0.length);
      
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(6, objectArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      StringWriter stringWriter0 = new StringWriter(1136);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("", stringWriter0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter1.printRecords(objectArray0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals(6, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      cSVPrinter1.printRecord(objectArray0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals(6, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7IDz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf(")H9o]^5|7IDz?FYQ", objectArray0);
      assertNotNull(printWriter0);
      assertEquals(1, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('j');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("j", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuotePolicy());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('3', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("j", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat5);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.isNullHandling());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) cSVFormat5;
      objectArray1[1] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(2, objectArray1.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(objectArray1, objectArray0);
      
      CSVPrinter cSVPrinter1 = cSVFormat4.print(mockPrintWriter0);
      assertNotNull(cSVPrinter1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("j", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      cSVPrinter1.printRecord(objectArray1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("j", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("j", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getEscape());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(2, objectArray1.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(19);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('?', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(' ', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('?', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(' ', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.close();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('?', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(' ', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('?', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isEscaping());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat4);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals("", stringWriter0.toString());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('?', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isEscaping());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      assertNotNull(cSVPrinter2);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter2;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter2.printRecords(objectArray0);
      assertEquals(181, charArrayWriter0.size());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals(4, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(351, charArrayWriter0.size());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('?', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(' ', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(4, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVPrinter0, cSVPrinter2);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      
      cSVPrinter1.printComment("K+0#u");
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals("? K+0#u\r\n", stringWriter0.toString());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals('?', (char)cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.isEscaping());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      cSVPrinter2.printRecords(objectArray0);
      assertEquals(532, charArrayWriter0.size());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals(4, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      Character character0 = Character.valueOf('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('b');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals('b', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(")H9o]^5|7Iz?FYQ");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals('b', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('b', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals('b', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('b', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals('b', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('b', (char)cSVFormat2.getCommentStart());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      cSVPrinter0.print((Object) null);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals('b', (char)cSVFormat1.getCommentStart());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('b', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('.', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter(788);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('?');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('?', (char)cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('.', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertEquals('.', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('U', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('U', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('.', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertEquals('U', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      StringWriter stringWriter0 = new StringWriter('.');
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CharBuffer charBuffer0 = CharBuffer.allocate('.');
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(46, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(46, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(46, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(46, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('U', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('.', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertEquals('U', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(46, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(46, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(46, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(46, charBuffer0.remaining());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('U', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('.', (char)cSVFormat2.getQuoteChar());
      assertEquals('U', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('U', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('U', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('.', (char)cSVFormat3.getEscape());
      assertNull(cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      objectArray0[0] = (Object) ")H9o]^5|7Iz?FYQ";
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('U', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('.', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertEquals('U', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(12, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(34, charBuffer0.position());
      assertEquals(46, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(46, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(12, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringWriter0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      StringWriter stringWriter0 = new StringWriter(2714);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      MockFile mockFile0 = new MockFile("2bT'};QlsH{<NRB0", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('o', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, mockThrowable0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, mockThrowable0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      assertNotNull(map1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(map0, map1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(map1, map0);
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("##$;~0&3(=&a}7k~V", map0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: ##$;~0&3(=&a}7k~V", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("##$;~0&3(=&a}7k~V", sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException2.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('o', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      cSVPrinter1.print(sQLDataException0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringWriter0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      
      cSVPrinter2.printRecords((Iterable<?>) sQLClientInfoException2);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: ##$;~0&3(=&a}7k~V", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("##$;~0&3(=&a}7k~V", sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException2.getSQLState());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertSame(map0, map1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "2bT'};QlsH{<NRB0";
      objectArray0[1] = (Object) hashMap0;
      objectArray0[2] = (Object) hashMap0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) stringWriter0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('o', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(8, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertNotSame(cSVPrinter0, cSVPrinter2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      StringWriter stringWriter0 = new StringWriter(1136);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\"\"\r\n", stringWriter0.toString());
      assertEquals(1, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1136;
      intArray0[1] = 1136;
      intArray0[2] = 1136;
      intArray0[3] = 1136;
      intArray0[4] = 10;
      intArray0[5] = 1136;
      intArray0[6] = 1136;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(",D", ",D", intArray0, sQLFeatureNotSupportedException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1136, 1136, 1136, 1136, 10, 1136, 1136}, intArray0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ,D", batchUpdateException0.toString());
      assertEquals(",D", batchUpdateException0.getMessage());
      assertEquals(",D", batchUpdateException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(7, intArray0.length);
      
      SQLDataException sQLDataException0 = new SQLDataException("", "", 1136, batchUpdateException0);
      assertNotNull(sQLDataException0);
      assertArrayEquals(new int[] {1136, 1136, 1136, 1136, 10, 1136, 1136}, intArray0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ,D", batchUpdateException0.toString());
      assertEquals(",D", batchUpdateException0.getMessage());
      assertEquals(",D", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(1136, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(7, intArray0.length);
      
      cSVPrinter0.print(sQLDataException0);
      assertArrayEquals(new int[] {1136, 1136, 1136, 1136, 10, 1136, 1136}, intArray0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ,D", batchUpdateException0.toString());
      assertEquals(",D", batchUpdateException0.getMessage());
      assertEquals(",D", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(1136, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(7, intArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'N';
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) 'N');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('E', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('E', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      cSVPrinter0.close();
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('E', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('E', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('E', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('N', (char)cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getNullString());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      cSVPrinter0.printComment("pZn");
      assertEquals("N pZn\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('N', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('E', (char)cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('N', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertEquals("N pZn\r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('g');
      assertNotNull(cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("g", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('=');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat3);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CSVPrinter cSVPrinter1 = cSVFormat1.print(printStream0);
      assertNotNull(cSVPrinter1);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Unexpected Quote value: ");
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("Unexpected Quote value: ", cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isNullHandling());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(printStream0, cSVFormat4);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("Unexpected Quote value: ", cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isNullHandling());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      
      cSVPrinter2.printRecord(objectArray0);
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("Unexpected Quote value: ", cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isNullHandling());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getEscape());
      assertEquals(2, objectArray0.length);
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('U');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(")H9o]^5|7Iz?FYQ");
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('U', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('U', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertEquals('U', (char)cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat4 = cSVFormat2.withNullString(")H9o]^5|7Iz?FYQ");
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('U', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('U', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isNullHandling());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      
      objectArray0[4] = (Object) cSVFormat3;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('U', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      
      cSVPrinter0.printRecords(objectArray0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('U', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(")H9o]^5|7Iz?FYQ", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isNullHandling());
      assertEquals('U', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      assertNotNull(cSVFormat0);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      assertNotNull(cSVFormat1);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat2);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      MockFile mockFile0 = new MockFile("2bT'};QlsH{<NRB0", "9NhOZ+By>$MmTE");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "NON_NUMERIC");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat3);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('1', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentStart());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('o', (char)cSVFormat3.getEscape());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      PrintStream printStream0 = mockPrintStream0.append('u');
      assertNotNull(printStream0);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canRead());
      assertEquals(1L, mockFile1.length());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteChar(';');
      assertNotNull(cSVFormat4);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('1', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(';', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('u', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat5);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat5.isQuoting());
      assertNull(cSVFormat5.getNullString());
      assertNull(cSVFormat5.getQuoteChar());
      assertNull(cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getEscape());
      assertEquals('1', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertNull(cSVFormat5.getCommentStart());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertNull(cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      assertNotNull(cSVPrinter0);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canRead());
      assertEquals(1L, mockFile1.length());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('1', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(';', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('u', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) printStream0;
      objectArray0[5] = (Object) "2bT'};QlsH{<NRB0";
      objectArray0[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(325L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals('1', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals(';', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('u', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      assertNotNull(cSVPrinter1);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(325L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertSame(mockPrintStream0, printStream0);
      
      cSVPrinter1.printRecord(objectArray0);
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertEquals(660L, mockFile1.length());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'Q';
      charArray0[2] = 'N';
      charArray0[3] = '\'';
      charArray0[4] = '&';
      charArray0[5] = 'P';
      charArray0[6] = '.';
      charArray0[7] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'E', 'Q', 'N', '\'', '&', 'P', '.', 'A'}, charArray0);
      assertEquals("EQN'&P.A", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charArray0.length);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertArrayEquals(new char[] {'E', 'Q', 'N', '\'', '&', 'P', '.', 'A'}, charArray0);
      assertEquals("EQN'&P.A", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(8, charArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '.';
      objectArray0[1] = (Object) 'E';
      objectArray0[2] = (Object) '\'';
      objectArray0[3] = (Object) 'Q';
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter0.flush();
      assertArrayEquals(new char[] {'E', 'Q', 'N', '\'', '&', 'P', '.', 'A'}, charArray0);
      assertEquals("EQN'&P.A", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(8, charArray0.length);
      
      objectArray0[5] = (Object) 'P';
      objectArray0[6] = (Object) 'E';
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(118);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(118, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(118, charBuffer0.capacity());
      assertEquals(118, charBuffer0.length());
      assertEquals(118, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      assertNotNull(cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("org.apache.commons.csv.CSVPrinter$1", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(118, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(118, charBuffer0.capacity());
      assertEquals(118, charBuffer0.length());
      assertEquals(118, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      cSVPrinter0.flush();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(118, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(118, charBuffer0.capacity());
      assertEquals(118, charBuffer0.length());
      assertEquals(118, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(118, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(118, charBuffer0.capacity());
      assertEquals(118, charBuffer0.length());
      assertEquals(118, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(118, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(37, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(37, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(118, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(81, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(2, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      
      Vector<BufferedReader> vector0 = new Vector<BufferedReader>(118);
      assertNotNull(vector0);
      assertEquals(118, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(118, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(37, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(37, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(118, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(81, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(118, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      MockFile mockFile0 = new MockFile("2bT'};QlsH{<NRB0", "9NhOZ+By>$MmTE");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "NON_NUMERIC");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getRecordSeparator());
      assertEquals('o', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertTrue(cSVFormat3.isEscaping());
      assertEquals('1', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      PrintStream printStream0 = mockPrintStream0.append('u');
      assertNotNull(printStream0);
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(1L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat4);
      assertNull(cSVFormat4.getEscape());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentStart());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(1L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      assertNotNull(cSVPrinter1);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertEquals(1L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = object4;
      objectArray0[3] = (Object) "NON_NUMERIC";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = object3;
      objectArray0[6] = (Object) printStream0;
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertEquals(285L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      assertNotNull(cSVPrinter1);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "mVl";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getEscape());
      assertEquals("", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      StringWriter stringWriter0 = new StringWriter(57);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('3');
      assertNotNull(cSVFormat2);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('U', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('3', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('U', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('3', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('U', (char)cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('3', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      
      StringWriter stringWriter1 = new StringWriter();
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter1.toString());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat3);
      assertNotNull(cSVPrinter1);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('U', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('3', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('U', (char)cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('3', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals("", stringWriter1.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) stringWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      cSVPrinter1.printRecord(objectArray0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('U', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('3', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('U', (char)cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('3', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(stringWriter1, stringWriter0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      assertNotNull(cSVFormat4);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isNullHandling());
      assertNull(cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertEquals('U', (char)cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getQuotePolicy());
      assertEquals('3', (char)cSVFormat4.getQuoteChar());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertEquals('U', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('3', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('U', (char)cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('3', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      assertNotNull(cSVPrinter2);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('U', (char)cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('3', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getEscape());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('U', (char)cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getNullString());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuotePolicy());
      assertEquals('3', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      assertNotNull(cSVFormat1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat2);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      MockFile mockFile0 = new MockFile("2bT'};QlsH{<NRB0", "9NhOZ+By>$MmTE");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "NON_NUMERIC");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      PrintStream printStream0 = mockPrintStream0.append('u');
      assertNotNull(printStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertEquals(1L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat3);
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscaping());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(mockFile0.isHidden());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertEquals(1L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      assertNotNull(cSVPrinter1);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(mockFile0.isHidden());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertEquals(1L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = object4;
      objectArray0[3] = (Object) "NON_NUMERIC";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = object3;
      objectArray0[6] = (Object) printStream0;
      cSVPrinter0.printRecord(objectArray0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('1', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('u', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertEquals('1', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getNullString());
      assertEquals('u', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('1', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(mockFile0.isHidden());
      assertEquals("9NhOZ+By>$MmTE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/2bT'};QlsH{<NRB0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/2bT'};QlsH{<NRB0/9NhOZ+By>$MmTE/NON_NUMERIC", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertEquals(283L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("NON_NUMERIC", mockFile1.getName());
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")H9o]^5|7Iz?FYQ");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(")H9o]^5|7Iz?FYQ", objectArray0);
      assertNotNull(printWriter0);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('?', (char)cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('`');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('4');
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      String string0 = cSVFormat0.toString();
      assertNotNull(string0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat5);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      cSVPrinter0.print(cSVFormat3);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("`", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('4', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals("`", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isNullHandling());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\"', (char)cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getNullString());
      assertEquals('4', (char)cSVFormat4.getEscape());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals("`", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getCommentStart());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals(Quote.NONE, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals("`", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getCommentStart());
      assertEquals('4', (char)cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isEscaping());
      assertFalse(cSVFormat5.isNullHandling());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.isQuoting());
      assertEquals(0, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      StringWriter stringWriter0 = new StringWriter(2726);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('a');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('a', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      assertNotNull(stringWriter1);
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      stringWriter1.flush();
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("null", stringWriter0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(stringWriter0, stringWriter1);
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("null", stringWriter0.toString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(stringWriter0, stringWriter1);
      
      StringWriter stringWriter2 = new StringWriter(2726);
      assertNotNull(stringWriter2);
      assertEquals("", stringWriter2.toString());
      assertFalse(stringWriter2.equals((Object)stringWriter1));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("mVl");
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("mVl", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter2, cSVFormat2);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", stringWriter2.toString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("mVl", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(stringWriter2.equals((Object)stringWriter1));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "mVl";
      stringArray0[1] = "mVl";
      stringArray0[2] = "mVl";
      stringArray0[3] = "mVl";
      stringArray0[4] = "mVl";
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat3);
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertSame(cSVFormat3, cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringWriter0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("null", stringWriter0.toString());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('a', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(stringWriter0.equals((Object)stringWriter2));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringWriter0, stringWriter2);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`Z6@&*\"", "");
      assertNotNull(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLRecoverableException0.toString());
      assertEquals("`Z6@&*\"", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLRecoverableException0.toString());
      assertEquals("`Z6@&*\"", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLRecoverableException0.toString());
      assertEquals("`Z6@&*\"", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(stringWriter0.equals((Object)stringWriter2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringWriter0, stringWriter2);
      assertNotSame(cSVPrinter0, cSVPrinter2);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      
      cSVPrinter1.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLRecoverableException0.toString());
      assertEquals("`Z6@&*\"", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("mVl", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(stringWriter2.equals((Object)stringWriter1));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(stringWriter2, stringWriter1);
      assertNotSame(stringWriter2, stringWriter0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      cSVPrinter1.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLRecoverableException0.toString());
      assertEquals("`Z6@&*\"", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLRecoverableException: `Z6@&*\"", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("mVl", cSVFormat2.getRecordSeparator());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(stringWriter2.equals((Object)stringWriter1));
      assertFalse(stringWriter2.equals((Object)stringWriter0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(stringWriter2, stringWriter1);
      assertNotSame(stringWriter2, stringWriter0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      StringWriter stringWriter0 = new StringWriter(2695);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('a');
      assertNotNull(cSVFormat1);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('a', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      assertNotNull(cSVFormat2);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isQuoting());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NON_NUMERIC";
      stringArray0[1] = "9NhOZ+By>$MmTE";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", stringWriter0.toString());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('a', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('a', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(2, stringArray0.length);
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      cSVFormat1.withSkipHeaderRecord(true);
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("2bT'};QlsH{<NRB0", "9NhOZ+By>$MmTE");
      MockFile mockFile1 = new MockFile(mockFile0, "NON_NUMERIC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) printStream0;
      mockPrintStream0.println(3629);
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "NON_NUMERIC";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "NON_NUMERIC";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('1');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      stringWriter0.append('+');
      Character character0 = new Character('\\');
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      int int0 = (-1503);
      charArrayWriter0.write((-1503));
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.validate();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(30).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      charArrayWriter0.write(int0);
      int int1 = (-690);
      charArrayWriter0.write(int1);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.print(object0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(226, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(767);
      CharBuffer charBuffer0 = CharBuffer.allocate(1136);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append('+');
      Character character0 = new Character('\\');
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '\\';
      charArray0[4] = '+';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('E');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "9NhOZ+By>$MmTE";
      stringArray0[2] = "NON_NUMERIC";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "NON_NUMERIC";
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      stringWriter0.append('+');
      Character character0 = new Character('\\');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      HashSet<BufferedWriter> hashSet0 = new LinkedHashSet<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      assertEquals("+\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      StringWriter stringWriter1 = stringWriter0.append('+');
      Character character0 = new Character('+');
      cSVFormat0.withCommentStart(character0);
      Character character1 = new Character('\\');
      cSVFormat0.withQuoteChar(character1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      stringWriter2.flush();
      Character character2 = new Character('+');
      cSVFormat0.withQuoteChar(character2);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Stack<ObjectInputStream> stack0 = new Stack<ObjectInputStream>();
      stack0.removeAll(arrayDeque0);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>(treeSet0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuoteChar((Character) null);
      StringWriter stringWriter0 = new StringWriter(2695);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('a');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.close();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter2 = new StringWriter(2695);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("lZJZO");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter2, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "lZJZO";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuoteChar((Character) null);
      StringWriter stringWriter0 = new StringWriter(2695);
      cSVFormat0.withEscape('a');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.close();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter2 = new StringWriter(2695);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("lZJZO");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter2, cSVFormat1);
      cSVPrinter1.printComment("");
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      Character character0 = new Character(']');
      cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter(90);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.printComment("V^S[g{unI*9Sx");
      cSVPrinter1.print("V^S[g{unI*9Sx");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) character0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = (Object) cSVPrinter1;
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'Q';
      charArray0[2] = 'N';
      charArray0[3] = '\'';
      charArray0[6] = '&';
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) 'N');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.close();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printComment("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException("NullString=<", "out", batchUpdateException0);
      cSVPrinter0.print(sQLDataException0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = object0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]^m;>eG\"");
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) 'E';
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) '\u0000';
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      StringWriter stringWriter1 = stringWriter0.append('+');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      stringWriter2.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter2);
      cSVPrinter0.close();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printComment("");
      cSVPrinter0.print(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter2;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) stringWriter2;
      objectArray0[5] = (Object) stringWriter2;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
      
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g@i<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "qF'~9?~iUk+E3~r]", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<CharArrayWriter> treeSet1 = new TreeSet<CharArrayWriter>((Collection<? extends CharArrayWriter>) treeSet0);
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>((SortedSet<? extends CharArrayWriter>) treeSet1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Locale.getISOCountries();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "qF'~9?~iUk+E3~r]";
      objectArray1[1] = (Object) mockFileOutputStream0;
      objectArray1[2] = (Object) "qF'~9?~iUk+E3~r]";
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) treeSet0;
      Object object1 = new Object();
      objectArray1[5] = object1;
      objectArray1[6] = object0;
      objectArray1[7] = (Object) locale0;
      cSVPrinter0.printRecords(objectArray1);
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      StringWriter stringWriter1 = stringWriter0.append('+');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      stringWriter1.append((CharSequence) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '+';
      charArray0[2] = '\\';
      charArray0[3] = '.';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      charArrayWriter0.write((-1503));
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.validate();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'A';
      charArray0[2] = '.';
      charArray0[3] = 'A';
      charArray0[4] = '\"';
      charArray0[5] = 'A';
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(85, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      charArrayWriter0.write((-1503));
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.validate();
      cSVPrinter0.printComment((String) null);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      charArrayWriter0.write((-1503));
      HashSet<BufferedWriter> hashSet0 = null;
      try {
        hashSet0 = new HashSet<BufferedWriter>((-690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -690
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'Q';
      charArray0[2] = 'N';
      charArray0[3] = '\'';
      charArray0[4] = '&';
      charArray0[5] = 'P';
      charArray0[6] = '.';
      charArray0[7] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '.';
      objectArray0[1] = (Object) 'E';
      objectArray0[2] = (Object) '\'';
      objectArray0[3] = (Object) 'Q';
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) 'P';
      objectArray0[6] = (Object) 'E';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2695);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("r{yL?{}yTB^_RB");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('a');
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "r{yL?{}yTB^_RB";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(2695);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('a')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('E');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "9NhOZ+By>$MmTE";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.print(stringArray0[2]);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      StringWriter stringWriter1 = stringWriter0.append('+');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      stringWriter2.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter2);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printComment("");
      cSVPrinter0.print(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter2;
      objectArray0[1] = (Object) stringWriter0;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('Q');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      int int0 = (-1503);
      charArrayWriter0.write((-1503));
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.validate();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('E');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "9NhOZ+By>$MmTE";
      stringArray0[2] = "NON_NUMERIC";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.print("NON_NUMERIC");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('B');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      cSVFormat1.withRecordSeparator('B');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(2695);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = ';';
      charArray0[4] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.flush();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      StringWriter stringWriter2 = new StringWriter(2695);
      cSVFormat0.withRecordSeparator("omou;GYv{2`'1V3=si");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter2, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = object0;
      cSVPrinter1.printRecord(objectArray1);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(1136);
      StringWriter stringWriter1 = stringWriter0.append('+');
      Character character0 = new Character('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      stringWriter2.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter2);
      cSVPrinter0.close();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.printComment("");
      cSVPrinter0.print(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter2;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter(90);
      cSVFormat0.withQuoteChar('#');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withDelimiter('`');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('1');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H!BDj}O=%4B3}BSgM&.", "5Z;~'");
      File file0 = MockFile.createTempFile("H!BDj}O=%4B3}BSgM&.", "_z", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(bufferedWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
