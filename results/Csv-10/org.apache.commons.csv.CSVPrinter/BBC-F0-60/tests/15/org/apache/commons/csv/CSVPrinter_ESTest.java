/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:11:24 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('y');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character1 = new Character('S');
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      String string0 = "";
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('M');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("\r\n");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y${@%:2");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      MockThrowable mockThrowable0 = new MockThrowable("<Q6>FK-1B`m", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(mockThrowable0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('#');
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 24);
      CSVParser cSVParser0 = cSVFormat0.parse(pushbackReader0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(370);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('K');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('S');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r0\n");
      cSVPrinter0.printComment("INVALID");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('N');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r\n");
      cSVFormat0.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Vector<Double> vector0 = new Vector<Double>(38, 12);
      cSVPrinter1.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('A');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) quote0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      cSVFormat4.withCommentStart(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 102, 102);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      objectArray0[8] = (Object) quote0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[16];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<StringWriter> treeSet0 = new TreeSet<StringWriter>();
      TreeSet<StringWriter> treeSet1 = new TreeSet<StringWriter>((SortedSet<StringWriter>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[4];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(370);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('K');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[12];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") invalid char between encapsulated token and delimiter");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0Yv&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[30];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".H#D({8Hq_zmpw");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9!xv|712V$&(6L/E^-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";i qTB&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("As0p|j;,4hLI-u", "As0p|j;,4hLI-u");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter1.close();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "As0p|j;,4hLI-u";
      objectArray0[3] = (Object) "";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) file0;
      objectArray0[7] = (Object) cSVFormat1;
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(".{#DK(Y8Hq_z8pw]");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".{#DK(Y8Hq_z8pw]");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) sQLTransactionRollbackException0;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{jQ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('H');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("vO9!F2pw#fAZ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "vO9!F2pw#fAZ";
      objectArray0[5] = (Object) "vO9!F2pw#fAZ";
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat1.withEscape('|');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('.');
      charArrayWriter0.append('.');
      cSVFormat2.withEscape('F');
      MockFileWriter mockFileWriter0 = new MockFileWriter("i:)[>HV$3]8Pi9", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      mockFileWriter0.close();
      PipedReader pipedReader0 = new PipedReader();
      File file0 = MockFile.createTempFile("i:)[>HV$3]8Pi9", "i:)[>HV$3]8Pi9");
      MockFileWriter mockFileWriter1 = new MockFileWriter(file0);
      try { 
        cSVPrinter0.print(mockFileWriter1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = object0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      sQLTransientException0.initCause(sQLTimeoutException0);
      objectArray0[4] = (Object) cSVPrinter1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) sQLTransientException0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("As0p|j;,4hLI-u", "As0p|j;,4hLI-u");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter1.close();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "As0p|j;,4hLI-u";
      objectArray0[3] = (Object) "";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) file0;
      objectArray0[7] = (Object) cSVFormat1;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3570);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 97, 3570);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('O');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>(linkedHashSet0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLocalizedMessage();
      linkedHashSet0.add(batchUpdateException0);
      arrayDeque0.add(batchUpdateException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat2.validate();
      CSVFormat cSVFormat3 = CSVFormat.newFormat('L');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[3] = (Object) charArrayWriter0;
      objectArray1[4] = object1;
      objectArray1[5] = (Object) cSVFormat3;
      objectArray1[6] = (Object) cSVFormat2;
      objectArray1[8] = object1;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat1.withEscape('|');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('.');
      charArrayWriter0.append('.');
      cSVFormat2.withEscape('F');
      String string0 = "i:)[>HV$3]8Pi9";
      MockFileWriter mockFileWriter0 = new MockFileWriter("i:)[>HV$3]8Pi9", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      mockFileWriter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('r');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('r');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuotePolicy(quote0);
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('j');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      cSVFormat6.withEscape('\\');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat5);
      cSVPrinter0.flush();
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      PipedReader pipedReader0 = new PipedReader();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Object[]) locale_CategoryArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('\u001A');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVFormat2.withEscape('U');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.flush();
      cSVPrinter0.println();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>('U');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer((-276));
      cSVPrinter1.print(integer0);
      cSVPrinter1.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("CSvEv:T");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter1.println();
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('.');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVFormat2.withEscape('f');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.flush();
      cSVPrinter0.println();
      cSVPrinter0.printComment("UnexpectedQuote valuZ: ");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      Short short0 = new Short((short)15);
      cSVPrinter1.print(short0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(370);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('K');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) charBuffer1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = CSVFormat.newFormat('a');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('a');
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.flush();
      cSVFormat2.withNullString("NON_NUMERIC");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'a';
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.flush();
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("CSvEv:T");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(48);
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('*');
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'Z';
      charArray0[2] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      String string0 = "s{k]5O6Gv.<G&fo";
      cSVPrinter0.printComment("s{k]5O6Gv.<G&fo");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      linkedList0.add((SQLTransientException) sQLTimeoutException0);
      int int0 = 42;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>(42, 42);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      mockPrintWriter0.println("n5");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('q');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.flush();
      cSVPrinter1.println();
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter2.printComment("lj>");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      linkedList0.add((SQLTransientException) sQLTimeoutException0);
      cSVPrinter2.printRecord((Iterable<?>) sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 80);
      cSVPrinter1.print("lj>");
      Byte.valueOf((byte)36);
      cSVPrinter1.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      mockPrintWriter0.println("Y/P[");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('7');
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('.');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) quote0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      TreeSet<MockFileWriter> treeSet1 = new TreeSet<MockFileWriter>((SortedSet<MockFileWriter>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      cSVFormat1.withQuoteChar(character0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("5Li qT*&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(31);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      mockPrintWriter0.println("out");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('n');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)21;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      cSVFormat1.withCommentStart('n');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) (byte)21;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      mockPrintWriter0.println("N^");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.flush();
      cSVPrinter1.println();
      cSVPrinter1.printComment("s{k]5O6Gv.<G&fo");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      linkedList0.add((SQLTransientException) sQLTimeoutException0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, 248);
      cSVPrinter1.print(sQLTransactionRollbackException0);
      Byte byte0 = Byte.valueOf((byte)36);
      cSVPrinter1.print(byte0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      EvoSuiteFile evoSuiteFile0 = null;
      Character character0 = new Character('C');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      cSVFormat0.withCommentStart(character0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.print('0');
      cSVFormat0.withNullString((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      int int0 = 31;
      Iterable<SQLTimeoutException> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      mockPrintWriter0.println("out");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      cSVFormat1.withEscape('T');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('V');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.flush();
      cSVPrinter0.print("N^");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat.newFormat('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.close();
      cSVFormat0.withQuoteChar('b');
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("The delimiter cannot be a line break");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      mockPrintWriter0.println("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[5] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter2.println();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[7];
      cSVFormat3.withSkipHeaderRecord(true);
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) priorityQueue1;
      objectArray1[4] = (Object) pipedOutputStream0;
      objectArray1[5] = (Object) pipedOutputStream0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(821).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false, false, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object object0 = null;
      cSVPrinter0.print(object0);
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)44;
      byteArray0[0] = byte0;
      byte byte1 = (byte)62;
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      byte byte3 = (byte)23;
      byteArray0[3] = byte3;
      byte byte4 = (byte)119;
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 2248;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, int0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      cSVPrinter0.print(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[7];
      cSVFormat3.withSkipHeaderRecord(true);
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) priorityQueue1;
      objectArray1[4] = (Object) pipedOutputStream0;
      objectArray1[5] = (Object) pipedOutputStream0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      mockPrintWriter0.println("N^");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      cSVFormat1.print(mockPrintWriter0);
      cSVFormat1.withEscape('T');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('T');
      cSVFormat2.withCommentStart('8');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      SQLDataException sQLDataException0 = new SQLDataException();
      cSVPrinter0.print(sQLDataException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVFormat0.withRecordSeparator('w');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("5Li qT*&");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(31);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      PriorityQueue<PipedOutputStream> priorityQueue2 = new PriorityQueue<PipedOutputStream>(priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[7];
      cSVFormat3.withSkipHeaderRecord(true);
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) priorityQueue1;
      objectArray1[3] = (Object) priorityQueue1;
      objectArray1[4] = (Object) pipedOutputStream0;
      objectArray1[5] = (Object) pipedOutputStream0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat.newFormat('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      mockPrintWriter0.print('0');
      cSVFormat0.withQuoteChar('b');
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("G0S.+bXC");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"* K6F0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('f')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("G0S.+bXC");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"* K6F0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(0);
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      PriorityQueue<BufferedWriter> priorityQueue2 = new PriorityQueue<BufferedWriter>(3);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "G0S.+bXC";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      Vector<PipedOutputStream> vector1 = new Vector<PipedOutputStream>();
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>(priorityQueue0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'J';
      charArray0[2] = '7';
      charArray0[3] = '?';
      charArray0[4] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.println();
      cSVPrinter1.getOut();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("hg3%;u,2rE#@WolIl", (String) null);
      SQLDataException sQLDataException0 = new SQLDataException("qE,W]4)r<l*WmUEG4N.", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLDataException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char char0 = '\\';
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\\');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      char char1 = 'Q';
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) charArrayWriter1;
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\\');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.println();
      cSVPrinter0.printComment("Unexpected Quote valuZ: ");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\\');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      cSVPrinter1.flush();
      Vector<PipedOutputStream> vector0 = new Vector<PipedOutputStream>();
      HashSet<PipedOutputStream> hashSet0 = new HashSet<PipedOutputStream>(vector0);
      try { 
        cSVPrinter1.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('f');
      cSVFormat0.validate();
      cSVFormat0.withNullString(" EmptyLines:ignored");
      CharBuffer charBuffer0 = CharBuffer.allocate(25);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("G0S.+bXC");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"* K6F0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printComment("G0S.+bXC");
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "G0S.+bXC";
      objectArray0[2] = (Object) "\"* K6F0";
      objectArray0[3] = (Object) "\"* K6F0";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("G0S.+bXC");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"* K6F0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[7];
      cSVFormat3.withSkipHeaderRecord(true);
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) priorityQueue1;
      objectArray1[3] = (Object) priorityQueue1;
      objectArray1[4] = (Object) pipedOutputStream0;
      objectArray1[5] = (Object) pipedOutputStream0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('6');
      String string0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat0.withQuoteChar('m');
      cSVFormat0.withDelimiter(' ');
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("G0S.+bXC");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"* K6F0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '4';
      charArray0[2] = ')';
      charArray0[3] = '9';
      charArray0[4] = 'h';
      charArray0[5] = '@';
      charArray0[6] = '+';
      charArray0[7] = '7';
      charArray0[8] = '}';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) '9');
      Character character0 = Character.valueOf('7');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(',');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.println("out");
      PrintWriter printWriter0 = mockPrintWriter0.printf("N^", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      cSVPrinter0.print("out");
      cSVPrinter0.printComment("ALL");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      mockPrintWriter0.print('0');
      cSVFormat0.withQuoteChar('b');
      cSVPrinter0.printComment("hBn5o/0hqL&Q+Gpq");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.validate();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      priorityQueue0.add(pipedOutputStream0);
      PriorityQueue<PipedOutputStream> priorityQueue1 = new PriorityQueue<PipedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) priorityQueue1;
      objectArray1[3] = (Object) priorityQueue1;
      objectArray1[4] = (Object) pipedOutputStream0;
      objectArray1[5] = (Object) pipedOutputStream0;
      objectArray1[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"* K6F0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("G0S.+bXC");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\"* K6F0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printComment("G0S.+bXC");
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "G0S.+bXC";
      objectArray0[2] = (Object) "\"* K6F0";
      objectArray0[3] = (Object) "\"* K6F0";
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'J';
      charArray0[2] = '7';
      charArray0[3] = '?';
      charArray0[4] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
