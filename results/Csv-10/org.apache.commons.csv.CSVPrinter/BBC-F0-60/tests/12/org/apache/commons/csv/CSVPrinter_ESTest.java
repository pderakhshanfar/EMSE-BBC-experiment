/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:07:04 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('M');
      StringWriter stringWriter0 = new StringWriter();
      PipedReader pipedReader0 = new PipedReader(11);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) cSVParser0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVParser0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("XL<$O3M-I!U;");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "The comment start and the escape character cannot be the same ('";
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B@)G^L.H3vcUs?*4");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)G^L.H3vcUs?*4");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The comment start and the escape character cannot be the same ('");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVFormat1.withQuoteChar('A');
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('[');
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "\r";
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 8);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      LineNumberReader lineNumberReader1 = new LineNumberReader(pushbackReader0);
      CSVParser cSVParser0 = cSVFormat1.parse(lineNumberReader1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream("XLv$z-3!1;");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("XLv$z-3!1;");
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('~');
      StringWriter stringWriter0 = new StringWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withQuoteChar('~');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("\r");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = null;
      String string0 = "}QSt>\\@FP*";
      MockFile mockFile0 = new MockFile((File) null, "}QSt>@FP*");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.print("}QSt>@FP*");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFileWriter0;
      char[] charArray0 = new char[2];
      cSVPrinter0.printComment("uKMq");
      charArray0[0] = 'S';
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2*U", (String) null, 6, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLTransactionRollbackException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLDataException0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('w');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVFormat1.toString();
      cSVPrinter0.println();
      cSVFormat0.withQuoteChar('w');
      cSVFormat1.withRecordSeparator('w');
      cSVPrinter0.printComment("\r");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "\r";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('w');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVFormat0.withCommentStart('w');
      cSVPrinter0.printComment("\rb\n");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('w');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVFormat0.withCommentStart('l');
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "The comment start and the escape character cannot be the same ('";
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("B@)^L.H3vcUs?*4z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)^L.H3vcUs?*4z");
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3145);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile(",3v51", "out");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter1.println();
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      PriorityQueue<ObjectInputStream> priorityQueue0 = new PriorityQueue<ObjectInputStream>((SortedSet<? extends ObjectInputStream>) treeSet0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      try { 
        cSVPrinter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream(") EOF reached before encapsulated token finished");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".F\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(".F\n", ".F\n");
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(4979);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream(") EOF reached before encapsulated token finished");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(") EOF reached before encapsulated token finished");
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'c';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
      Character character0 = new Character('&');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      Character character1 = Character.valueOf('B');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      String string0 = "ZSw]bKzZp)&qsfB";
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("ZSw]bKzZp)&qsfB");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      Float float0 = new Float((-1.0F));
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("The quoteChar cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("0c~bFrIs^gz2[};");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0c~bFrIs^gz2[};");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print("The quoteChar cannot be a line break");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      ClassLoader.getSystemClassLoader();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "=9FbsYugt");
      SQLDataException sQLDataException0 = new SQLDataException("", sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLNonTransientConnectionException0);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      objectArray0[2] = (Object) sQLDataException0;
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecord(objectArray0);
      Integer integer0 = new Integer(110);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]F(_7]jhE3#");
      MockPrintStream mockPrintStream0 = new MockPrintStream("a,OlTFK:4|e1=\"Q");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      PriorityQueue<BufferedReader> priorityQueue0 = new PriorityQueue<BufferedReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?$RjW(");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9@t)h$:}O~:HgE`");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BH)^L.H3vcUs?`~*4z");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[/A1)xWUw38s");
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~)$vATF");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("~)$vATF");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(2194);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedOutputStream0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      StringWriter stringWriter0 = new StringWriter(5);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('$');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('_');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('$');
      cSVFormat2.withQuoteChar('Y');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat3.print(charArrayWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVFormat3.print(charArrayWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("9MMVWH?BL");
      cSVPrinter0.print(sQLTransientException0);
      cSVPrinter0.printComment("9MMVWH?BL");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("BH)^L.H3vcUs?`~*4z");
      cSVFormat1.withQuoteChar('S');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BH)^L.H3vcUs?`~*4z");
      MockPrintStream mockPrintStream0 = new MockPrintStream("BH)^L.H3vcUs?`~*4z");
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      charBuffer0.get();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      ArrayDeque<Console> arrayDeque0 = new ArrayDeque<Console>();
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$CNgJ/i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":v6S");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('$');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('$');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('$');
      cSVFormat1.withQuoteChar('s');
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVFormat2.print(stringWriter0);
      cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      ArrayDeque<Console> arrayDeque0 = new ArrayDeque<Console>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("rz+7@@^#D@L~{50", "m2");
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9@t)h$:}O~:HgE`");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9@t)h$:}O~:HgE`");
      cSVFormat1.validate();
      cSVFormat0.withRecordSeparator('G');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9@t)h$:}O~:HgE`");
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart((Character) '4');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.flush();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      stack0.add(pipedOutputStream0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('$');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('_');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('$');
      cSVFormat2.withQuoteChar('Y');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat3.print(charArrayWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVFormat3.print(charArrayWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("9MMVWH?BL");
      cSVPrinter0.print(sQLTransientException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter1.printComment("9MMVWH?BL");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) '(');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('(');
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockFile mockFile0 = new MockFile("ndYzX(c=M#Os#hSb:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat3.print(charArrayWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "i.ZPk$QS");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[0] = (Object) classLoader0;
      ClassLoader.getSystemClassLoader();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVFormat0.withQuoteChar('_');
      StringWriter stringWriter0 = new StringWriter();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('Z');
      MockFile mockFile0 = new MockFile("", "zD3Gm3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) quote0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) cSVPrinter1;
      objectArray0[8] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('v');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Integer integer0 = new Integer(0);
      cSVPrinter0.print(integer0);
      cSVPrinter0.printComment("@9qN)0&&o=27H@nVy");
      Class<Byte> class0 = Byte.class;
      ServiceLoader.loadInstalled(class0);
      cSVFormat1.print(stringWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-S~(*MK5gup}", intArray0, sQLSyntaxErrorException0);
      cSVPrinter0.print(batchUpdateException0);
      cSVPrinter0.printComment(">&:$0eQ0B-[F8Xj");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "or.apachcommons.csv.CVPrinter";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      LinkedList<Console> linkedList0 = new LinkedList<Console>();
      TreeSet<Console> treeSet0 = new TreeSet<Console>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.close();
      ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      PipedReader pipedReader0 = new PipedReader(3);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      cSVPrinter0.print(bufferedReader0);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('p');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter1);
      cSVPrinter1.printComment("!P'{s/ yx");
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "or.apachcommons.csv.CVPrinter";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      cSVFormat2.withQuoteChar('}');
      StringWriter stringWriter2 = new StringWriter();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Stack<PipedOutputStream> stack1 = new Stack<PipedOutputStream>();
      stack1.add(pipedOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter2);
      cSVPrinter0.print("");
      cSVPrinter1.printRecords((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B@)^L.H3vcUs?*4z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)^L.H3vcUs?*4z");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The comment start and the escape character cannot be the same ('");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVFormat1.withQuoteChar('A');
      StringWriter stringWriter0 = new StringWriter();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "or.apachcommons.csv.CVPrinter");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "or.apachcommons.csv.CVPrinter";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('7');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat1.withQuoteChar('Z');
      StringWriter stringWriter0 = new StringWriter();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(stringWriter0);
      cSVPrinter1.printRecords((Iterable<?>) stack0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.withQuoteChar('C');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      cSVPrinter0.println();
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      PriorityQueue<ObjectInputStream> priorityQueue0 = new PriorityQueue<ObjectInputStream>((SortedSet<? extends ObjectInputStream>) treeSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "The comment start and the escape character cannot be the same ('";
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("B@)^L.H3vcUs?*4z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)^L.H3vcUs?*4z");
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3145);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      stack0.add(pipedOutputStream0);
      MockFile mockFile0 = new MockFile(",3v51", "out");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter1.println();
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      PriorityQueue<ObjectInputStream> priorityQueue0 = new PriorityQueue<ObjectInputStream>((SortedSet<? extends ObjectInputStream>) treeSet0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      cSVPrinter1.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) classLoader0;
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charArrayWriter2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuoteChar('~');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      charArrayWriter1.reset();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('(');
      CharArrayWriter charArrayWriter3 = charArrayWriter2.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      charArrayWriter1.write("");
      cSVPrinter0.getOut();
      charArrayWriter3.write(charArray0);
      cSVPrinter0.printComment("ah&<z#R^?=YD>g>x");
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("TOKEN", "YX`ms]+qq_qFec?XY", 568);
      cSVFormat0.print(charArrayWriter1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) '(');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter1);
      cSVPrinter0.print(cSVFormat0);
      Class<Byte> class0 = Byte.class;
      cSVPrinter0.printComment("s0yLNxa");
      ServiceLoader<Byte> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVFormat2.validate();
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.close();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s0yLNxa", "wp?", (-3698));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) charArrayWriter1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) sQLTimeoutException0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) '(';
      objectArray0[8] = (Object) '(';
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[6] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("tdvq7'vo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.close();
      cSVPrinter0.print(mockFile0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[1] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('(');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withQuoteChar('v');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter2 = new StringWriter();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(stringWriter0);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      cSVPrinter1.printRecord((Iterable<?>) stack0);
      cSVPrinter2.println();
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      PriorityQueue<ObjectInputStream> priorityQueue0 = new PriorityQueue<ObjectInputStream>((SortedSet<? extends ObjectInputStream>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter1.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[4] = (Object) stringWriter1;
      Object object0 = new Object();
      cSVPrinter2.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) '(');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter1);
      cSVPrinter0.print(cSVFormat0);
      Class<Byte> class0 = Byte.class;
      cSVPrinter0.printComment("s0yLNxa");
      ServiceLoader<Byte> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVFormat2.validate();
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.close();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s0yLNxa", "wp?", (-3698));
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) serviceLoader0;
      objectArray0[1] = (Object) '(';
      objectArray0[2] = (Object) serviceLoader0;
      objectArray0[3] = (Object) serviceLoader0;
      objectArray0[4] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) charArrayWriter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('/');
      charArrayWriter1.reset();
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '(';
      charArray0[2] = '<';
      CharBuffer charBuffer0 = CharBuffer.allocate('/');
      charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer1 = CharBuffer.allocate(31);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVPrinter0.flush();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) serviceLoader0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('_');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat0);
      cSVPrinter0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArrayWriter0.write("YX`ms]+qq_qFec?XY");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) classLoader0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.close();
      cSVPrinter1.printComment("YX`ms]+qq_qFec?XY");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "The comment start and the escape character cannot be the same ('";
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B@)^L.H3vcUs?*4z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)^L.H3vcUs?*4z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) "The comment start and the escape character cannot be the same ('");
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVFormat0.withQuoteChar('v');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter2 = new StringWriter();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter1);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      cSVPrinter1.println();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B@)^L.H3vcUs?*4z");
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)^L.H3vcUs?*4z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("Delimiter=<");
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      Character character0 = new Character('v');
      cSVFormat0.withQuoteChar(character0);
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      cSVPrinter0.print("");
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("d?0mNvQ\"nJeWx2v%1");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "d?0mNvQ\"nJeWx2v%1";
      objectArray0[2] = (Object) "C8DW@5*9|v7q@$-4";
      objectArray0[3] = (Object) "C8DW@5*9|v7q@$-4";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      PrintStream printStream0 = mockPrintStream0.format("C8DW@5*9|v7q@$-4", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.close();
      mockPrintStream0.append((CharSequence) "C8DW@5*9|v7q@$-4");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = (-8436);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      Class<Byte> class0 = Byte.class;
      String string0 = "s0yLNxa";
      cSVPrinter0.printComment("s0yLNxa");
      ServiceLoader<Byte> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVFormat0.validate();
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader(charArrayReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('_');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat0);
      cSVPrinter0.flush();
      charArrayWriter0.write("YX`ms]+qq_qFec?XY");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.getOut();
      charArrayWriter2.write(charArray0);
      cSVPrinter0.printComment("ah&<z#R^?=YD>g>x");
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "hH$R:}K3C=wIR&O%", 32);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.print("hH$R:}K3C=wIR&O%");
      assertEquals(53, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withQuoteChar('v');
      StringWriter stringWriter1 = new StringWriter();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stack0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("d?0mNvQ\"nJeWx2v%1");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "d?0mNvQ\"nJeWx2v%1";
      objectArray0[2] = (Object) "C8DW@5*9|v7q@7-4";
      objectArray0[3] = (Object) "C8DW@5*9|v7q@7-4";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      mockPrintStream0.format("C8DW@5*9|v7q@7-4", objectArray0);
      Locale locale0 = Locale.FRENCH;
      MockFile mockFile0 = new MockFile("C8DW@5*9|v7q@7-4", "d?0mNvQ\"nJeWx2v%1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      StringReader stringReader0 = new StringReader("out");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      cSVPrinter0.print(stringReader0);
      cSVPrinter0.printComment("C8DW@5*9|v7q@7-4");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("d?0mNvQ\"nJeWx2v%1");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "d?0mNvQ\"nJeWx2v%1";
      objectArray0[2] = (Object) "C8DW@5*9|v7q@$-4";
      objectArray0[3] = (Object) "C8DW@5*9|v7q@$-4";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      PrintStream printStream0 = mockPrintStream0.format("C8DW@5*9|v7q@$-4", objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('Z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.close();
      mockPrintStream0.append((CharSequence) "C8DW@5*9|v7q@$-4");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B@)^L.H3vcUs?*4z");
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B@)^L.H3vcUs?*4z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("Delimiter=<");
      cSVPrinter0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      Long long0 = new Long(0);
      cSVPrinter0.print(long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      StringWriter stringWriter0 = new StringWriter(118);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      stringWriter0.append('&');
      cSVFormat0.print(pipedWriter0);
      cSVFormat0.withQuoteChar('W');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter1 = new StringWriter();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.print(stringWriter1);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stack0.add(pipedOutputStream0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "or&.apache0commons.Asv.CSVPrinter");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "or&.apache0commons.Asv.CSVPrinter";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[6] = (Object) "or&.apache0commons.Asv.CSVPrinter";
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 'Z';
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('C');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('C');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      charArrayWriter1.writeTo(charArrayWriter0);
      char[] charArray0 = new char[0];
      charArrayWriter1.write(charArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"~JqETpZmymF)", "", 5330);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVPrinter0.print(pipedReader0);
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: \"~JqETpZmymF)", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('C');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('C');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      assertEquals("\r\n\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("i +A/");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "i +A/";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withCommentStart(character0);
      cSVFormat1.withRecordSeparator('J');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      Quote quote0 = Quote.ALL;
      cSVFormat1.withQuotePolicy(quote0);
      cSVPrinter0.printComment("");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      cSVFormat0.withNullString("");
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('(');
      char[] charArray0 = new char[4];
      charArrayWriter0.reset();
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('_');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat0);
      cSVPrinter0.flush();
      charArrayWriter1.write("YX`ms]+qq_qFec?XY");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.getOut();
      char[] charArray1 = new char[4];
      charArray1[0] = '%';
      charArray1[1] = '(';
      charArray1[2] = '}';
      charArray1[3] = '(';
      charArrayWriter0.write(charArray1);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("YX`ms]+qq_qFec?XY", (String) null, 0);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      assertEquals(82, charArrayWriter2.size());
      assertEquals(82, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "yAf%=7!WY1HH+";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("yAf%=7!WY1HH+");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "yAf%=7!WY1HH+");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start and the escape character cannot be the same ('");
      Locale locale0 = new Locale("The comment start and the escape character cannot be the same ('", "The comment start and the escape character cannot be the same ('", "org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "The comment start and the escape character cannot be the same ('";
      objectArray0[6] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.print(quote0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>();
      TreeSet<PushbackInputStream> treeSet0 = new TreeSet<PushbackInputStream>();
      priorityQueue0.containsAll(treeSet0);
      PriorityQueue<CharArrayWriter> priorityQueue1 = new PriorityQueue<CharArrayWriter>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVFormat0.withQuoteChar('v');
      StringWriter stringWriter2 = new StringWriter();
      Stack<PipedOutputStream> stack0 = new Stack<PipedOutputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      stack0.add(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      stack0.add(pipedOutputStream1);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character(']');
      cSVFormat0.withCommentStart(character0);
      Character character1 = new Character(']');
      cSVFormat0.withQuoteChar(character1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      String string0 = "format";
      cSVFormat0.withRecordSeparator("format");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('v');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Character character0 = new Character('v');
      cSVFormat0.withQuoteChar(character0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      cSVPrinter0.print(charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
