/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:14:16 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.LinkedHashSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9;");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals("9;", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<");
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals("9;", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals("9;", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0;^C7SUz5#t2*7");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0;^C7SUz5#t2*7", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0;^C7SUz5#t2*7");
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0;^C7SUz5#t2*7", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0;^C7SUz5#t2*7", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      Character character0 = new Character('e');
      assertNotNull(character0);
      assertEquals('e', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('e', (char)cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('e', (char)cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Uy:", "Uy:", 0, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: Uy:", sQLTransientConnectionException0.toString());
      assertEquals("Uy:", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Uy:", sQLTransientConnectionException0.getSQLState());
      
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('e', (char)cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertEquals("java.sql.SQLTransientConnectionException: Uy:", sQLTransientConnectionException0.toString());
      assertEquals("Uy:", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Uy:", sQLTransientConnectionException0.getSQLState());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("b,v&", "b,v&");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/b,v&0b,v&", file0.toString());
      assertEquals("b,v&0b,v&", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "b,v&";
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/b,v&0b,v&", file0.toString());
      assertEquals("b,v&0b,v&", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(27L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/b,v&0b,v&", file0.toString());
      assertEquals("b,v&0b,v&", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ke%5U");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("ke%5U", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("ke%5U", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      PipedReader pipedReader0 = new PipedReader(303);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      cSVPrinter0.close();
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "(line ", 1, 1);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      
      String[] stringArray0 = new String[2];
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fil`");
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      
      SQLException sQLException0 = new SQLException("", "Uy:", (-2806), (Throwable) null);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("Uy:", sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals((-2806), sQLException0.getErrorCode());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Fk]==qE+");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("Fk]==qE+", charBuffer0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.limit());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("Fk]==qE+", charBuffer0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(0, pipedInputStream0.available());
      
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      assertNotNull(cSVParser0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ke%5U");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("ke%5U", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("ke%5U", charBuffer0.toString());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Unexpected Quote value: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Unexpected Quote value: ", mockFile0.toString());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.close();
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      CSVPrinter cSVPrinter1 = cSVFormat0.print(outputStreamWriter0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fil`");
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      SQLDataException sQLDataException0 = new SQLDataException("fil`");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("fil`", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("fil`", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLDataException1);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("fil`", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("fil`", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException1.toString());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(31);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      
      PipedReader pipedReader0 = new PipedReader(946);
      assertNotNull(pipedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      assertNotNull(pushbackReader0);
      
      CSVParser cSVParser0 = cSVFormat0.parse(pushbackReader0);
      assertNotNull(cSVParser0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertFalse(cSVParser0.isClosed());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(110, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(110, charBuffer0.length());
      assertEquals(110, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(110, charBuffer0.capacity());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(charBuffer0.hasArray());
      assertEquals(110, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(110, charBuffer0.length());
      assertEquals(110, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(110, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fil`");
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertNotNull(charBuffer0);
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('U', (char)cSVFormat1.getCommentStart());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('K', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('K', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Unexpected Quote value: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Unexpected Quote value: ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('R');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('R', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      MockFile mockFile0 = new MockFile("_.Y{LHD^#-");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('R', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("_.Y{LHD^#-", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("_.Y{LHD^#-", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals('R', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("_.Y{LHD^#-", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("_.Y{LHD^#-", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      try { 
        cSVPrinter0.printComment("_.Y{LHD^#-");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      assertNotNull(bufferedReader0);
      
      try { 
        cSVPrinter0.print(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 1248);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(line ");
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('@');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('@', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('@');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('@', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('@', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertEquals('@', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('@')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fil`");
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      SQLDataException sQLDataException0 = new SQLDataException("fil`");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException0.toString());
      assertEquals("fil`", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException0.toString());
      assertEquals("fil`", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.toString());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: fil`", sQLDataException0.toString());
      assertEquals("fil`", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException: fil`", sQLNonTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(31);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      MockFile mockFile0 = new MockFile(".:4sc2!XO&8!_8\"#", ".:4sc2!XO&8!_8\"#");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(".:4sc2!XO&8!_8\"#", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/.:4sc2!XO&8!_8\"#/.:4sc2!XO&8!_8\"#", mockFile0.toString());
      assertEquals("/experiment/.:4sc2!XO&8!_8\"#", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      cSVPrinter0.println();
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(".:4sc2!XO&8!_8\"#", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/.:4sc2!XO&8!_8\"#/.:4sc2!XO&8!_8\"#", mockFile0.toString());
      assertEquals("/experiment/.:4sc2!XO&8!_8\"#", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(2L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = MockFile.createTempFile("b,v&", "The quoteChar character and the delimiter cannot be the same ('");
      assertNotNull(file0);
      assertEquals("/tmp/b,v&0The quoteChar character and the delimiter cannot be the same ('", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("b,v&0The quoteChar character and the delimiter cannot be the same ('", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("/tmp/b,v&0The quoteChar character and the delimiter cannot be the same ('", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("b,v&0The quoteChar character and the delimiter cannot be the same ('", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      cSVPrinter0.println();
      assertEquals("/tmp/b,v&0The quoteChar character and the delimiter cannot be the same ('", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("b,v&0The quoteChar character and the delimiter cannot be the same ('", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('{', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1231).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(1234L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("d");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      ArrayDeque<ByteArrayInputStream> arrayDeque0 = new ArrayDeque<ByteArrayInputStream>((-457));
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      arrayDeque0.offer(byteArrayInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      assertEquals(41, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printComment("(");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print("\u2029");
      cSVPrinter0.printComment("");
      assertEquals(31L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile(".:4sc2!XO&8!_8\"#", ".:4sc2!XO&8!_8\"#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printComment("org.apache.commons.csv.Quote");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('\u008B');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "NoImoreC{V r%cors vail;ble");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("NoImoreC{V r%cors vail;ble");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(252L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fil`");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      SQLDataException sQLDataException0 = new SQLDataException("fil`");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
      assertEquals("fil`", sQLDataException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(line ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVPrinter0.print(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".:4sc2!XO&8!_8\"#");
      MockFile mockFile0 = new MockFile(".:4sc2!XO&8!_8\"#", ".:4sc2!XO&8!_8\"#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals(20L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_L:XO=0g\"*q");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      assertEquals("\"_L:XO=0g\"\"*q\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<");
      Object[] objectArray0 = new Object[20];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"");
      Character character0 = new Character(';');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(20, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(line ");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(line ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Float float0 = new Float(0.0);
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(line ");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("(line ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Double double0 = new Double(0.0);
      cSVPrinter0.print(double0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      cSVPrinter0.print(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "h*+TaF;@wjJ`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AU");
      MockPrintStream mockPrintStream0 = new MockPrintStream("AU");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException();
      CharBuffer charBuffer0 = CharBuffer.allocate(20);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      StringWriter stringWriter1 = (StringWriter)cSVPrinter0.getOut();
      assertEquals("", stringWriter1.toString());
  }
}
