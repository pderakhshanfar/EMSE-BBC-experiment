/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:09:42 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("e\n");
      MockFileWriter mockFileWriter0 = new MockFileWriter("e\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = new Character('#');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('#');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter(":\n");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment(":\n");
      cSVPrinter0.printComment(":\n");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[6\n");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("[6\n");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r$");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r$");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat3.withRecordSeparator("");
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("8<bsm", "8<bsm");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "8<bsm", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat0.withSkipHeaderRecord(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      char[] charArray0 = new char[6];
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLWarning0);
      charArray0[0] = '+';
      char char0 = 'R';
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(sQLDataException0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVFormat0.withNullString("");
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[6] = (Object) sQLNonTransientConnectionException0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException1);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[0];
      cSVPrinter0.printRecords(objectArray1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.withCommentStart('f');
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)35;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Character character0 = new Character('f');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("1#&&H{LD-QESJ&");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLDataException0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVFormat0.withNullString("");
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) sQLNonTransientConnectionException0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9L00");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1#1{e+LDMMQESJ&");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("charset");
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "charset");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      Appendable appendable0 = cSVPrinter1.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) appendable0;
      objectArray0[6] = (Object) appendable0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      Character character1 = new Character(';');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character1);
      cSVFormat3.withEscape('I');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('Y');
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 17, 17);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=}f&YlXSo5y6P");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("ALL");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      mockFileWriter0.close();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("readeOFr");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("? YO$Fy~5[:N~z6Qmm");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      cSVFormat1.withCommentStart('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Sja)oX( )(1q~");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sja)oX( )(1q~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Sja)oX( )(1q~");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1#1{e&+LDMQESJm&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('E');
      Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      CSVParser cSVParser0 = cSVFormat2.parse(inputStreamReader0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      cSVPrinter0.printComment("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) charsetDecoder0;
      objectArray0[5] = (Object) cSVParser0;
      objectArray0[6] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat0.withNullString("1#1{e&+LDMQESJm&");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1#1{e&+LDMQESJm&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("p,|l[AQT&D~BR+Z5Ea");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" inva;idparefsequGnce");
      Character.valueOf('X');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("p,|l[AQT&D~BR+Z5Ea");
      cSVPrinter0.print("p,|l[AQT&D~BR+Z5Ea");
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = 'R';
      charArray0[3] = 's';
      charArray0[4] = '4';
      charArray0[5] = '=';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[6];
      cSVFormat1.withSkipHeaderRecord(false);
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "1#1{e&+LDMQESJm&";
      cSVFormat1.format(objectArray0);
      cSVFormat1.withNullString("1#1{e&+LDMQESJm&");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",org.apache.commons.csv.CSVFormat@0000000001,java.lang.String@0000000004,,java.lang.String@0000000005,", 9, 9);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLDataException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "1#1{e&+LDMQESJm&";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("1#1{e&+LDMQESJm&");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-71);
      Character character0 = Character.valueOf('\\');
      cSVFormat1.withEscape(character0);
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "1#1{e&+LDMQESJm&";
      objectArray0[5] = (Object) "1#1{e&+LDMQESJm&";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("1#1{e&+LDMQESJm&");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Character character1 = Character.valueOf('8');
      cSVFormat1.withEscape(character1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print("1#1{e&+LDMQESJm&");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-71);
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "1#1{e&+LDMQESJm&";
      objectArray0[5] = (Object) "1#1{e&+LDMQESJm&";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("1#1{e&+LDMQESJm&");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Character character0 = Character.valueOf('8');
      cSVFormat1.withEscape(character0);
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withEscape('D');
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpeced Quote vale: ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Unexpeced Quote vale: ");
      Character.valueOf('\u001A');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.print((Object) null);
      cSVFormat4.validate();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Byte byte0 = new Byte((byte) (-7));
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('J');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('J');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("CQ");
      cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      MockFileWriter mockFileWriter0 = new MockFileWriter("CQ");
      mockFileWriter0.append('J');
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("? YO$Fy~55[:N~zQmm");
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      cSVPrinter0.printComment("kj");
      cSVPrinter0.print("kj");
      cSVFormat1.validate();
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withEscape('s');
      cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Byte byte0 = new Byte((byte)48);
      cSVPrinter0.print(byte0);
      cSVFormat0.validate();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withNullString("kj");
      Character character0 = Character.valueOf('(');
      Character character1 = new Character('(');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString((String) null);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withNullString("uL^*/");
      Character character2 = new Character('S');
      cSVFormat4.withCommentStart(character2);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat5);
      cSVPrinter0.printComment("?ccqD| ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('c');
      cSVFormat2.validate();
      Character.valueOf('$');
      Quote quote0 = Quote.NONE;
      cSVFormat1.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      PipedReader pipedReader0 = new PipedReader(55);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVFormat2.withEscape('C');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('c');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('1');
      cSVFormat4.print(stringWriter0);
      stringWriter0.close();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('x');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printComment("bLM[vg|,C@@vj");
      Character character1 = new Character('B');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printComment("bLM[vg|,C@@vj");
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Byte byte0 = new Byte((byte) (-88));
      cSVPrinter2.print(byte0);
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('1');
      cSVFormat1.withCommentStart('1');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.withNullString("?`sel<9YN");
      Character character1 = new Character('f');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart(character1);
      CharBuffer charBuffer0 = CharBuffer.allocate(40);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("[!}<RMV|'");
      cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.validate();
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter();
      Character character1 = new Character('J');
      cSVFormat2.withEscape(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("x{nP4}\u0001ajQwUWO");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      cSVPrinter0.print(charArrayWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = '8';
      charArray0[6] = '8';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      CSVPrinter cSVPrinter2 = cSVFormat2.print(stringWriter0);
      cSVPrinter2.printComment("x{nP4}\u0001ajQwUWO");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) '8';
      objectArray0[2] = (Object) 'J';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'J';
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.validate();
      Character.valueOf('$');
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat3.withDelimiter('s');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter1;
      cSVPrinter0.printRecords(objectArray0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      cSVPrinter1.printRecord((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      int int0 = 49;
      CharBuffer.allocate(49);
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("[!}<RMV|'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) stringWriter1;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printComment("The quoteChar cannot be a line break");
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = objectArray0[1];
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.print(charBuffer0);
      PriorityQueue<MockFileInputStream> priorityQueue1 = new PriorityQueue<MockFileInputStream>(priorityQueue0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('y');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('8');
      StringWriter stringWriter0 = new StringWriter(9);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "kj";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("kj");
      Character character0 = Character.valueOf('(');
      cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('(');
      cSVFormat2.withDelimiter('[');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(outputStreamWriter0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(outputStreamWriter0);
      try { 
        cSVPrinter1.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      CharBuffer charBuffer1 = CharBuffer.allocate(1201);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('T');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.validate();
      Character character0 = Character.valueOf('J');
      Character character1 = Character.valueOf('q');
      cSVFormat0.withQuoteChar(character1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      stringWriter1.append('E');
      CharBuffer.allocate(287);
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "format", 37, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("format", "format", 35, sQLRecoverableException0);
      cSVPrinter0.print(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parefsequGnce");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      cSVPrinter0.printComment("kj");
      cSVPrinter0.print("kj");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u001D');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("bLM[vg|,C@@vj");
      Character.valueOf('(');
      Character character0 = new Character('s');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withNullString("format");
      cSVFormat1.withNullString((String) null);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1201);
      CharBuffer.allocate(1201);
      StringWriter stringWriter1 = new StringWriter(1201);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      mockPrintWriter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)105;
      byteArray0[4] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character.valueOf('x');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter1.close();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parefsequGnce");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      cSVPrinter0.printComment("kj");
      cSVPrinter0.print("kj");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[0] = (Object) null;
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      pipedWriter0.close();
      mockPrintStream0.print((Object) pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printComment("bLM[vg|,C@@vj");
      cSVPrinter0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "bLM[vg|,C@@vj";
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      CharBuffer charBuffer1 = CharBuffer.allocate(1201);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('T');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.validate();
      Character character0 = Character.valueOf('J');
      Character character1 = Character.valueOf('q');
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteChar(character1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      stringWriter1.append('E');
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat3.format(objectArray0);
      cSVFormat3.withRecordSeparator("6?'R]A=wgBV&3:Yc");
      StringWriter stringWriter2 = new StringWriter();
      cSVFormat0.withDelimiter('8');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      cSVPrinter0.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6?'R]A=wgBV&3:Yc");
      SQLWarning sQLWarning0 = new SQLWarning("charset");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "out", 1201, sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      cSVPrinter0.print("charset");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "GMUM'?8~X{i\"N";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("4a]N+yDD7=k", true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVPrinter0.getOut();
      Stack<MockFileWriter> stack0 = new Stack<MockFileWriter>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>(stack0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('-');
      cSVFormat4.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(pipedWriter0);
      cSVPrinter1.println();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      CSVPrinter cSVPrinter2 = new CSVPrinter(pipedWriter0, cSVFormat3);
      try { 
        cSVPrinter2.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parse sequence");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      cSVPrinter0.printComment("kj");
      cSVPrinter0.print("kj");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) ") invalid parse sequence";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(">1DO?(dk");
      Character character0 = Character.valueOf('D');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      cSVFormat3.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(75);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("DD_.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      priorityQueue0.add(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      PriorityQueue<MockFileInputStream> priorityQueue1 = new PriorityQueue<MockFileInputStream>(35);
      PriorityQueue<MockFileInputStream> priorityQueue2 = new PriorityQueue<MockFileInputStream>(priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("3(L");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      priorityQueue0.add(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) "e)4L^";
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*F-_J3 Cs*@p\f.");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVFormat2.withQuoteChar('.');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "bLM[vg|,C@@vj";
      cSVPrinter0.println();
      objectArray0[5] = (Object) "x+k.5]R'%!FE87Zy;";
      objectArray0[6] = objectArray0[5];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(cSVFormat2);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      CharBuffer charBuffer1 = CharBuffer.allocate(1201);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1201).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) stringWriter0;
      stringWriter0.append('j');
      objectArray0[6] = (Object) resultSet0;
      objectArray0[7] = (Object) stringWriter1;
      objectArray0[8] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(stringWriter1);
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("3(L");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      priorityQueue0.add(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("j");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      cSVFormat3.parse(pipedReader0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.apache.commons.csv.CSVPrinter$1", "' in ", 4319, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 435);
      try { 
        cSVPrinter0.print(pushbackReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat2.validate();
      Character.valueOf('Z');
      Character character1 = new Character('B');
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteChar(character1);
      cSVFormat4.withQuoteChar(character1);
      cSVFormat4.withRecordSeparator("out");
      StringWriter stringWriter1 = new StringWriter();
      cSVFormat3.withDelimiter('B');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      cSVPrinter0.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6?'R]A=wgBV&3:Yc");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "out";
      cSVFormat1.withHeader(stringArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6?'R]A=wgBV&3:Yc", (String) null, sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "out", 35, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>(linkedList0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("3(L");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      priorityQueue0.add(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) "e)4L^";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) priorityQueue0;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("3(L");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      priorityQueue0.add(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1723);
      CSVFormat.newFormat('E');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVFormat0.withNullString("\"!D)^@)(qbx)ODz");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(">1DO?(dk");
      Character character0 = Character.valueOf('D');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      cSVFormat3.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("DD_.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) priorityQueue0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(mockFile0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1201);
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      StringWriter stringWriter1 = new StringWriter(1201);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      ArrayList<BufferedReader> arrayList0 = new ArrayList<BufferedReader>(1201);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) sQLNonTransientConnectionException0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (-294));
      cSVPrinter0.print(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(104);
      CharBuffer charBuffer1 = CharBuffer.allocate(1201);
      StringWriter stringWriter0 = new StringWriter(104);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      mockPrintWriter0.flush();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.print(charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "kqq5Lc@Iktk~j";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kqq5Lc@Iktk~j");
      PrintWriter printWriter0 = mockPrintWriter0.printf("kqq5Lc@Iktk~j", (Object[]) null);
      char char0 = '\\';
      cSVFormat0.withCommentStart('\\');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      cSVPrinter0.flush();
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("3(L");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      priorityQueue0.add(mockFileWriter0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('@');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      cSVFormat0.parse(mockFileReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>();
      PriorityQueue<MockFileInputStream> priorityQueue1 = new PriorityQueue<MockFileInputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1524);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "B` ";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("B` ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("B` ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qGM", "qGM");
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter$1", "org.apache.commons.csv.CSVPrinter$1", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('y');
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withEscape('y');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('y');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter2, cSVFormat0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      pipedWriter0.close();
      mockPrintStream0.print((Object) pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*F-_J3 Cs*@p\f.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withNullString("x+k.5]R'%!FE87Zy;");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.printComment("d^BW)(}_x2");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.validate();
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withRecordSeparator("6?'R]A=wgBV&3:Yc");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('-');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.println();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6?'R]A=wgBV&3:Yc");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\u0085", "out", 35, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      cSVPrinter0.print(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print(charBuffer0);
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The comment start character cannot be a line break";
      stringArray0[1] = "KxCDo^d";
      stringArray0[2] = "0$^?";
      stringArray0[3] = "f87~^.[tb\"KV@";
      stringArray0[4] = "";
      stringArray0[5] = "GMUM'?8~X{i\"N";
      stringArray0[7] = "uzW>FnG'u;R?rd9{4U";
      stringArray0[8] = "T";
      cSVFormat0.withHeader(stringArray0);
      cSVFormat0.format(stringArray0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("0$^?", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "5b");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5b
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>();
      PriorityQueue<MockFileInputStream> priorityQueue1 = new PriorityQueue<MockFileInputStream>(priorityQueue0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'J';
      objectArray0[1] = (Object) 'J';
      objectArray0[2] = (Object) priorityQueue0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quote0;
      charBuffer0.append('J');
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat0.withRecordSeparator('J');
      objectArray0[6] = (Object) 'J';
      objectArray0[7] = (Object) priorityQueue0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('4');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('l');
      cSVFormat0.validate();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat2.format(objectArray0);
      cSVFormat0.withRecordSeparator('D');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer1);
      cSVPrinter0.close();
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(827);
      StringWriter stringWriter1 = stringWriter0.append('7');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = new Character('B');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("6?'R]A=wgBV&3:Yc");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withNullString(") invalid parse sequence");
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withNullString((String) null);
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      cSVPrinter0.printComment("kj");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) charset0;
      objectArray0[4] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kj");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      mockFileOutputStream0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withNullString("kj");
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withNullString("kj");
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat3);
      cSVPrinter0.printComment("kj");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "kj";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) charset0;
      objectArray0[4] = (Object) "kj";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.print("kj");
      cSVPrinter0.printComment("$RXu&q0EbR:lg1q#");
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      pipedWriter0.close();
      mockPrintStream0.print((Object) pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String string0 = "*F-_J3 Cs*@p\\f.";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("*F-_J3 Cs*@p\f.");
      String string1 = "x+k.5]R'%!FE87Zy;";
      cSVFormat2.withNullString("x+k.5]R'%!FE87Zy;");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      String string2 = "d^BW)(}_x2";
      cSVPrinter0.printComment("d^BW)(}_x2");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "bLM[vg|,C@@vj";
      MockPrintStream mockPrintStream0 = new MockPrintStream("bLM[vg|,C@@vj");
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      pipedWriter0.close();
      mockPrintStream0.print((Object) pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      ResultSet resultSet0 = null;
      try { 
        cSVPrinter0.printComment("*F-_J3 Cs*@p\f.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1201);
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      String string0 = "T";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uzW>FnG'u;R?rd9{4U";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('3');
      cSVFormat1.format(stringArray0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>();
      PriorityQueue<MockFileInputStream> priorityQueue1 = new PriorityQueue<MockFileInputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1524);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "B` ";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("B` ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("B` ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "B` ";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVFormat0.validate();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("B` ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = 1524;
      StringWriter stringWriter0 = new StringWriter(1524);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("B` ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("B` ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "B` ";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVFormat0.validate();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("B` ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("e)4L^");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(92);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      PriorityQueue<OutputStreamWriter> priorityQueue0 = new PriorityQueue<OutputStreamWriter>();
      MockFile mockFile0 = new MockFile("3(L");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      priorityQueue0.add(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) "e)4L^";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) priorityQueue0;
      objectArray0[4] = (Object) "3(L";
      cSVFormat0.format(objectArray0);
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[0];
      try { 
        cSVPrinter0.printRecord(objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ig_X5!!wrmaW4Ra0xpm");
      Locale locale0 = new Locale("KbLz=g", "i*6");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "i*6";
      objectArray0[1] = (Object) "ig_X5!!wrmaW4Ra0xpm";
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "ig_X5!!wrmaW4Ra0xpm", objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qGM", "qGM");
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter$1", "org.apache.commons.csv.CSVPrinter$1", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('y');
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('/');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) mockFile1;
      cSVPrinter0.printRecord(objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter$1", "charset");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      ResultSet resultSet0 = null;
      cSVPrinter0.printComment("charset");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('K');
      Character character0 = new Character('K');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('K');
      Character character1 = Character.valueOf('L');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('K')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
