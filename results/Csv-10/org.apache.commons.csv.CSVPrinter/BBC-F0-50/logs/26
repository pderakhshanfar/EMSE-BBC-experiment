* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 5674
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 201021765
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 20:41:14.162 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 20:41:14.163 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 20:41:14.163 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 20:41:14.163 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 20:41:14.963 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 20:41:15.729 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 20:50:07.119 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 602s and 1166 generations, 690481 statements, best individual has fitness: 108.0
* Minimizing test suite
[MASTER] 20:52:18.860 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 159
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 128
* Number of covered goals: 119
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 486
* Number of covered goals: 440
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 128
* Number of covered goals: 113
* Generated 97 tests with total length 1736
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:53:07.722 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7834166666666667% of time used, but only 28/97 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
[MASTER] 20:53:29.416 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:53:35.518 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_136_tmp__ESTest.test0(CSVPrinter_136_tmp__ESTest.java:374)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 20:53:35.523 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Character character0 = Character.valueOf('');
assertEquals('', (char)character0);
assertNotNull(character0);

StringWriter stringWriter0 = new StringWriter(704);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

StringWriter stringWriter1 = stringWriter0.append('z');
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertEquals("z", stringWriter0.toString());
assertEquals("z", stringWriter1.toString());
assertNotNull(stringWriter1);

Quote quote0 = Quote.NONE;
CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('j');
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals('j', (char)cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);

String[] stringArray0 = new String[3];
stringArray0[0] = "?tg A|yQ";
stringArray0[1] = "oqi#2";
stringArray0[2] = "!^(4";
CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertNotNull(cSVFormat2);

CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat3.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals(',', cSVFormat3.getDelimiter());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isEscaping());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertNotNull(cSVFormat3);

Quote quote1 = Quote.NON_NUMERIC;
CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote1);
assertNotSame(quote0, quote1);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(quote1, quote0);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat3.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals(',', cSVFormat3.getDelimiter());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isEscaping());
assertNull(cSVFormat3.getCommentStart());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals(',', cSVFormat4.getDelimiter());
assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
assertNull(cSVFormat4.getCommentStart());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isCommentingEnabled());
assertFalse(cSVFormat4.isNullHandling());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isEscaping());
assertTrue(cSVFormat4.isQuoting());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertFalse(quote0.equals((Object)quote1));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(quote1.equals((Object)quote0));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertNotNull(cSVFormat4);

CSVFormat cSVFormat5 = cSVFormat2.withQuotePolicy(quote0);
assertNotSame(quote0, quote1);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat5);
assertNotSame(cSVFormat5, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat4);
assertNotSame(cSVFormat5, cSVFormat2);
assertNotSame(cSVFormat5, cSVFormat0);
assertNotSame(cSVFormat5, cSVFormat3);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(Quote.NONE, cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertEquals('\"', (char)cSVFormat5.getQuoteChar());
assertTrue(cSVFormat5.isQuoting());
assertEquals(Quote.NONE, cSVFormat5.getQuotePolicy());
assertFalse(cSVFormat5.isNullHandling());
assertFalse(cSVFormat5.isCommentingEnabled());
assertFalse(cSVFormat5.getSkipHeaderRecord());
assertEquals(',', cSVFormat5.getDelimiter());
assertTrue(cSVFormat5.getIgnoreEmptyLines());
assertNull(cSVFormat5.getCommentStart());
assertEquals("\r\n", cSVFormat5.getRecordSeparator());
assertNull(cSVFormat5.getEscape());
assertFalse(cSVFormat5.isEscaping());
assertNull(cSVFormat5.getNullString());
assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
assertFalse(quote0.equals((Object)quote1));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat4));
assertTrue(cSVFormat5.equals((Object)cSVFormat2));
assertFalse(cSVFormat5.equals((Object)cSVFormat0));
assertFalse(cSVFormat5.equals((Object)cSVFormat3));
assertNotNull(cSVFormat5);

StringWriter stringWriter2 = new StringWriter(37);
assertEquals("", stringWriter2.toString());
assertFalse(stringWriter2.equals((Object)stringWriter1));
assertFalse(stringWriter2.equals((Object)stringWriter0));
assertNotNull(stringWriter2);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat2);
assertFalse(fileDescriptor0.valid());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertNotNull(cSVPrinter0);

cSVPrinter0.close();

[MASTER] 20:53:47.916 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_183_tmp__ESTest.test0(CSVPrinter_183_tmp__ESTest.java:238)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 20:53:47.921 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertNotNull(cSVFormat0);

Character character0 = new Character('K');
assertEquals('K', (char)character0);
assertNotNull(character0);

CSVFormat cSVFormat1 = CSVFormat.RFC4180;
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.isEscaping());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuotePolicy());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);

CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('$');
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getNullString());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals('$', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertNotNull(cSVFormat2);

CSVFormat cSVFormat3 = cSVFormat2.withEscape('K');
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getNullString());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals('$', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isCommentingEnabled());
assertEquals('K', (char)cSVFormat3.getEscape());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
assertNull(cSVFormat3.getQuotePolicy());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertNull(cSVFormat3.getCommentStart());
assertNull(cSVFormat3.getNullString());
assertTrue(cSVFormat3.isQuoting());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertFalse(cSVFormat3.isNullHandling());
assertFalse(cSVFormat3.isCommentingEnabled());
assertEquals('$', cSVFormat3.getDelimiter());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertNotNull(cSVFormat3);

CSVFormat cSVFormat4 = cSVFormat2.withQuoteChar((Character) null);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getNullString());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals('$', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat4.isCommentingEnabled());
assertFalse(cSVFormat4.isNullHandling());
assertEquals('$', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertNull(cSVFormat4.getQuotePolicy());
assertFalse(cSVFormat4.isEscaping());
assertNull(cSVFormat4.getCommentStart());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getQuoteChar());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertNotNull(cSVFormat4);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertNotNull(cSVPrinter0);

CSVPrinter cSVPrinter1 = cSVFormat4.print(mockFileWriter0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVPrinter1, cSVPrinter0);
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getNullString());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals('$', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat4.isCommentingEnabled());
assertFalse(cSVFormat4.isNullHandling());
assertEquals('$', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertNull(cSVFormat4.getQuotePolicy());
assertFalse(cSVFormat4.isEscaping());
assertNull(cSVFormat4.getCommentStart());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getQuoteChar());
assertNull(cSVFormat4.getNullString());
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
assertNotNull(cSVPrinter1);

SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fszk^LN|0t");
assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
assertEquals("fszk^LN|0t", sQLInvalidAuthorizationSpecException0.getMessage());
assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fszk^LN|0t", sQLInvalidAuthorizationSpecException0.toString());
assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
assertNotNull(sQLInvalidAuthorizationSpecException0);

SQLWarning sQLWarning0 = new SQLWarning("", "6d]~CncU_ly9ft?q\u0002", 24, sQLInvalidAuthorizationSpecException0);
assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
assertEquals("fszk^LN|0t", sQLInvalidAuthorizationSpecException0.getMessage());
assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fszk^LN|0t", sQLInvalidAuthorizationSpecException0.toString());
assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
assertEquals("", sQLWarning0.getMessage());
assertEquals("6d]~CncU_ly9ft?q\u0002", sQLWarning0.getSQLState());
assertEquals(24, sQLWarning0.getErrorCode());
assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
assertNotNull(sQLWarning0);

SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
assertEquals("fszk^LN|0t", sQLInvalidAuthorizationSpecException0.getMessage());
assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fszk^LN|0t", sQLInvalidAuthorizationSpecException0.toString());
assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
assertEquals("", sQLWarning0.getMessage());
assertEquals("6d]~CncU_ly9ft?q\u0002", sQLWarning0.getSQLState());
assertEquals(24, sQLWarning0.getErrorCode());
assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: ", sQLTransactionRollbackException0.toString());
assertEquals("java.sql.SQLWarning: ", sQLTransactionRollbackException0.getMessage());
assertNull(sQLTransactionRollbackException0.getSQLState());
assertNotNull(sQLTransactionRollbackException0);

SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
assertEquals("fszk^LN|0t", sQLInvalidAuthorizationSpecException0.getMessage());
assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fszk^LN|0t", sQLInvalidAuthorizationSpecException0.toString());
assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
assertEquals("", sQLWarning0.getMessage());
assertEquals("6d]~CncU_ly9ft?q\u0002", sQLWarning0.getSQLState());
assertEquals(24, sQLWarning0.getErrorCode());
assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: ", sQLTransactionRollbackException0.toString());
assertEquals("java.sql.SQLWarning: ", sQLTransactionRollbackException0.getMessage());
assertNull(sQLTransactionRollbackException0.getSQLState());
assertNull(sQLNonTransientConnectionException0.getSQLState());
assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: ", sQLNonTransientConnectionException0.toString());
assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLWarning: ", sQLNonTransientConnectionException0.getMessage());
assertNotNull(sQLNonTransientConnectionException0);

cSVPrinter0.print(sQLNonTransientConnectionException0);

[MASTER] 20:53:52.893 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_192_tmp__ESTest.test0(CSVPrinter_192_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 20:53:52.893 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
assertNotNull(mockPrintWriter0);

CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertNotNull(cSVFormat0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
assertFalse(fileDescriptor0.valid());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertNotNull(cSVPrinter0);

cSVPrinter0.flush();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-50/tests/26
* Done!

* Computation finished
