/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:50:20 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.withNullString("bMLF}C9TNXd%cXwg:m'");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("lK3[tG,+", "d&%|lhB%p`", 65);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("lK3[tG,+", "&", hashMap0, sQLIntegrityConstraintViolationException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("@X20@/", "@X20@/", 262, map0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('A');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("n'Qt &Jo| lT5: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuoteChar('9');
      cSVFormat0.withNullString((String) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Character character0 = new Character('=');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('=');
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Delimiter=<");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("p\"jAVX");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#!", "#!", sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.print(sQLRecoverableException0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("i.>4G{4");
      MockFile mockFile1 = new MockFile(mockFile0, "i.>4G{4");
      File file0 = MockFile.createTempFile("i.>4G{4", "i.>4G{4", (File) mockFile1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(mockFile1);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>(arrayDeque0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" must not be ul");
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      cSVPrinter1.printRecords((Iterable<?>) linkedHashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuoteChar('Z');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      Byte byte0 = Byte.valueOf((byte) (-116));
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected Quote value: ");
      Class<Quote> class0 = Quote.class;
      EnumSet<Quote> enumSet0 = EnumSet.allOf(class0);
      CharBuffer charBuffer0 = CharBuffer.allocate(25);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Quote> class0 = Quote.class;
      EnumSet<Quote> enumSet0 = EnumSet.allOf(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      enumSet0.parallelStream();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HfzwL^U", "n", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("knqx=yDX8E/;O5z");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVFormat0.withSkipHeaderRecord(true);
      cSVPrinter0.printComment("");
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "knqx=yDX8E/;O5z";
      objectArray0[2] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat1.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "cV3$";
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      objectArray0[0] = (Object) cSVFormat1;
      Object[] objectArray1 = new Object[6];
      cSVPrinter0.printRecords(objectArray1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('X');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>(789);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) arrayDeque0;
      objectArray0[2] = (Object) arrayDeque0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{<4Re9@");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Character character0 = new Character('E');
      Character character1 = new Character('G');
      cSVFormat0.withEscape(character1);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      Float float0 = new Float(1.0);
      cSVPrinter0.print(float0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVFormat@0000000002");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("}Fkd`_lqe");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Character character0 = new Character('L');
      cSVFormat1.withEscape('3');
      Character character1 = Character.valueOf('Q');
      cSVFormat2.withEscape(character1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("f#Q7_E1&WK7");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Character character0 = new Character('~');
      cSVFormat0.withEscape('d');
      Character character1 = new Character('P');
      cSVFormat1.withEscape(character1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withDelimiter('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('`');
      cSVFormat1.withNullString("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVFormat.newFormat('Y');
      Vector<MockPrintStream> vector0 = new Vector<MockPrintStream>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "dKa(L8p,3");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32);
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) byteBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      Quote quote1 = Quote.ALL;
      cSVFormat2.withQuotePolicy(quote1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer.wrap((CharSequence) stringBuffer0);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\"";
      stringArray0[1] = "\"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\"";
      stringArray0[2] = "\"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\"";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '\"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\"' in [\"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\", \"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\", \"java.nio.HeapCharBuffer@0000000004\",\"java.nio.DirectByteBuffer@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000002\"]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(';');
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.Lexer");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      String string0 = "org.apache.commons.csv.Lexer";
      cSVPrinter0.printComment("org.apache.commons.csv.Lexer");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8X.\"xOt9Kly,");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('L');
      cSVFormat3.withNullString("*'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character(']');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(']');
      Character character1 = new Character(']');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "8X.\"xOt9Kly,";
      objectArray0[3] = (Object) "8X.\"xOt9Kly,";
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8X.\"xOt9Kly,");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('L');
      cSVFormat3.withNullString("*'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Character character0 = new Character(']');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(']');
      Character character1 = new Character(']');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) "8X.\"xOt9Kly,";
      objectArray0[3] = (Object) "8X.\"xOt9Kly,";
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "out";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("WB'OoF_!J#dwHg");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat1.withDelimiter('>');
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      cSVFormat4.withEscape('Y');
      cSVFormat1.withNullString("WB'OoF_!J#dwHg");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
      Character character1 = new Character('`');
      cSVFormat4.withEscape('>');
      cSVFormat3.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withNullString("8X.\"xOtMyy,");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVFormat0.print(charBuffer0);
      int int0 = (-3194);
      LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
      LinkedHashSet<BufferedWriter> linkedHashSet1 = new LinkedHashSet<BufferedWriter>(linkedHashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("");
      cSVPrinter0.println();
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter(',');
      Quote quote0 = Quote.ALL;
      cSVFormat4.withQuotePolicy(quote0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
      
      cSVPrinter0.print((Object) null);
      ArrayDeque<CharArrayWriter> arrayDeque0 = new ArrayDeque<CharArrayWriter>((-1593));
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("knqx=yDX8E/;O5z");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('?');
      cSVFormat3.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "knqx=yDX8E/;O5z";
      objectArray0[2] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = stringWriter0.append('8');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("mVe+[EP?p5!Nl");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      stringWriter0.close();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("mVe+[EP?p5!Nl");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) appendable0;
      objectArray0[6] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = stringWriter0.append('8');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("mVe+[EP?p5!Nl");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      stringWriter0.close();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("mVe+[EP?p5!Nl");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVPrinter0;
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('8');
      cSVFormat3.withEscape('X');
      CharBuffer charBuffer0 = CharBuffer.allocate(2860);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Character character1 = new Character('4');
      Character.valueOf('X');
      Character character2 = Character.valueOf('/');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character2);
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) sQLTransientConnectionException0;
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) sQLTransientConnectionException0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      pipedWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character.valueOf('S');
      MockFile.createTempFile("knqx=yDX8E/;O5z", "knqx=yDX8E/;O5z", (File) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      Vector<MockFileReader> vector0 = new Vector<MockFileReader>(10);
      cSVPrinter0.printRecord((Iterable<?>) sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("knqx=yDX8E/;O5z", "@w30z[@,kCl}cGq", 67);
      cSVPrinter0.print(sQLTimeoutException0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>();
      HashSet<BufferedWriter> hashSet0 = new HashSet<BufferedWriter>(vector0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String string0 = "knqx=yDX8E/;O5z";
      String string1 = "&;K";
      File file0 = null;
      File file1 = MockFile.createTempFile("knqx=yDX8E/;O5z", "&;K", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      String string2 = "]^]Q,EK&y";
      cSVPrinter0.printComment("]^]Q,EK&y");
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      Character.valueOf('V');
      cSVFormat2.withQuoteChar((Character) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter1.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object object0 = new Object();
      Vector<MockFileReader> vector0 = new Vector<MockFileReader>(67);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat.newFormat('x');
      cSVFormat0.withRecordSeparator('H');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('x');
      String string0 = "No quotes mode set but no escape character is set";
      MockFileWriter mockFileWriter0 = new MockFileWriter("No quotes mode set but no escape character is set");
      mockFileWriter0.write("No quotes mode set but no escape character is set");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVFormat1.withSkipHeaderRecord(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat.newFormat('&');
      cSVPrinter0.getOut();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      Integer integer0 = new Integer((-669));
      arrayDeque1.add(integer0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      // Undeclared exception!
      try { 
        mockFileWriter0.append((CharSequence) "No quotes mode set but no escape character is set", (-669), (-853));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withDelimiter('^');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Character character0 = new Character('^');
      cSVFormat0.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Character character1 = new Character(',');
      Character character2 = new Character('7');
      cSVFormat1.withEscape(character2);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter1.printRecords(objectArray0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = stringWriter0.append('8');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("mVe+[EP?p5!Nl");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      stringWriter0.close();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("mVe+[EP?p5!Nl");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('@');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter1;
      cSVPrinter1.flush();
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('^');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      Character character0 = new Character('T');
      cSVFormat1.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      Short short0 = new Short((short)1414);
      cSVPrinter0.print(short0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("NONE");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charArrayWriter0.append((CharSequence) charBuffer0);
      cSVPrinter0.print(character0);
      cSVPrinter0.printComment("NONE");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('D');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      cSVFormat1.format(objectArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      charArrayWriter0.append('f');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      String string0 = "A";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("A");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(97).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Wix&hRuq25\"sHk6P.o", "Unexpected Token type: ");
      mockFile0.setWritable(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('{');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('^');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      Character character0 = new Character('T');
      cSVFormat1.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter1.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('^');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      Character character0 = new Character('T');
      cSVFormat1.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      Short short0 = new Short((short)1414);
      cSVPrinter0.print(short0);
      cSVPrinter0.flush();
      assertEquals(26, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Wix&hRuq25\"sHk6P.o");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVPrinter0.close();
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character.valueOf('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Vector<MockFileReader> vector0 = new Vector<MockFileReader>(122);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      assertEquals(3, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Character character0 = new Character('^');
      cSVFormat2.withEscape(character0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3Rz2S\"'");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "3Rz2S\"'", 3, 3);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
      mockPrintWriter0.write("3Rz2S\"'");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(" Cv~ck-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) null;
      cSVFormat0.validate();
      objectArray0[5] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<MockFileOutputStream> treeSet0 = new TreeSet<MockFileOutputStream>((Comparator<? super MockFileOutputStream>) null);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      File file0 = MockFile.createTempFile("zQ'9XtVrpF4oae@_k", "oK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockPrintWriter0.print(false);
      cSVPrinter0.flush();
      cSVFormat0.withNullString("B*t1^wHw@");
      cSVPrinter0.println();
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.printComment((String) null);
      ArrayDeque<PipedWriter> arrayDeque0 = new ArrayDeque<PipedWriter>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<Integer>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.close();
      cSVPrinter0.println();
      assertEquals(7L, file0.length());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) 'O';
      objectArray0[2] = (Object) 'O';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('^');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      Character character0 = new Character('T');
      cSVFormat1.withEscape(character0);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(136, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("ZiaHv");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(';');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Wix&hRuq25\"sHk6P.o", "Unexpected Token type: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('{');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Iterable<SQLException> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('@');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) " SurroundingSpaces:ignored";
      objectArray0[6] = (Object) "qol.aA#!d['WG35bn";
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('M');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('!');
      cSVFormat2.withEscape('L');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('1');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat4);
      Character character0 = new Character('T');
      cSVFormat2.withSkipHeaderRecord(true);
      Character character1 = Character.valueOf(':');
      cSVFormat3.withEscape(character1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) character0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      assertEquals(138, charArrayWriter1.size());
      assertEquals(138, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@M:>XC@FN?t9");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('C');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Character.valueOf('C');
      Object object0 = new Object();
      cSVFormat2.withDelimiter('g');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "@M:>XC@FN?t9";
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[3] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      File file0 = MockFile.createTempFile("zQ'9XtVrpF4oae@_k", "oK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.flush();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/zQ'9\\XtVrpF4oae@_k0oK|");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      cSVFormat0.withNullString("B*t1^wHw@");
      cSVPrinter0.println();
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("zQ'9XtVrpF4oae@_k");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "zQ'9XtVrpF4oae@_k";
      objectArray0[1] = (Object) "B*t1^wHw@";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "zQ'9XtVrpF4oae@_k";
      objectArray0[4] = (Object) quote0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      cSVFormat0.format(objectArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      cSVFormat0.format(objectArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) pipedWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      charArrayWriter0.append('f');
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Character character0 = new Character('f');
      Character.valueOf('V');
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(4777);
      Character character1 = Character.valueOf('Y');
      cSVFormat0.withEscape(character1);
      Vector<MockFileReader> vector0 = new Vector<MockFileReader>(65);
      cSVPrinter0.printComment("format");
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      File file0 = MockFile.createTempFile("zQ'9XtVrpF4oae@_k", "oK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockPrintWriter0.print(false);
      cSVPrinter0.flush();
      cSVFormat0.withNullString("B*t1^wHw@");
      cSVPrinter0.println();
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.println();
      cSVPrinter0.printComment("zQ'9XtVrpF4oae@_k");
      assertEquals(5L, file0.length());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('H');
      cSVFormat0.withCommentStart(character0);
      String string0 = "qol.aA#!d['WG35bn";
      CSVFormat.newFormat('\"');
      cSVFormat0.withNullString("qol.aA#!d['WG35bn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
