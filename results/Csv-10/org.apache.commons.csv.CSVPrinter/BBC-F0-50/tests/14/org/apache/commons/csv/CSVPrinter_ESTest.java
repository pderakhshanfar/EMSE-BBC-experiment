/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:49:07 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PriorityQueue<MockFileOutputStream> priorityQueue0 = new PriorityQueue<MockFileOutputStream>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i MOn4wkm:Hq1f");
      priorityQueue0.add(mockFileOutputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";m-s");
      MockFile mockFile0 = new MockFile("L<T8 ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Stack<ByteArrayOutputStream> stack0 = new Stack<ByteArrayOutputStream>();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";^oj");
      MockFileWriter mockFileWriter0 = new MockFileWriter(";^oj");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
      MockFileWriter mockFileWriter0 = new MockFileWriter(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityQueue<MockFileOutputStream> priorityQueue0 = new PriorityQueue<MockFileOutputStream>();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('&');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      CSVFormat.newFormat('&');
      cSVPrinter0.printComment("CommentStart=<");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`LU39oW}x[", "", (-163));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "out", 2885, sQLFeatureNotSupportedException0);
      SQLException sQLException0 = new SQLException(sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("e", "CommentStart=<", (-4017), sQLException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('p');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      cSVPrinter0.print(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('p');
      Quote quote0 = Quote.NONE;
      cSVFormat1.withQuotePolicy(quote0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(quote0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString(") invalid parse sequence");
      MockFile mockFile0 = new MockFile(") invalid parse sequence", ") invalid parse sequence");
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(") invalid parse sequence");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      cSVFormat0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.print("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('E');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat.newFormat('E');
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter2.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      cSVFormat0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVPrinter1.print(sQLNonTransientConnectionException0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('E');
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter3.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1b5UH55kQ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("1b5UH55kQ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The escape character and the deli=iter cannot be the same ('");
      MockFile mockFile0 = new MockFile("The escape character and the deli=iter cannot be the same ('");
      File file0 = MockFile.createTempFile("The escape character and the deli=iter cannot be the same ('", "The escape character and the deli=iter cannot be the same ('", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      cSVFormat0.toString();
      Character character0 = new Character('0');
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The escape character and the deli=iter cannot be the same ('");
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('^');
      cSVFormat1.withSkipHeaderRecord(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "mLux5#/.DN@JX!O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("mLux5#/.DN@JX!O");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "mLux5#/.DN@JX!O";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      cSVFormat1.withSkipHeaderRecord(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('h');
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVFormat1.parse(pipedReader0);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ndex\"for header '%s' is %d but CSwRecord only has %d values!");
      MockFile mockFile0 = new MockFile("ndex\"for header '%s' is %d but CSwRecord only has %d values!");
      MockFileWriter mockFileWriter0 = new MockFileWriter("ndex\"for header '%s' is %d but CSwRecord only has %d values!");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Stack<ByteArrayOutputStream> stack0 = new Stack<ByteArrayOutputStream>();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parse sequence");
      MockFile mockFile0 = new MockFile(") invalid parse sequence", ") invalid parse sequence");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile(") invalid parse sequence", ") invalid parse sequence", (File) mockFile1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      vector0.add(byteArrayOutputStream0);
      cSVFormat0.toString();
      cSVPrinter0.print("");
      cSVPrinter0.print(") invalid parse sequence");
      Character character0 = Character.valueOf('0');
      cSVFormat0.withQuoteChar(character0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      mockFile0.getAbsolutePath();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parse sequence");
      MockFile mockFile0 = new MockFile(") invalid parse sequence", ") invalid parse sequence");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile(") invalid parse sequence", ") invalid parse sequence", (File) mockFile1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      vector0.add(byteArrayOutputStream0);
      cSVFormat0.toString();
      cSVPrinter0.print("");
      Character character0 = Character.valueOf('0');
      cSVFormat0.withQuoteChar(character0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      mockFile0.getAbsolutePath();
      cSVFormat0.withSkipHeaderRecord(false);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print("/experiment/) invalid parse sequence/) invalid parse sequence");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "No header mapping was specified, the record values can't be accessed by name");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "No header mapping was specified, the record values can't be accessed by name");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withQuoteChar('8');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.flush();
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "No header mapping was specified, the record values can't be accessed by name";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parse sequence");
      MockFile mockFile0 = new MockFile(") invalid parse sequence", ") invalid parse sequence");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile(") invalid parse sequence", ") invalid parse sequence", (File) mockFile1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      cSVFormat0.toString();
      cSVPrinter0.print("");
      cSVPrinter0.print(") invalid parse sequence");
      Character character0 = Character.valueOf('0');
      cSVFormat0.withQuoteChar(character0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      mockFile0.getAbsolutePath();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(") invalid parse sequence");
      MockFile mockFile0 = new MockFile(") invalid parse sequence", ") invalid parse sequence");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile(") invalid parse sequence", ") invalid parse sequence", (File) mockFile1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      cSVFormat0.toString();
      cSVPrinter0.print("");
      cSVPrinter0.print(") invalid parse sequence");
      Character character0 = Character.valueOf('0');
      cSVFormat0.withQuoteChar(character0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      mockFile0.getAbsolutePath();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "mLux5#/.DN@JX!O";
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("mLux5#/.DN@JX!O");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("mLux5#/.DN@JX!O");
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "mLux5#/.DN@JX!O", 18, sQLNonTransientException0);
      SQLException sQLException0 = new SQLException("", sQLTimeoutException0);
      SQLWarning sQLWarning0 = new SQLWarning("mLux5#/.DN@JX!O", "", sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gI=D Vlep]v+^\u0003M'Qf", sQLWarning0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "mLux5#/.DN@JX!O";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("mLux5#/.DN@JX!O");
      MockPrintStream mockPrintStream0 = new MockPrintStream("mLux5#/.DN@JX!O");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("mLux5#/.DN@JX!O", objectArray0);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(printStream0, "format");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3182, 855);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>();
      hashSet0.add(byteArrayInputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "No header mapping was specified, the record values can't be accessed by name");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Short short0 = new Short((short) (-941));
      cSVPrinter0.print(short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = new Character('I');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('u');
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "mLux5#/.DN@JX!O";
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      cSVFormat0.withEscape('h');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.println();
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) "mLux5#/.DN@JX!O";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('4');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedReader pipedReader1 = new PipedReader();
      assertNotNull(pipedReader1);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      assertNotNull(pipedWriter0);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('g', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('4');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('g', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('4', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('g', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('g', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('4', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('g', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      assertNotSame(pipedReader0, pipedReader1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVParser0);
      assertFalse(pipedReader0.equals((Object)pipedReader1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('g', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('4', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('g', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(cSVParser0.isClosed());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedReader1;
      objectArray0[4] = (Object) pipedReader1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "jJD&C*YG=";
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(pipedReader1, pipedReader0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(9, objectArray0.length);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('g', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('4', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('g', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat1 = CSVFormat.newFormat('h');
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat1.getEscape());
      assertEquals('h', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('$');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('$', (char)cSVFormat2.getEscape());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotNull(cSVParser0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('$', (char)cSVFormat2.getEscape());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertEquals(5, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoting());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "No header mapping was specified, the record values can't be accessed by name");
      assertNotNull(mockFile0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "No header mapping was specified, the record values can't be accessed by name");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(76, charBuffer0.remaining());
      assertEquals(76, charBuffer0.limit());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(76, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(charBuffer0.hasArray());
      assertEquals(76, charBuffer0.remaining());
      assertEquals(76, charBuffer0.limit());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(76, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      
      cSVPrinter0.close();
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(charBuffer0.hasArray());
      assertEquals(76, charBuffer0.remaining());
      assertEquals(76, charBuffer0.limit());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(76, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('8', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(charBuffer0.hasArray());
      assertEquals(76, charBuffer0.remaining());
      assertEquals(76, charBuffer0.limit());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(76, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals('8', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      
      cSVPrinter0.flush();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(charBuffer0.hasArray());
      assertEquals(76, charBuffer0.remaining());
      assertEquals(76, charBuffer0.limit());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(76, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      
      ArrayList<MockFileOutputStream> arrayList0 = new ArrayList<MockFileOutputStream>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertEquals('8', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(charBuffer0.hasArray());
      assertEquals(76, charBuffer0.remaining());
      assertEquals(76, charBuffer0.limit());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(76, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      assertNotNull(mockFileWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("I");
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getCommentStart());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals("I", cSVFormat2.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals(',', cSVFormat2.getDelimiter());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cSVPrinter0.print((Object) null);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      cSVPrinter0.println();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      cSVPrinter0.println();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "I";
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) mockFileWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertEquals(7, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(vector0);
      assertNotNull(linkedHashSet0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("No header mapping was specified, the record values can't be accessed by name");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('5', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name/jJD&C*YG=", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("jJD&C*YG=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('5', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name/jJD&C*YG=", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("jJD&C*YG=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('5', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
      
      CSVFormat cSVFormat3 = CSVFormat.newFormat('>');
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('>', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getRecordSeparator());
      
      StringWriter stringWriter0 = new StringWriter(4045);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      assertEquals("", stringWriter0.toString());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertEquals(3, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name/jJD&C*YG=", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("jJD&C*YG=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('>', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getRecordSeparator());
      
      Character character0 = Character.valueOf('>');
      assertEquals('>', (char)character0);
      assertNotNull(character0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.isEscaping());
      assertNull(cSVFormat4.getQuotePolicy());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals('>', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('>', (char)cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getQuoteChar());
      assertNull(cSVFormat4.getEscape());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('>', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getRecordSeparator());
      
      cSVPrinter2.printComment((String) null);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name/jJD&C*YG=", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("jJD&C*YG=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertEquals('>', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getRecordSeparator());
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVPrinter0, cSVPrinter2);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertEquals(3, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/No header mapping was specified, the record values can't be accessed by name/jJD&C*YG=", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(315L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("jJD&C*YG=", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getQuoteChar());
      assertEquals('\\', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('5', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals("No header mapping was specified, the record values can't be accessed by name", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getCommentStart());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(2455);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("format");
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(9, 789.557F);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecord(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1231).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.close();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('k');
      StringWriter stringWriter0 = new StringWriter(2426);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      CSVFormat.newFormat('Q');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      mockFile0.createNewFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      mockFile0.setReadOnly();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLNonTransientException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("No header mapping was specified, the record values can't be accessed by name", "No header mapping was specified, the record values can't be accessed by name", sQLNonTransientException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientException0);
      assertEquals("", sQLNonTransientException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("w_-.p");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("w_-.p");
      cSVPrinter0.flush();
      Float float0 = new Float(926.536612534449);
      cSVPrinter0.print(float0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) linkedHashSet0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(144L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(2455);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("format");
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(9, 789.557F);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecord(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.close();
      cSVPrinter0.printRecords(resultSet0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(vector0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("w_-.p");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("w_-.p");
      cSVPrinter0.flush();
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(116, 1.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)5, 12);
      hashSet0.add(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(vector0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("w_-.p");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("w_-.p");
      cSVPrinter0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".&");
      sQLNonTransientException0.getSuppressed();
      cSVPrinter0.print(sQLNonTransientException0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) ".&";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) ".&";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      //  // Unstable assertion: assertEquals(359L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat.newFormat('h');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "C=X|5@g";
      stringArray0[1] = "L?%xtzvz&o|`!!yH";
      stringArray0[2] = "y(2Qi[!l";
      stringArray0[3] = "EOF";
      stringArray0[4] = "*MM";
      stringArray0[5] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[6] = "";
      cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stringBuffer0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("MgtTO+sSc>");
      cSVPrinter0.getOut();
      assertEquals(79, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("mLux5#/.DN@JX!O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.close();
      objectArray0[0] = (Object) cSVFormat1;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#d)0L");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      bufferedWriter0.append((CharSequence) "#d)0L");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(bufferedWriter0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('h');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVFormat2.parse(pipedReader0);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = (Object) character0;
      pipedWriter0.write((-171));
      objectArray0[1] = object0;
      objectArray0[2] = (Object) pipedWriter0;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVPrinter1.print(object0);
      assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('k');
      cSVFormat1.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(".t@X`3%Chor*sJe`2", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter1.flush();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(vector0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("w_-.p");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("w_-.p");
      cSVPrinter0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".&");
      Throwable[] throwableArray0 = sQLNonTransientException0.getSuppressed();
      cSVPrinter0.print(sQLNonTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w_-.p", "w_-.p");
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(35, 30.393003F);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientException0);
      cSVPrinter1.printRecord((Object[]) throwableArray0);
      assertEquals(99L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('k');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('k');
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat.newFormat('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('k')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter(2426);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      cSVPrinter0.printComment("format");
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(26, 789.557F);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2426, 1449);
      hashSet0.add(byteArrayInputStream0);
      hashSet0.remove(character0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('k');
      cSVFormat1.withEscape('k');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('h');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(vector0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("w_-.p");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printComment("w_-.p");
      cSVPrinter0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".&");
      sQLNonTransientException0.getSuppressed();
      cSVPrinter0.print(sQLNonTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w_-.p", "w_-.p");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVFormat1.withRecordSeparator('C');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(48);
      cSVPrinter1.print(byteArrayOutputStream0);
      assertEquals(89L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter(2455);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("format");
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(9, 789.557F);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2074);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      StringReader stringReader0 = new StringReader("Eeo5M#z&\"yGZ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 3680);
      cSVFormat0.parse(pushbackReader0);
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2074);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      StringReader stringReader0 = new StringReader("Eeo5M#z&\"yGZ");
      cSVPrinter0.print(objectArray0[2]);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.flush();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Eeo5M#z&\"yGZ", "Eeo5M#z&\"yGZ");
      cSVFormat0.print(charBuffer0);
      cSVFormat0.withRecordSeparator('w');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 3680);
      cSVPrinter1.print(sQLDataException0);
      assertEquals(2004, charBuffer0.length());
      assertEquals(70, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "Unexpected Quote value: ";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ", false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      cSVFormat1.withIgnoreEmptyLines(false);
      HashSet<ByteArrayInputStream> hashSet0 = null;
      try {
        hashSet0 = new HashSet<ByteArrayInputStream>((-1830), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1830
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator("mLux5#/.DN@JX!O");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Class<BufferedReader> class0 = BufferedReader.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<BufferedReader> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter(2426);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      cSVPrinter0.printComment("format");
      cSVPrinter0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("format");
      sQLNonTransientException0.getSuppressed();
      MockFileWriter mockFileWriter0 = new MockFileWriter("format");
      cSVPrinter0.print(mockFileWriter0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Z");
      cSVFormat1.print(stringWriter1);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-2038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2038
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(2455);
      StringWriter stringWriter1 = stringWriter0.append('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("format");
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(9, 789.557F);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('k');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('k');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat.newFormat('h');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.apache.commons.csv.CSVParser";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "org.apache.commons.csv.CSVParser";
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVParser";
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVFormat0.withSkipHeaderRecord(true);
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.csv.CSVParser";
      cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 824);
      cSVPrinter0.print(pipedReader0);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("$VALUES");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment((String) null);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('9');
      cSVPrinter1.print(stringWriter1);
      Appendable appendable0 = cSVPrinter1.getOut();
      assertSame(appendable0, stringWriter1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('k');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('k');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[7] = object1;
      cSVFormat1.format(objectArray0);
      StringWriter stringWriter0 = new StringWriter(1335);
      char[] charArray0 = new char[7];
      cSVFormat2.withRecordSeparator('k');
      cSVFormat2.withRecordSeparator('k');
      charArray0[0] = 'k';
      charArray0[1] = 'j';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'V';
      charArray0[6] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('\'');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("mLux5#/.DN@JX!O", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('n');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2074);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      StringReader stringReader0 = new StringReader("Eeo5M#z&\"yGZ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 3680);
      cSVFormat0.parse(pushbackReader0);
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("e");
      cSVPrinter0.print(objectArray0[4]);
      cSVPrinter0.getOut();
      assertEquals(1843, charBuffer0.length());
      assertEquals(1843, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("c8m-+e>R^ UF{hKCfu");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('&');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("$8$I)T$KlXuh:C&K5");
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) '&';
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) '&';
      objectArray0[8] = (Object) '&';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No header mapping was specified, the record values can't be accessed by name", "jJD&C*YG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFile0.setReadOnly();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      Character character0 = Character.valueOf('&');
      cSVFormat1.withQuoteChar(character0);
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
