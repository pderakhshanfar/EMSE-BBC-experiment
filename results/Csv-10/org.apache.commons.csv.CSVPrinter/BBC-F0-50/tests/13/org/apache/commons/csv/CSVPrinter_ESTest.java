/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 23:48:56 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withNullString("Unexpected Quote value: ");
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 64);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "r ~8t";
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) charArrayWriter1;
      objectArray0[6] = (Object) "org.apache.commons.csv.CSVPrinter";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "org.apache.commons.csv.CSVPrinter", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('B');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('l');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVFormat2.toString();
      cSVPrinter0.printComment("\r;");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "7)";
      cSVFormat0.withNullString("7)");
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat1.withCommentStart('w');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "7)");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("7)");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('7');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "7)");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("N\r\n");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SkipHeaderRecord:");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('X');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("P\n");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('F');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\n");
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.rewind();
      cSVFormat0.validate();
      cSVFormat0.withRecordSeparator('m');
      Character character0 = new Character('m');
      cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      String string0 = "out";
      cSVPrinter0.printComment("out");
      cSVPrinter0.flush();
      ArrayDeque<BufferedInputStream> arrayDeque0 = new ArrayDeque<BufferedInputStream>();
      ArrayDeque<BufferedInputStream> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayDeque0;
      objectArray0[1] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(mockThrowable0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader(17);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withDelimiter('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter1.close();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("('", "'amus&t not e null!", 13);
      Object object0 = new Object();
      cSVPrinter1.print(cSVFormat0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVParser0;
      objectArray0[2] = (Object) sQLTransientConnectionException0;
      objectArray0[3] = (Object) pipedReader0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("08a9h!D1;p!<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("08a9h!D1;p!<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=:R|fDj6-sW?Id");
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Character character0 = Character.valueOf('i');
      cSVFormat1.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      cSVFormat1.withRecordSeparator('r');
      objectArray0[1] = object1;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("RpC)twGI9 7W 9yt[");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      StringWriter stringWriter0 = new StringWriter(853);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "RpC)twGI9 7W 9yt[");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.flush();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>(111, 1453);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVParser0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4_S%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFileWriter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('H');
      Quote quote0 = Quote.NONE;
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 48);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("A*");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter1.print((Object) null);
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>(priorityQueue0);
      TreeSet<SQLTransientConnectionException> treeSet1 = new TreeSet<SQLTransientConnectionException>((SortedSet<SQLTransientConnectionException>) treeSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.csv.CSVPrinter", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        treeSet1.headSet(sQLTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLTransientConnectionException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4SgNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|9>Q0)W");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("|9>Q0)W");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=:R|fDj6-sW?Id");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      DataTruncation dataTruncation0 = new DataTruncation(55, false, false, 55, (-1984));
      Character character0 = Character.valueOf('i');
      cSVFormat1.withCommentStart(character0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      cSVFormat1.withRecordSeparator('r');
      objectArray0[1] = object1;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) dataTruncation0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"WA2Nk,$L!h1aXj[");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      DataTruncation dataTruncation0 = new DataTruncation(65, false, false, 65, (-2002));
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('j');
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Yn\"LY8Y72_9a1!d");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Yn\"LY8Y72_9a1!d");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLSyntaxErrorException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 92;
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 92);
      CSVFormat.newFormat('I');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('a');
      stringWriter1.write("S<|fMZjPU'@\"%oq");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat2);
      bufferedWriter0.append(';');
      Object[] objectArray0 = new Object[0];
      stringWriter1.close();
      bufferedWriter0.append((CharSequence) "S<|fMZjPU'@\"%oq");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.Quote");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.print(charArrayWriter0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Byte byte0 = new Byte((byte)32);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[1&1{ *=h81");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[1&1{ *=h81");
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("7XE3wvQURUuEA#np");
      CSVFormat.newFormat('l');
      cSVFormat1.withSkipHeaderRecord(false);
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("The escape character and the delimiter cannot be the same ('");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.print(charArrayWriter0);
      StringReader stringReader0 = new StringReader("%b:nKu7qbBK");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = Character.valueOf('b');
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) ".<pA#@66zK";
      objectArray0[2] = (Object) character0;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".<pA#@66zK");
      Character character1 = new Character('E');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('j');
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      charArray0[8] = 'j';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CSVParser cSVParser0 = cSVFormat0.parse(charArrayReader0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('(');
      Character character0 = new Character('@');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("out");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("out");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) sQLSyntaxErrorException0;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 92);
      CSVFormat.newFormat('I');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('a');
      stringWriter1.write("S<|fMZjPU'@\"%oq");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      stringWriter1.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>(92, 3141.18F);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(306);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "4bS%gNx";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat1.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Unexpected Quote value: ", hashMap0);
      Object object0 = new Object();
      cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) "Unexpected Quote value: ";
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("z0");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('b');
      Character character1 = new Character('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('b');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      StringReader stringReader0 = new StringReader("z0");
      cSVPrinter0.print(stringReader0);
      cSVPrinter0.printComment("X_{Sv7i}[,Lb");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('b');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.close();
      cSVFormat1.withIgnoreEmptyLines(false);
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('b');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printComment(".<pA#@66zK");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(671);
      charArrayWriter0.flush();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('*');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      SQLWarning sQLWarning0 = new SQLWarning("^Ua@f", "", 587);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^Ua@f", sQLFeatureNotSupportedException0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'h';
      charArray0[2] = 's';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[3] = 'l';
      charArray0[4] = 'w';
      charArray0[5] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("4%gNx");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Q');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockFileWriter0);
      cSVPrinter0.print(quote0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(28);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedHashSet0;
      cSVFormat1.withIgnoreEmptyLines(false);
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      String string0 = "";
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Character character0 = Character.valueOf('H');
      cSVFormat0.withCommentStart(character0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(28);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedHashSet0;
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecords(objectArray0);
      charArrayWriter0.append('6');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(12);
      charArrayWriter1.append((CharSequence) "");
      CharBuffer charBuffer0 = CharBuffer.allocate(771);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      Class<Console> class0 = Console.class;
      ServiceLoader.loadInstalled(class0);
      cSVPrinter1.printRecords((Iterable<?>) linkedHashSet0);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter2.flush();
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("MaFjj%(QuI|u+ER]2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9\"n7L,nZz`}]zBT");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('s');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("aV<dB[YwLf*:T>");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(29);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(29);
      charArrayWriter1.append((CharSequence) "MaFjj%(QuI|u+ER]2");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) "4%gNx";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "MaFjj%(QuI|u+ER]2";
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) mockFileWriter0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      PipedReader pipedReader0 = new PipedReader(3066);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVFormat0.withDelimiter('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.close();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-2840));
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      MockPrintStream mockPrintStream0 = new MockPrintStream("4%gNx");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream1.println("<cv&fl~Rw/7M)");
      PipedReader pipedReader0 = new PipedReader(15);
      cSVFormat1.parse(pipedReader0);
      cSVFormat1.withDelimiter('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.close();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<cv&fl~Rw/7M)", "", 15);
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("4%gNx");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      int int0 = 102;
      PipedReader pipedReader0 = new PipedReader(102);
      cSVFormat3.parse(pipedReader0);
      cSVFormat2.withDelimiter('Z');
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVPrinter cSVPrinter3 = cSVFormat1.print(mockFileWriter0);
      try { 
        cSVPrinter3.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('{');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("</");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("OtU++V59An2\"mm'`)^7", hashMap0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("OtU++V59An2\"mm'`)^7", (String) null, sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat0);
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "OtU++V59An2\"mm'`)^7";
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) sQLSyntaxErrorException0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(']');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      MockFile mockFile0 = new MockFile("z8Ke(37eyb>>M#ra");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      cSVPrinter0.print(objectOutputStream0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("4%gNx");
      Object[] objectArray0 = new Object[1];
      mockFileWriter0.close();
      objectArray0[0] = (Object) cSVFormat3;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      int int0 = 1726;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printComment((String) null);
      cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      File file0 = MockFile.createTempFile("9geTHv}", "9geTHv}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("format");
      cSVFormat0.parse(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVFormat0.print(mockPrintStream0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>(1155, 42);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9geTHv}");
      mockPrintWriter0.println();
      Locale locale0 = new Locale("format", "8B`<=^97I2\"c.Ur-gh");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "format";
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.csv.CSVPrinter$1", objectArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(bufferedWriter0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("4%gNx");
      Object[] objectArray0 = new Object[1];
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JD#14f1J", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      cSVPrinter1.print(sQLSyntaxErrorException0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter2.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat.newFormat('O');
      cSVFormat2.withRecordSeparator("_*@ChH~Oq");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      charArrayWriter0.append((CharSequence) "_*@ChH~Oq");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Class<Console> class0 = Console.class;
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter1.close();
      try { 
        cSVPrinter1.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withRecordSeparator((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('{');
      charArrayWriter1.append((CharSequence) null);
      cSVFormat1.withIgnoreEmptyLines(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("</");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream1.println("out");
      PipedReader pipedReader0 = new PipedReader(3066);
      cSVFormat1.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.close();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 3066);
      cSVPrinter0.print(sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("RpC)twGI9 7W 9yt[");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      StringWriter stringWriter0 = new StringWriter(853);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "RpC)twGI9 7W 9yt[");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>(111, 1453);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("4%gNx");
      Object[] objectArray0 = new Object[1];
      mockFileWriter0.close();
      objectArray0[0] = (Object) cSVFormat3;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      File file0 = MockFile.createTempFile("9geTHv}", "9geTHv}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("format");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.close();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printComment(">HUD6U/`:,Vu");
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("9geTHv}");
      Appendable appendable1 = cSVPrinter0.getOut();
      cSVPrinter0.print(appendable0);
      cSVPrinter0.printComment("!E#");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) appendable1;
      objectArray0[1] = (Object) "!E#";
      objectArray0[2] = (Object) "9geTHv}";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) treeSet0;
      objectArray0[5] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("z0");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      mockPrintStream0.println("out");
      PipedReader pipedReader0 = new PipedReader(2142);
      cSVFormat1.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.close();
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 92);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('R');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('a');
      stringWriter1.write("S<|fMZjPU'@\"%oq");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[0];
      stringWriter1.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>(92, 3141.18F);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(1726);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter2);
      Class<Console> class0 = Console.class;
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) serviceLoader0;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      File file0 = MockFile.createTempFile("9geTHv}", "9geTHv}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("format");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVFormat0.print(mockPrintStream0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>(1155, 56);
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      File file0 = MockFile.createTempFile("9geTHv}", "9geTHv}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("format");
      cSVFormat0.parse(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.close();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("9geTHv}");
      Appendable appendable1 = cSVPrinter0.getOut();
      cSVPrinter0.print(appendable0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) appendable1;
      objectArray0[1] = (Object) arrayList0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      File file0 = MockFile.createTempFile("9geTHv}", "9geTHv}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("format");
      cSVFormat0.parse(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("9geTHv}");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter1.printComment("9geTHv}");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(32);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      stringWriter0.write(889);
      boolean boolean0 = true;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(889).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(boolean0);
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray1[1] = object2;
      cSVPrinter0.printRecord(objectArray1);
      String string0 = "Unexpected Quote value: ";
      cSVPrinter0.printComment(string0);
      char char0 = 'J';
      stringWriter0.append(char0);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData1).getColumnCount();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData1).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2372);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('2');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) charArrayWriter1;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("kU.SeE", "Unexpected Quote value: ", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "kU.SeE";
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.validate();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(258L, file0.length());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('{');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter2);
      Class<Console> class0 = Console.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) serviceLoader0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) serviceLoader0;
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) quote0;
      objectArray1[3] = object0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      assertEquals(307, charArrayWriter2.size());
      assertEquals(307, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(']');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      mockFileWriter0.flush();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("4%gNx");
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1726);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('{');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter2);
      Class<Console> class0 = Console.class;
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) serviceLoader0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) serviceLoader0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(152, charArrayWriter2.size());
      assertEquals(152, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      charArrayWriter0.flush();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('-')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('Y');
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      cSVPrinter0.flush();
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'R';
      stringWriter0.write(charArray0);
      cSVFormat1.withQuoteChar('g');
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVFormat2.withRecordSeparator('Y');
      HashSet<Double> hashSet0 = new HashSet<Double>();
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      assertEquals("RRYYYR\r\n", stringWriter1.toString());
      assertEquals("RRYYYR\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "9geTHv}";
      File file0 = MockFile.createTempFile("9geTHv}", "9geTHv}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("format");
      cSVFormat0.parse(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      arrayList0.add((BufferedOutputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        treeSet0.add(byteArrayOutputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.ByteArrayOutputStream cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "xl.S7cpn[L;!W", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      pipedWriter0.close();
      cSVFormat0.withRecordSeparator("Q/lo/.K0b");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.validate();
      cSVFormat0.withRecordSeparator('m');
      Character character0 = new Character('m');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      String string0 = "out";
      cSVPrinter0.printComment("out");
      cSVPrinter0.flush();
      ArrayDeque<BufferedInputStream> arrayDeque0 = new ArrayDeque<BufferedInputStream>();
      ArrayDeque<BufferedInputStream> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayDeque0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) arrayDeque1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "RecordSeparator=<";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("RecordSeparator=<");
      String string1 = "org.apache.commons.csv.CSVPrinter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter");
      mockPrintWriter0.checkError();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.print("RecordSeparator=<");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      int int0 = (-4);
      LinkedHashSet<BufferedReader> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<BufferedReader>((-4), (-1879.3939F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      String string0 = "4";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4");
      PrintWriter printWriter0 = mockPrintWriter0.append('q');
      mockPrintWriter0.print((-1.0F));
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      charArray0[7] = 'q';
      charArray0[8] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      mockPrintWriter0.println((Object) charArrayReader0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("4%gNx");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(']');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("4%gNx");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("4%gNx");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("kU.SeE", "Unexpected Quote value: ", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "kU.SeE";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "kU.SeE";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printStream0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
