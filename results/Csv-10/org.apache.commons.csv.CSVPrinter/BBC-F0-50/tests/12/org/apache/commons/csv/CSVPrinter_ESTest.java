/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 20:55:38 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('m');
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3h");
      cSVFormat1.withCommentStart('t');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9&");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('\"');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintStream mockPrintStream0 = new MockPrintStream(";y");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";y");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[13];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("out", "out", (-3405));
      sQLTransientException0.setNextException((SQLException) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      linkedList0.add(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = null;
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(35).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '1';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'T';
      charArray0[5] = 'w';
      charArray0[6] = 'd';
      charArray0[7] = '_';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) '_');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Character character0 = new Character('@');
      cSVFormat0.withEscape(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`19");
      cSVFormat0.print(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('B');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream(">");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#^E989Zkj[2%3D61Nd");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(objectArray0[2]);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fF&{gQN%aPJ*u ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = new Character('H');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Gy+k}a3gXj;");
      cSVFormat2.withDelimiter('H');
      StringWriter stringWriter1 = new StringWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Short short0 = new Short((short)116);
      try { 
        cSVPrinter0.print(short0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid char between encapsulated token and delimiter");
      cSVFormat1.toString();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = ">";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('Z');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat1.withCommentStart('o');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment(">");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fF&{gQN%aPJ*u ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("fF\\&{gQN%aPJ*u ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "fF&{gQN%aPJ*u ");
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('Z');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter0.printComment("\r\n");
      cSVPrinter0.print(cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fF&{gQN%aPJ*u ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('<');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withRecordSeparator("fF&{gQN%aPJ*u ");
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[2];
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      stringWriter0.append('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("fF&{gQN%aPJ*u ");
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fF&{gQN%aPJ*u ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('Z');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter0.printComment("\r\n");
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 36);
      cSVFormat0.print(bufferedWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('6');
      cSVFormat1.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment("g");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer1.mark();
      charBuffer0.read(charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = null;
      Character character0 = new Character('@');
      Character character1 = new Character('c');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      Object object0 = new Object();
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("w%Km|k-+1", "w%Km|k-+1");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      file0.mkdirs();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.print("w%Km|k-+1");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      Double double0 = new Double((-7298.588163608215));
      cSVPrinter0.print(double0);
      TreeSet<CharArrayReader> treeSet0 = new TreeSet<CharArrayReader>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>((SortedSet<? extends CharArrayReader>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      Character character0 = Character.valueOf('}');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.withRecordSeparator("");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = (Object) "";
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream(">");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">");
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat0;
      Character character0 = new Character('}');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      cSVFormat2.withCommentStart((Character) null);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream(">");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">");
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat0;
      Character character0 = new Character('}');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart((Character) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter1.printRecord(objectArray1);
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fF&{gQN%aPJ*u ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = new Character('<');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('o');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("fF&{gQN%aPJ*u ");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat5.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) locale_FilteringMode0;
      objectArray1[1] = (Object) character0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      CSVFormat.newFormat('I');
      Character character0 = new Character('F');
      Character character1 = new Character('+');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      stringWriter0.append('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVFormat1.print(stringWriter0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter1.print(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "<q)D4oN^,wymp{", (Throwable) null);
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockFile mockFile0 = new MockFile("<q)D4oN^,wymp{", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "<q)D4oN^,wymp{";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "<q)D4oN^,wymp{";
      objectArray0[3] = (Object) sQLNonTransientException0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream(">");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("A|`W']x(ef-T%a");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = object3;
      objectArray0[4] = object2;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "A|`W']x(ef-T%a";
      objectArray0[7] = object2;
      objectArray0[8] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream(">");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A|`W']x(ef-T%a");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) ">";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      String string0 = "4oo-yB";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4oo-yB", "out", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.setNextException(sQLNonTransientException0);
      sQLTransactionRollbackException0.setNextException(sQLNonTransientException0);
      Character character0 = new Character('J');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      stringWriter0.append('J');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter2 = cSVFormat2.print(stringWriter0);
      cSVPrinter2.println();
      cSVPrinter1.printRecords((Iterable<?>) sQLRecoverableException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLRecoverableException0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) string0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = null;
      Character character1 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter2 = cSVFormat1.print(charBuffer0);
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter2.flush();
      cSVPrinter0.println();
      String string0 = "^H2|zD/%L";
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment("^H2|zD/%L");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('i');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = new Character('i');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      StringWriter stringWriter0 = new StringWriter(3433);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      cSVFormat0.withCommentStart('^');
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      Character.valueOf('X');
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('X');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter2);
      cSVPrinter1.println();
      cSVFormat2.print(stringWriter0);
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      cSVPrinter1.println();
      cSVPrinter0.printComment("x<(M;KW|?s");
      cSVPrinter1.printComment("x<(M;KW|?s");
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = new StringWriter(122);
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      stringWriter1.write(98);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale_FilteringMode0;
      objectArray0[4] = (Object) stringWriter2;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      Character.valueOf('3');
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('#');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withRecordSeparator("M9y&\"f7[/7W/g`hF");
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "M9y&\"f7[/7W/g`hF", 10, 10);
      StringWriter stringWriter2 = stringWriter1.append('y');
      arrayDeque0.add(stringWriter2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("M9y&\"f7[/7W/g`hF");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.printComment("M9y&\"f7[/7W/g`hF");
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "1*zKH=j";
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) stringWriter1;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      Object object0 = new Object();
      Character character1 = Character.valueOf('}');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charBuffer0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cSVPrinter1.print(pipedWriter0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVFormat0.withCommentStart((Character) 'V');
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      stringWriter1.append((CharSequence) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      Character.valueOf('X');
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('X');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printComment("");
      LinkedList<BufferedWriter> linkedList1 = new LinkedList<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      String string1 = "<q)D4oN^,wymp{";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("u(.1\"-|eE'R*b", "<q)D4oN^,wymp{", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.setNextException(sQLNonTransientException0);
      Character character0 = new Character('J');
      cSVFormat0.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>();
      arrayDeque0.add(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("out", "out", (-3405));
      Character.valueOf('_');
      sQLTransientException0.setNextException(sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      linkedList0.add(sQLRecoverableException0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLTransientException0;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      Object object0 = null;
      cSVPrinter1.print(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      StringWriter stringWriter0 = new StringWriter(30);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.append((CharSequence) null);
      Character character0 = Character.valueOf('%');
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.csv.CSVPrinter", "G?eLlPX4Ks3jBWnus", (Throwable) null);
      sQLTimeoutException0.setNextException((SQLException) null);
      cSVFormat0.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      linkedList1.add(sQLRecoverableException0);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) sQLTimeoutException0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("u(.1\"-|eE'R*b", "<q)D4oN^,wymp{", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.setNextException(sQLNonTransientException0);
      Character character0 = new Character('J');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add(sQLRecoverableException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.println();
      cSVPrinter1.close();
      cSVPrinter1.println();
      cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter2.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter2.println();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("out", "out", (-3405));
      Character character0 = Character.valueOf('_');
      sQLTransientException0.setNextException((SQLException) null);
      cSVFormat0.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      linkedList0.add(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = null;
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3405)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      Character character0 = Character.valueOf('X');
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G?eLlPX4Ks3jBWnus", "G?eLlPX4Ks3jBWnus", (Throwable) null);
      sQLTimeoutException0.setNextException((SQLException) null);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      Character character0 = Character.valueOf('<');
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G?eLlPX4Ks3jBWnus", "G?eLlPX4Ks3jBWnus", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 92);
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      cSVFormat2.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add(sQLRecoverableException0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add(sQLRecoverableException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("out", "out", (-3405));
      sQLTransientException0.setNextException((SQLException) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) 'z';
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      charBuffer0.clear();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) 'z';
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer0;
      cSVFormat0.withCommentStart(character0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("@Pb");
      cSVPrinter0.printComment((String) null);
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "@Pb";
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      objectArray0[3] = (Object) "@Pb";
      objectArray0[4] = (Object) "@Pb";
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      Character character0 = Character.valueOf('X');
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G?eLlPX4Ks3jBWnus", "G?eLlPX4Ks3jBWnus", (Throwable) null);
      sQLTimeoutException0.setNextException((SQLException) null);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add(sQLRecoverableException0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter1.printRecords((Iterable<?>) linkedHashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentStart((Character) null);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('j');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('j');
      StringWriter stringWriter0 = new StringWriter(33);
      StringWriter stringWriter1 = stringWriter0.append('r');
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) null);
      Character character0 = Character.valueOf('u');
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      cSVFormat1.validate();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter2, cSVFormat2);
      cSVFormat1.withRecordSeparator('7');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) null;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.print(mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      stringWriter0.append((CharSequence) stringBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArrayWriter0.write("{XN5Tfj|u4p}V");
      charArray0[1] = '>';
      charArrayWriter1.write("");
      stringWriter0.write(charArray0, 0, 0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter1, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile(";t[C\"J%U$utaA", "')");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withRecordSeparator('f');
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVFormat2.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "g~9";
      PrintWriter printWriter0 = mockPrintWriter0.format("g~9", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("g~9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      cSVPrinter0.printComment("g~9");
      cSVPrinter0.println();
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLDataException sQLDataException0 = new SQLDataException("(98K-Agm;", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("(98K-Agm;", sQLDataException0);
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "g~9", (-687), (Throwable) null);
      linkedHashSet0.add(sQLRecoverableException1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('p');
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object object0 = new Object();
      cSVPrinter0.print(cSVFormat0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-`m8eaMZM#gLC", "", (-2241));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("@Pb");
      cSVPrinter0.printComment((String) null);
      LinkedList<BufferedWriter> linkedList0 = new LinkedList<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "@Pb";
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "@Pb";
      objectArray0[4] = (Object) "@Pb";
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("out", "out", (-3405));
      Character character0 = Character.valueOf('_');
      sQLTransientException0.setNextException((SQLException) null);
      cSVFormat1.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      linkedList0.add(sQLRecoverableException0);
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter2.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      cSVFormat2.withRecordSeparator('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      cSVFormat2.print(stringWriter2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stringWriter1;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\u0085", "G?eLlPX4Ks3jBWnus", sQLWarning0);
      sQLTimeoutException0.setNextException(sQLWarning0);
      Character character0 = new Character('<');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedList0.add(sQLRecoverableException0);
      sQLTimeoutException0.getStackTrace();
      linkedList0.add(sQLRecoverableException0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      StringWriter stringWriter3 = stringWriter1.append('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter3, cSVFormat3);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter2);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "g~9";
      PrintWriter printWriter0 = mockPrintWriter0.format("g~9", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("g~9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      cSVPrinter0.printComment("g~9");
      cSVPrinter0.println();
      Double double0 = new Double(2908.30552597788);
      cSVPrinter0.print(double0);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      stringWriter1.append((CharSequence) null);
      Object[] objectArray0 = new Object[7];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      String string0 = "out";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("out", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("out", "out", (-3405));
      Character character0 = Character.valueOf('_');
      sQLTransientException0.setNextException((SQLException) null);
      cSVFormat1.withEscape(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      linkedList0.add(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = null;
      linkedList0.add((SQLRecoverableException) null);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>(linkedList0);
      linkedHashSet0.add((SQLRecoverableException) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('<');
      StringWriter stringWriter0 = new StringWriter(122);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(cSVFormat0);
      Character character0 = Character.valueOf(')');
      cSVFormat1.withQuoteChar(character0);
      ArrayDeque<StringWriter> arrayDeque0 = new ArrayDeque<StringWriter>(62);
      arrayDeque0.stream();
      arrayDeque0.add(stringWriter1);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) 'z';
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "D:A&kG&=T(HXE";
      stringArray0[1] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('S');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q9<\"3`.$%Aen");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      HashSet<MockPrintWriter> hashSet0 = new HashSet<MockPrintWriter>(2505);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      assertEquals(0, hashSet0.size());
  }
}
