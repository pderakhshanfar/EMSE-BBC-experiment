/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:04:30 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVFormat0.withCommentStart('>');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("r}");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.close();
      cSVPrinter0.println();
      int int0 = (-1544);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader(1021);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVParser0;
      objectArray0[7] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0014');
      charArrayWriter0.reset();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r:");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0014';
      charArray0[1] = '2';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      // Undeclared exception!
      try { 
        charArrayWriter0.write(charArray0, (-4921), (-4921));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('L');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("'\n");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
      Character character0 = new Character('4');
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[0] = (Object) charArrayWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
      Character character0 = new Character('V');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'q';
      charArray0[2] = 'X';
      charArray0[3] = 'N';
      charArray0[4] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "^Sg>4;R", 5606, batchUpdateException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLRecoverableException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000002\tjava.io.CharArrayWriter@0000000003\torg.apache.commons.csv.CSVFormat@0000000002\tjava.io.CharArrayWriter@0000000003\t\tjava.io.CharArrayWriter@0000000003\tjava.io.CharArrayWriter@0000000003");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000002\tjava.io.CharArrayWriter@0000000003\torg.apache.commons.csv.CSVFormat@0000000002\tjava.io.CharArrayWriter@0000000003\t\tjava.io.CharArrayWriter@0000000003\tjava.io.CharArrayWriter@0000000003");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("01!V*Kc[PsGX5O");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Comparator<MockFileOutputStream> comparator0 = (Comparator<MockFileOutputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<MockFileOutputStream> priorityQueue0 = new PriorityQueue<MockFileOutputStream>(comparator0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      MockFileWriter mockFileWriter0 = new MockFileWriter("l`ph|*Pz");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("Q$#hl<Nn G/'j");
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)38;
      objectArray0[3] = (Object) (byte)105;
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<ByteArrayOutputStream> arrayDeque0 = new ArrayDeque<ByteArrayOutputStream>();
      ArrayDeque<ByteArrayOutputStream> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(')');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.print(charArrayWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Byte byte0 = new Byte((byte) (-71));
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("qCPS +GYZ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "qCPS +GYZ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("frmat");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringReader stringReader0 = new StringReader("");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1119);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Q$#hl<Nn G/'j";
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('F');
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@q^5BMN8+=");
      Character.valueOf('J');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "frmat";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.print("frmat");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('w');
      cSVFormat1.withNullString("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("dKK~t*Vf aiKn");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "dKK~t*Vf aiKn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      Character character0 = Character.valueOf('q');
      cSVFormat1.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":Q@M-sjiR|?HP");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(248, charArrayWriter0.size());
      assertEquals("\":Q@M-sjiR|?HP\"\t:Q@M-sjiR|?HP\t:Q@M-sjiR|?HP\t:Q@M-sjiR|?HP\t:Q@M-sjiR|?HP\t:Q@M-sjiR|?HP\t:Q@M-sjiR|?HP\r\n\":Q@M-sjiR|?HP\"\r\n\":Q@M-sjiR|?HP\"\r\n\":Q@M-sjiR|?HP\"\r\n\":Q@M-sjiR|?HP\"\r\n\":Q@M-sjiR|?HP\"\r\n\":Q@M-sjiR|?HP\"\r\n\":Q@M-sjiR|?HP\"\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[LCtmc;ixbO5$");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(59, charArrayWriter0.size());
      assertEquals("\"[LCtmc;ixbO5$\",[LCtmc;ixbO5$,[LCtmc;ixbO5$,[LCtmc;ixbO5$\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("COMT");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9c");
      cSVFormat0.withEscape('E');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("COMMENT");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("COMMENT");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('o');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("sK?%fQ~@#XZ C#W^");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2150);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 2111, 2111);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('X');
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('&');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("ot(PIJ2 ");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8.r+?Ac{;ahR");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = 'h';
      charArray0[4] = 'T';
      charArray0[5] = '\\';
      charArray0[6] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment("sK?%FfQ~@#XZ C#WQ^");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("dKK~t*Vf aiKn");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "dKK~t*Vf aiKn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(120);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      int[] intArray0 = new int[0];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("$VALUES", "$VALUES", (Map<String, ClientInfoStatus>) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$VALUES", "$VALUES", (-1721), intArray0, sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation(120, false, false, 120, 120, batchUpdateException0);
      vector0.add(dataTruncation0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>(vector0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=OMXET");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("=OMXET");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.printRecord(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("frmat");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$5#hl<N< G''");
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "?!\\BQicS";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?!BQicS");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?!BQicS";
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('U');
      cSVFormat2.withIgnoreEmptyLines(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      cSVFormat0.withCommentStart((Character) 'k');
      charArray0[1] = 'U';
      charArray0[2] = 'k';
      charArray0[3] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printComment((String) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Yjo[h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yjo[h");
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('@');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Character character1 = Character.valueOf('z');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("M\"0{vMEk");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("frmat");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("frmat");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("=TLb+FZB--7(4|qJ*");
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteChar('m');
      cSVFormat0.withEscape(']');
      CSVPrinter cSVPrinter1 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter1.printRecords(objectArray1);
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('N');
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      cSVPrinter2.printRecord(objectArray1);
      assertNotSame(cSVPrinter2, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('');
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('');
      mockFile0.setReadable(true);
      cSVPrinter0.println();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>('7');
      linkedHashSet0.removeAll(linkedHashSet0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedHashSet0.addAll(linkedHashSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat3.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(486L, mockFile1.length());
      assertEquals(486L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("frmat");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("frmat");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("=TLb+FZB--7(4|qJ*");
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Vector<Short> vector0 = new Vector<Short>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.csv.CSVPrinter$1");
      DataTruncation dataTruncation0 = new DataTruncation(22, false, true, 22, 22, mockThrowable0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      arrayDeque0.add(dataTruncation0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      assertEquals(159L, mockFile1.length());
      assertEquals(159L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Escape=<";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('c');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('c');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('');
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVFormat1.withCommentStart('');
      mockFile0.setReadable(true);
      cSVPrinter0.println();
      cSVPrinter0.printComment("d)xS");
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>(1595);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet1.removeAll(linkedHashSet0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedHashSet0.addAll(linkedHashSet1);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printComment("GQOV^c|! c]wF$|D)");
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "GQOV^c|! c]wF$|D)";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertEquals(118L, mockFile1.length());
      assertEquals(118L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "Escape=<");
      charArrayWriter1.append('U');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('Z');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Escape=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      cSVPrinter0.printComment("@UW9+s#g9ci^.$|");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "Escape=<";
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(347, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("frmat");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q$5#hl<N< G'j");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\'');
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) mockPrintWriter0;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "?!\\BQicS";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?!BQicS");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?!BQicS";
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('U');
      cSVFormat2.withIgnoreEmptyLines(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'U';
      charArray0[2] = 'k';
      charArray0[3] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printComment((String) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('/');
      cSVFormat0.withCommentStart('d');
      cSVFormat4.withIgnoreEmptyLines(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat5 = cSVFormat1.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintWriter0);
      cSVPrinter0.printComment("{vQ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) sQLIntegrityConstraintViolationException0;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat4.validate();
      cSVPrinter0.printComment("{vQ");
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      assertFalse(arrayDeque1.contains(sQLIntegrityConstraintViolationException0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withQuoteChar('d');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.validate();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("Yjo[h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out", false);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>(vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.print(outputStreamWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      Object[] objectArray0 = new Object[7];
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('I');
      Quote quote1 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote1);
      cSVFormat3.withCommentStart('3');
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat4.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "format";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string1 = "Q$hlGN< G_j";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q$hlGN< G_j");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\'');
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintWriter0;
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same (''')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Escape=<";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('U');
      cSVFormat4.withIgnoreEmptyLines(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.printComment("Escape=<");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q$#hlGN< G_j");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\'');
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) cSVFormat0;
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>();
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat2;
      objectArray1[2] = (Object) treeSet1;
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) cSVFormat1;
      objectArray1[5] = (Object) "format";
      objectArray1[6] = (Object) treeSet1;
      try { 
        cSVPrinter0.printRecord(objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('s');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter2;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) charArrayWriter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat0.withDelimiter('W');
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("#QUrd/Z:UT*!),");
      assertEquals(221, charArrayWriter1.size());
      assertEquals(221, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("Yjo[h");
      File file0 = MockFile.createTempFile("Unexpected Quote value: ", "Unexpected Quote value: ", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Kum", false);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>(vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DataTruncation dataTruncation0 = new DataTruncation(73, false, true, 3, 3, sQLIntegrityConstraintViolationException0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) dataTruncation0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) '!';
      objectArray0[7] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) dataTruncation0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("_0HDqqe$J9z<");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Escape=<");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet2 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet3 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T6*7;Q&");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[2] = object0;
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter2.printRecord((Iterable<?>) treeSet1);
      cSVPrinter2.println();
      ArrayList<BufferedWriter> arrayList0 = new ArrayList<BufferedWriter>();
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Escape=<");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('1');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat3;
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(printWriter0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) cSVFormat4;
      objectArray1[1] = (Object) mockPrintWriter0;
      objectArray1[2] = (Object) mockPrintWriter0;
      objectArray1[3] = (Object) cSVPrinter1;
      Object object2 = new Object();
      objectArray1[4] = object2;
      objectArray1[5] = (Object) cSVFormat2;
      objectArray1[6] = (Object) treeSet0;
      objectArray1[7] = (Object) cSVFormat4;
      objectArray1[8] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter1.print(pipedOutputStream0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter(120);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>(vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>((SortedSet<? extends SQLTransactionRollbackException>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(10);
      stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      cSVPrinter0.printComment("O-i~&I02~m v");
      cSVPrinter0.printComment("O-i~&I02~m v");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("url");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.close();
      cSVPrinter0.println();
      ArrayDeque<DataOutputStream> arrayDeque0 = new ArrayDeque<DataOutputStream>((-1544));
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Escape=<");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet2 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet3 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T6*7;Q&");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[2] = object0;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter1.getOut();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Escape=<");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('1');
      cSVFormat3.withIgnoreEmptyLines(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) quote0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      String string0 = "r)736XX.";
      MockFile mockFile0 = new MockFile("r)736XX.", "r)736XX.");
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1528).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      mockPrintWriter0.print((Object) "r)736XX.");
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q$#hlGN< G_j");
      cSVFormat1.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('?');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      cSVFormat1.withEscape('+');
      cSVFormat2.withEscape('(');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("V.h-}}mM2sN4dshl", (Object[]) null);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The comment start character cannot be a line break";
      stringArray0[1] = "' must not be null!";
      stringArray0[2] = "0CCpU";
      stringArray0[3] = "atGPkj";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("' must not be null!");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 1473);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      mockPrintWriter0.printf("atGPkj", (Object[]) stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream1, cSVFormat1);
      cSVPrinter1.printComment("/LBj9@6>#:1-J");
      cSVPrinter0.printComment("atGPkj");
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("Yjo[h");
      File file0 = MockFile.createTempFile("Unexpected Quote value: ", "Unexpected Quote value: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "Yjo[h";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "Yjo[h";
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "S$lk*(Tq)K", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter1);
      cSVPrinter0.print(locale0);
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("V.h-}}mM2sN4dshl", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      cSVPrinter0.printComment("O-i~&I02~m v");
      cSVPrinter0.printComment("V.h-}}mM2sN4dshl");
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "Q$#hlGN< G_j";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q$#hlGN< G_j");
      char char0 = '?';
      cSVFormat1.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('?');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('+');
      cSVFormat2.withEscape('(');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Unexpected Quote value: ";
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = ')';
      charArray0[3] = 'i';
      charArray0[4] = 'q';
      charArray0[5] = 'o';
      charArray0[6] = 'y';
      charArray0[7] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(114, 114);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yS~O^E";
      stringArray0[1] = "charset";
      stringArray0[2] = "";
      stringArray0[3] = "pn5;o8yi'*L/ZX)w";
      stringArray0[4] = "@.O!01/%p";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.printComment("_3,)FT");
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      MockFile mockFile0 = new MockFile("r)736XX.", "vZ");
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreEmptyLines(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withNullString("V.h-}}mM2sN4dshl");
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(48);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter0.close();
      cSVFormat1.withSkipHeaderRecord(true);
      Character character0 = new Character('{');
      cSVFormat0.withQuoteChar(character0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("frmat");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\"|c5yJ$i.S;(Km}RZO");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "frmat";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "frmat";
      objectArray0[6] = (Object) "frmat";
      objectArray0[7] = (Object) "frmat";
      objectArray0[8] = (Object) "\"|c5yJ$i.S;(Km}RZO";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "Escape=<";
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("Mapping for %s not found, expected one of %s", objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8.r+?A2crE;ahR(");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8.r+?A2crE;ahR(");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<BufferedOutputStream> arrayDeque0 = new ArrayDeque<BufferedOutputStream>();
      ArrayDeque<BufferedOutputStream> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Escape=<");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Escape=<";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('U');
      cSVFormat4.withIgnoreEmptyLines(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ba}`=}EkY]m1X", "", 12, sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1197), true, true, 73, 73, sQLSyntaxErrorException0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      arrayDeque0.add(dataTruncation0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Escape=<");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('1');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      TreeSet<ObjectOutputStream> treeSet0 = new TreeSet<ObjectOutputStream>();
      TreeSet<ObjectOutputStream> treeSet1 = new TreeSet<ObjectOutputStream>((SortedSet<ObjectOutputStream>) treeSet0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(28);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVFormat0.withEscape('@');
      cSVPrinter0.flush();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(20);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.print(stringWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CW-T'#I|yd");
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(247, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(10);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.withEscape('p');
      objectArray0[0] = (Object) stringBuffer0;
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("Yjo[h");
      File file0 = MockFile.createTempFile("Unexpected Quote value: ", "Unexpected Quote value: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "Yjo[h";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "Yjo[h";
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "S$lk*(Tq)K", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '`';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("url");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(31);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('0');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "Unexpected Quote value: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string1 = "Q$#hlGN< G_j";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q$#hlGN< G_j");
      cSVFormat1.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('?');
      cSVFormat1.withEscape('+');
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      mockPrintWriter0.println(charArray0);
      Character character0 = new Character('?');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withDelimiter('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = ')';
      charArray0[3] = 'i';
      charArray0[4] = 'q';
      charArray0[5] = 'o';
      charArray0[6] = 'y';
      charArray0[7] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(48);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>(vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DataTruncation dataTruncation0 = new DataTruncation(48, false, false, 73, 73, sQLIntegrityConstraintViolationException0);
      arrayDeque0.add(dataTruncation0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(48);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>(vector0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.println();
      assertEquals("\r\n\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      String string0 = "vZ";
      MockFile mockFile0 = new MockFile("r)736XX.", "vZ");
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("$'ZP&dgFjc", "r)736XX.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // r)736XX.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("V.h-}}mM2sN4dshl", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      cSVPrinter0.printComment("O-i~&I02~m v");
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      MockFile mockFile0 = new MockFile("r)736XX.", "vZ");
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '`';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("url");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.close();
      cSVPrinter0.println();
      assertArrayEquals(new char[] {'\r', '\n', 'v'}, charArray0);
      assertEquals("v", charBuffer0.toString());
  }
}
