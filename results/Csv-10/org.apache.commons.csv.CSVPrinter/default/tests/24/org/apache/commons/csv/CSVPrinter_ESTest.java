/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 08:28:39 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.PriorityQueue;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('j');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(40);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("@%Uk", "", 9);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ")j", 35, sQLWarning0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('5');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3355);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("n(&Vaa2");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('A');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "P|S\"^z(Aid;,6");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      pipedWriter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader(2082);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      assertFalse(treeSet0.contains(2082));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(44);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.println();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(44, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("n}!8AC<");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(114, charArrayWriter0.size());
      assertEquals("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayDeque0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      priorityQueue0.add(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
      assertEquals(52, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('5');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('5');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("The escape character cannot be a line break");
      assertEquals(92, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(36, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('j');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(37, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("T@%U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@%U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^]||3C;x:7");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Integer integer0 = new Integer(231);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('p');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
      assertEquals(47, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(35, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") EOF reached before encapsulated token finished");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(37);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(pipedWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
