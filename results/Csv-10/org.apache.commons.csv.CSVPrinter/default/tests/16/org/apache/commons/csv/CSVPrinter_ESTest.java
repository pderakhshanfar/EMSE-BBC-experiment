/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 08:23:23 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[5];
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>();
      TreeSet<OutputStreamWriter> treeSet1 = new TreeSet<OutputStreamWriter>((SortedSet<OutputStreamWriter>) treeSet0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3\rNC=\n");
      PipedReader pipedReader0 = new PipedReader(25);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The header contains duplicate names: ", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLTransientConnectionException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('L');
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) quote0;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3\rNC\n");
      PipedReader pipedReader0 = new PipedReader(1289);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "3\rNC\n";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) cSVParser0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("38pC\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "38pC\n";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = null;
      objectArray0[7] = (Object) "38pC\n";
      objectArray0[8] = null;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("XqS");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('O');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The escape character cannot be a line break", "]=;Pqr-_j", 837);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("]=;Pqr-_j", "The escape character cannot be a line break", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]=;Pqr-_j", "The escape character cannot be a line break", sQLTransientConnectionException1);
      cSVPrinter0.print(sQLRecoverableException0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      sQLTransientConnectionException0.initCause(sQLRecoverableException0);
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) sQLTransientConnectionException0;
      objectArray0[4] = (Object) "The escape character cannot be a line break";
      objectArray0[6] = (Object) "]=;Pqr-_j";
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printComment("\n");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r[\n");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.print(charArrayWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter1.printComment("\r");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
      assertEquals(4, charArrayWriter0.size());
      assertEquals("\\r\\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9d4fe5 5k(<N2DJ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Stack<LineNumberReader> stack0 = new Stack<LineNumberReader>();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0G>b/g\"m]q$/D*RVy)");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Integer integer0 = new Integer(22);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(integer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 4);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("\r\n");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("-B^N]_`-GA");
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-B^N]_`-GA");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) "-B^N]_`-GA";
      objectArray0[2] = (Object) vector0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("x^aFmQOZ[@");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "x^aFmQOZ[@");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Ad7[kr`OQCu]6:U= Y");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('l');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('C');
      cSVFormat3.withEscape('?');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('?');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat2);
      Stack<LineNumberReader> stack0 = new Stack<LineNumberReader>();
      stack0.add((LineNumberReader) null);
      cSVFormat5.withIgnoreEmptyLines(true);
      stack0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("C!*e");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withNullString("U89B@e");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      Float float0 = new Float((-1.0));
      cSVPrinter0.print(float0);
      Stack<LineNumberReader> stack0 = new Stack<LineNumberReader>();
      stack0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation(57, true, true, 90, 97);
      cSVPrinter0.print(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withEscape('R');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Byte byte0 = new Byte((byte)116);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";0G>b/g\"m]q$/D*RVyy)");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(";0G>b/g\"m]q$/D*Ryy)");
      cSVFormat0.withCommentStart('');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(";0G>b/g\"m]q$/D*Ryy)");
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      Vector<LineNumberReader> vector1 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("");
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Stack<LineNumberReader> stack0 = new Stack<LineNumberReader>();
      stack0.add((LineNumberReader) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      Character.valueOf('j');
      cSVFormat1.withNullString("Unexpected Quote value: ");
      cSVFormat1.withDelimiter('j');
      cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(object0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      priorityQueue0.add(charArrayReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      cSVFormat0.print(charBuffer0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("?w-*N:", "org.apache.commons.csv.Token$Type");
      cSVFormat0.withIgnoreEmptyLines(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?w-*N:", "Q<lmbagb", (-2211), sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("Q<lmbagb");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>(comparator0);
      priorityQueue0.stream();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q<lmbagb", "Q<lmbagb");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.csv.Token$Type", "org.apache.commons.csv.Token$Type", 8, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(")Ebf");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.getOut();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_4fj 5R<NDJ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&57H", "&57H");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1507);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1507);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter1.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter1.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|='6A|iGz2V");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('%');
      CharBuffer charBuffer0 = CharBuffer.allocate('%');
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("\r\n");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('V');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('r');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('r');
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&57H", "&57H");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1507);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character.valueOf('+');
      Character character0 = new Character('k');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("8-~5");
      cSVFormat2.print(mockPrintStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVFormat0.withQuoteChar('k');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('k');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z)Ef", "L97^po>Yc^j");
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter2.print((Object) null);
      CSVPrinter cSVPrinter3 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter3.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter3.print("L97^po>Yc^j");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      CharBuffer charBuffer0 = CharBuffer.allocate(2395);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.print(cSVFormat0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0082');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("?[3ZYL o:^D");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Z)Ef");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6*GKrguA");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("x^aFmQOZ[@");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charset0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m39)1t\"");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Object object0 = new Object();
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = object0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "m39)1t\"", objectArray0);
      HashSet<Byte> hashSet0 = new HashSet<Byte>(1467, 1467);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVFormat0.withCommentStart('3');
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) hashSet0;
      objectArray1[1] = (Object) mockPrintWriter0;
      objectArray1[2] = (Object) printWriter0;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) cSVPrinter0;
      objectArray1[5] = (Object) mockPrintWriter0;
      objectArray1[6] = (Object) hashSet0;
      objectArray1[7] = (Object) printWriter0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Stack<LineNumberReader> stack0 = new Stack<LineNumberReader>();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stack0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m39)1t\"");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Character character0 = new Character('r');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withCommentStart('y');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("m39)1t\"", "1(CVxE\"I.tOhY7JM[");
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      Charset.defaultCharset();
      ByteBuffer.allocateDirect(22);
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ArrayDeque<PipedOutputStream> arrayDeque0 = new ArrayDeque<PipedOutputStream>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVFormat0.print(charBuffer0);
      cSVPrinter1.flush();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("t", "t");
      MockFile mockFile1 = new MockFile(mockFile0, "?V$w82Q;zEa");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Character character0 = Character.valueOf('{');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      mockFile0.deleteOnExit();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArrayInputStream0;
      objectArray0[1] = (Object) "t";
      objectArray0[2] = (Object) "t";
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.flush();
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m39)1t\"");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "m39)1t\"";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('>');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(printWriter0);
      cSVPrinter0.printComment("org.evosuite.runtime.mock.java.io.MockPrintWriter@0000000005.org.apache.commons.csv.CSVFormat@0000000001.java.lang.Object@0000000006.java.lang.String@0000000007");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char char0 = 'S';
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      String string0 = "4IeDs'6g#Y>eC\"#y";
      MockFile mockFile0 = new MockFile("4IeDs'6g#Y>eC\"#y", "4IeDs'6g#Y>eC\"#y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char char0 = 'S';
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      String string0 = "4IeDs'6g#Y>eC\"#y";
      MockFile mockFile0 = new MockFile("4IeDs'6g#Y>eC\"#y", "4IeDs'6g#Y>eC\"#y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(48).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat2.validate();
      cSVFormat0.withCommentStart(char0);
      String string1 = cSVFormat0.toString();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment(string0);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat2.format(objectArray0);
      cSVPrinter0.printComment(string1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, boolean0);
      String string2 = "B?nmaD!//j";
      PrintStream printStream0 = mockPrintStream1.printf(string2, objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1231);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      HashSet<Byte> hashSet0 = new HashSet<Byte>(1231, 2657.6436F);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVFormat1.withCommentStart('+');
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(169, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char char0 = 'S';
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      String string0 = "4IeDs'6g#Y>eC\"#y";
      MockFile mockFile0 = new MockFile("4IeDs'6g#Y>eC\"#y", "4IeDs'6g#Y>eC\"#y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) resultSet0;
      objectArray1[2] = (Object) "4IeDs'6g#Y>eC\"#y";
      objectArray1[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Stack<Short> stack0 = new Stack<Short>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('0');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(34, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      assertEquals(39, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m39)1t\"");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withRecordSeparator('e');
      PriorityQueue<StringReader> priorityQueue0 = new PriorityQueue<StringReader>();
      StringReader stringReader0 = new StringReader("D|G9y");
      priorityQueue0.add(stringReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Vector<FilterOutputStream> vector0 = new Vector<FilterOutputStream>(118);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Appendable appendable0 = cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(printWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) "D|G9y";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter1.printRecords(objectArray0);
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(appendable0);
      cSVPrinter2.printRecords((Iterable<?>) vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]bL!\"E");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
      assertEquals(45, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      MockFile mockFile0 = new MockFile("4IeDs'6g#Y>eC\"#y", "4IeDs'6g#Y>eC\"#y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat2.validate();
      cSVFormat0.withCommentStart('S');
      cSVFormat0.toString();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("4IeDs'6g#Y>eC\"#y");
      cSVFormat2.print(mockPrintWriter0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('r');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(41, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      MockFile mockFile0 = new MockFile("4IeDs'6g#Y>eC\"#y", "4IeDs'6g#Y>eC\"#y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat2.validate();
      cSVFormat0.withCommentStart('S');
      cSVFormat0.toString();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("4IeDs'6g#Y>eC\"#y");
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printComment("?[3ZYL o:^D");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('1');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      Character character0 = Character.valueOf('|');
      cSVFormat1.withEscape(character0);
      objectArray0[3] = object0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.withQuoteChar('+');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byte byte0 = (byte)50;
      byteArray0[1] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVFormat@0000000002\t\torg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Object@0000000005", "org.apache.commons.csv.CSVFormat@0000000002\t\torg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Object@0000000005");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.csv.CSVFormat@0000000002\t\torg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Object@0000000005
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"\",,,,,\r\n", charArrayWriter0.toString());
      assertEquals(9, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1231);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charArrayWriter0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u@WtP", "u@WtP");
      cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      assertEquals(106, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer.allocate(1869);
      CharBuffer charBuffer0 = CharBuffer.allocate(1869);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      charArrayWriter1.reset();
      charArrayWriter1.flush();
      charArrayWriter0.append('z');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      byte[] byteArray0 = new byte[17];
      Character character0 = Character.valueOf('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      byteArray0[0] = (byte)0;
      cSVFormat1.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('z');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>(treeSet0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      File file0 = MockFile.createTempFile("[Vr7DD:!sTn,M]rY", "[Vr7DD:!sTn,M]rY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      File file0 = MockFile.createTempFile("[Vr7DD:!sTn,M]rY", "[Vr7DD:!sTn,M]rY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "[Vr7DD:!sTn,M]rY");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[7];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char char0 = 'S';
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      String string0 = "4IeDs'6g#Y>eC\"#y";
      MockFile mockFile0 = new MockFile("4IeDs'6g#Y>eC\"#y", "4IeDs'6g#Y>eC\"#y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[3];
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r$");
      assertEquals(9, charArrayWriter0.size());
      assertEquals("` \r\n` $\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("e|O\" ulOGhBS%B1g/]1");
      assertEquals(23, charArrayWriter0.size());
      assertEquals("r e|O\" ulOGhBS%B1g/]1\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
      assertEquals(78, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('F');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withEscape('F');
      String string0 = "DlxBay/.S$|BEc|";
      cSVFormat2.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      Object[] objectArray0 = new Object[0];
      CSVFormat.newFormat('F');
      cSVFormat1.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("DlxBay/.S$|BEc|");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "DlxBay/.S$|BEc|";
      stringArray1[1] = "DlxBay/.S$|BEc|";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'DlxBay/.S$|BEc|' in [DlxBay/.S$|BEc|, DlxBay/.S$|BEc|]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)cSVPrinter0.getOut();
      assertEquals("", charArrayWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      Character character0 = new Character('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1962);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.US;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", (Object[]) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, printStream0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m39)1t\"");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[7];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", charArrayWriter0.toString());
      assertEquals(28, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" i ");
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.print((Object) null);
      assertEquals(49, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4PLR^");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Vector<LineNumberReader> vector0 = new Vector<LineNumberReader>();
      vector0.add((LineNumberReader) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertEquals(7, charArrayWriter0.size());
      assertEquals("4PLR^\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3\rNC=\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("\"3\rNC=\n\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1231);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printComment("e|O\" ulOGhBS%B1g]1");
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>((Collection<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      Charset.defaultCharset();
      ByteBuffer.allocateDirect(22);
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withRecordSeparator('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.close();
      assertEquals(2, charBuffer0.position());
      assertEquals(20, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(1869);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer1);
      charArrayWriter1.reset();
      charArrayWriter1.flush();
      charArrayWriter0.append('z');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      byte[] byteArray0 = new byte[1];
      Character character0 = Character.valueOf('\'');
      cSVFormat0.withQuoteChar(character0);
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      cSVPrinter0.print(byteArrayInputStream0);
      cSVPrinter0.close();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = null;
      try {
        hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>(207, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(34, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      assertEquals(34, charArrayWriter0.size());
  }
}
