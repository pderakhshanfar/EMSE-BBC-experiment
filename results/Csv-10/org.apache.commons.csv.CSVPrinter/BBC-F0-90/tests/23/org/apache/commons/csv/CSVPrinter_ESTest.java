/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:12:42 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      CSVParser cSVParser0 = cSVFormat0.parse(lineNumberReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) lineNumberReader0;
      objectArray0[2] = (Object) cSVParser0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) cSVParser0;
      objectArray0[5] = (Object) lineNumberReader0;
      objectArray0[6] = (Object) pipedReader0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("I RAw2b");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('J');
      cSVFormat1.withDelimiter('M');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "I RAw2b");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("[q^o");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("9Ffor)t");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9Ffor)t");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("/74H^Jf?S");
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('V');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('V');
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      cSVFormat4.withRecordSeparator('F');
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) mockFileWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N|f$UHJde");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("I RAwb>m");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment("I RAwb>m");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("/74H^S");
      cSVFormat0.withDelimiter('0');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('G');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(":_zYc");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.colmons.csv.CSVPrinter");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0L");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      cSVPrinter0.printComment("0L");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "0L";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "0L";
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      LinkedList<DataTruncation> linkedList1 = new LinkedList<DataTruncation>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("5z]W");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("67wANsTr{:m 6Xa>?!", "5z]W", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("67wANsTr{:m 6Xa>?!", "5z]W", 36, sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("5z]W", "67wANsTr{:m 6Xa>?!", map0, sQLClientInfoException0);
      linkedList0.push(sQLClientInfoException1);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("I }RAwbc>m");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AV");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.push((SQLClientInfoException) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("gP1|H|lN");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.push((SQLClientInfoException) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("]W");
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '8';
      charArray0[2] = 'v';
      mockFileWriter0.write(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("/7|HlS");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5HQ}xB=2e:`uy:hP");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.push((SQLClientInfoException) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedList1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('d');
      cSVFormat0.withEscape(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/7|HlS");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5HQ}xB=2e:`uy:hP");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.push((SQLClientInfoException) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("V%");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("V%");
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'I';
      cSVFormat0.withEscape('U');
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.push((SQLClientInfoException) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("/7|HlS");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The comment start character and the delimiter cannot be the same ('");
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("The comment start character and the delimiter cannot be the same ('", "", (Map<String, ClientInfoStatus>) null);
      linkedList0.push(sQLClientInfoException0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The comment start character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("/7|HlS");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}y|\\)");
      cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.push((SQLClientInfoException) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("#-");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) mockFileWriter0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("#-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("EORECORD");
      String string0 = "";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g|HlN");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.print("g|HlN");
      cSVPrinter0.print((Object) null);
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      // Undeclared exception!
      try { 
        mockFileWriter0.append((CharSequence) "The comment start character and the delimiter cannot be the same ('", (-1346), (-2086));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ", 12, 12);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      objectArray0[6] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g|HlN");
      cSVFormat1.print(mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("]");
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("]");
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat2.print(mockFileWriter0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N|f$UHJde");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) quote0;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      cSVFormat0.withNullString("Unexpected Quote value: ");
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[1];
      mockFileWriter0.close();
      Object object0 = new Object();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      linkedList1.push(sQLClientInfoException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("r0_'lZ", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      cSVPrinter1.print("r0_'lZ");
      cSVPrinter0.getOut();
      Double double0 = new Double((-2182.276533));
      cSVPrinter1.print(double0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("N|f$UHJde");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('.');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('#');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      try { 
        cSVPrinter1.printComment("N|f$UHJde");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$");
      cSVFormat1.print(mockFileWriter0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('|');
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$");
      cSVFormat1.print(mockFileWriter0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('|');
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The comment start character and the delimiter cannot be the same ('", true);
      cSVFormat0.withDelimiter('j');
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('%');
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String string0 = ") invalid parse sequence";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(") invalid parse sequence");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVPrinter0.close();
      cSVFormat1.withSkipHeaderRecord(false);
      String string1 = "HV`";
      // Undeclared exception!
      try { 
        cSVPrinter0.print("HV`");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The comment start character and the delimiter cannot be the same ('", true);
      Character character0 = new Character(']');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('^');
      cSVPrinter0.print(printStream0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) locale_Category0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) printStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) character0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0'l$";
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = null;
      linkedList0.push((SQLClientInfoException) null);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.withEscape('&');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockFile mockFile1 = new MockFile("", "The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Character.valueOf(']');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character(']');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printComment("\"nkrtOz?P$CD\"3^Un");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter0.print(locale_Category0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) "";
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteChar('+');
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("Mapping for %s not found, expected one of %s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Mapping for %s not found, expected one of %s", true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print("Mapping for %s not found, expected one of %s");
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter0.print(mockFileWriter0);
      cSVPrinter1.flush();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat0.withQuoteChar(';');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Character character1 = Character.valueOf('+');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Character character2 = Character.valueOf('F');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character1);
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat3.withCommentStart('#');
      StringWriter stringWriter0 = new StringWriter(101);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.printComment("QZ29]l v%sKw>Z");
      cSVPrinter0.print(character2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("The comment start character and the delimiter cannot be the same ('", true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print("The comment start character and the delimiter cannot be the same ('");
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.printComment("");
      cSVPrinter0.getOut();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      cSVPrinter0.print(mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Locale.forLanguageTag("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      mockPrintWriter0.append((CharSequence) "The comment start character and the delimiter cannot be the same ('");
      Quote quote0 = Quote.ALL;
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      cSVFormat2.withQuoteChar('x');
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecord(objectArray0);
      Short short0 = new Short((short)10);
      cSVPrinter0.print(short0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Locale.forLanguageTag("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      cSVFormat2.withQuoteChar('x');
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) filterOutputStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      MockFileWriter mockFileWriter0 = new MockFileWriter("e(");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0'l$";
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$");
      cSVFormat0.print(mockFileWriter0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('1');
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      String string1 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, 114, hashMap0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLWarning0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("e(", (String) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLIntegrityConstraintViolationException0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>(treeSet0);
      linkedList0.push(sQLClientInfoException0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(4);
      PriorityQueue<SQLClientInfoException> priorityQueue1 = new PriorityQueue<SQLClientInfoException>(priorityQueue0);
      PriorityQueue<Console> priorityQueue2 = new PriorityQueue<Console>();
      PriorityQueue<Console> priorityQueue3 = new PriorityQueue<Console>(priorityQueue2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('D');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('D');
      Character character0 = new Character('D');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withQuoteChar('x');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = new Character('g');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVPrinter0.printComment((String) null);
      Short short0 = new Short((short)22);
      try { 
        cSVPrinter0.print(short0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) mockFile0;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter1.print(locale_Category0);
      cSVPrinter1.flush();
      cSVPrinter0.println();
      cSVPrinter1.printComment("QZ29]l v%sKw>Z");
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0'l$";
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g0'l$");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "e(";
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withQuoteChar('x');
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.print("The comment start character and the delimiter cannot be the same ('");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale.forLanguageTag("e(");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('8');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('8');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.print(cSVFormat4);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      MockFile mockFile1 = new MockFile("e(");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      cSVFormat2.print(mockPrintWriter1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "e(";
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g0'l$");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.ExtendedBufferedeaxer");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = (Object) arrayList0;
      objectArray0[6] = (Object) evoSuiteFile0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "QZ29]l v%sKw>Z";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) cSVPrinter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "QZ29]l v%sKw>Z", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('x');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("e(");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.ExtendedBufferedReader");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat0.print(mockFileWriter0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0'l$";
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      int int0 = 1920;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1920).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment(string0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(int0, boolean0, boolean0, int0, int0, throwable0);
      Comparator<DataOutputStream> comparator0 = (Comparator<DataOutputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<DataOutputStream> treeSet0 = new TreeSet<DataOutputStream>(comparator0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) hashMap0;
      cSVPrinter0.printRecords(objectArray0);
      String string1 = "";
      cSVPrinter0.printComment(string1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFile0;
      Locale locale1 = Locale.forLanguageTag("e(");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "-Ir4]RFiH_DgKpO?@w", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h:}{gNt!Z+W[");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "h:}{gNt!Z+W[";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "h:}{gNt!Z+W[";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("h:}{gNt!Z+W[");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("X0BvA^asNOt", "X0BvA^asNOt");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.forLanguageTag("X0BvA^asNOt");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.println((-2542.7261923389615));
      mockPrintWriter1.format(locale0, "X0BvA^asNOt", (Object[]) null);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("g0'l$");
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>(vector0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLIntegrityConstraintViolationException0);
      linkedList0.push(sQLClientInfoException0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      PriorityQueue<Console> priorityQueue1 = new PriorityQueue<Console>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) cSVPrinter0;
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.push((SQLClientInfoException) null);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(105);
      PriorityQueue<SQLClientInfoException> priorityQueue1 = new PriorityQueue<SQLClientInfoException>(priorityQueue0);
      PriorityQueue<Console> priorityQueue2 = new PriorityQueue<Console>();
      PriorityQueue<Console> priorityQueue3 = new PriorityQueue<Console>(priorityQueue2);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.printRecords((Iterable<?>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h:}{gNt!Z+W[");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "h:}{gNt!Z+W[";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "h:}{gNt!Z+W[";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("h:}{gNt!Z+W[", "", 2033, (Map<String, ClientInfoStatus>) null, (Throwable) null);
      linkedList0.push(sQLClientInfoException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLClientInfoException0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      PriorityQueue<Console> priorityQueue1 = new PriorityQueue<Console>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.push((SQLClientInfoException) null);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(105);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter1.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) mockFile0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("QZ29]l v%sKw>Z");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "e(", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      DataTruncation dataTruncation0 = new DataTruncation(2614, false, false, 2614, 2614);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(dataTruncation0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, dataTruncation0);
      mockFile0.toURL();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.push(sQLClientInfoException0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      PriorityQueue<Console> priorityQueue1 = new PriorityQueue<Console>(priorityQueue0);
      Vector<CharArrayReader> vector0 = new Vector<CharArrayReader>(2614);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "The comment start character and the delimiter cannot be the same ('";
      objectArray0[2] = (Object) linkedHashSet1;
      objectArray0[3] = (Object) linkedHashSet1;
      objectArray0[4] = (Object) linkedHashSet0;
      objectArray0[5] = (Object) linkedHashSet0;
      objectArray0[6] = (Object) linkedHashSet0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) linkedHashSet0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("The comment start character and the delimiter cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      PriorityQueue<Console> priorityQueue1 = new PriorityQueue<Console>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      assertNotSame(priorityQueue0, priorityQueue1);
      
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("g0'l$");
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>(vector0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLIntegrityConstraintViolationException0);
      linkedList0.push(sQLClientInfoException0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<SQLTransactionRollbackException> vector1 = new Vector<SQLTransactionRollbackException>(priorityQueue0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet1);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "g0'l$";
      MockFileWriter mockFileWriter0 = new MockFileWriter("g0'l$", true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      PriorityQueue<Console> priorityQueue0 = new PriorityQueue<Console>();
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue1 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>(priorityQueue1);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFile mockFile0 = new MockFile("QZ29]l v%sKw>Z", "QZ29]l v%sKw>Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('A');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      charArray0[8] = 'A';
      try { 
        pipedWriter0.write(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withQuoteChar('1');
      String string0 = "org.apache.commons.csv.CSVPrinter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter");
      Locale locale0 = new Locale("q&Lbf#Un%x:w", "org.apache.commons.csv.CSVPrinter");
      mockPrintWriter0.print(true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "q&Lbf#Un%x:w", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != org.apache.commons.csv.CSVFormat
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("e(");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "e(", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('z');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
