/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:06:37 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\ra^\n");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("{\n");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('|');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":`R");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("rwr{^z1=a^3");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('}');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment(":`R");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("EOF");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      byte[] byteArray0 = new byte[0];
      mockPrintStream0.write(byteArray0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.tailSet("EOF", true);
      ArrayList<String> arrayList0 = new ArrayList<String>(treeSet0);
      arrayList0.parallelStream();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("92N");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("kc hX-e5k{?");
      sQLSyntaxErrorException0.setNextException(sQLNonTransientException0);
      sQLSyntaxErrorException0.setNextException(sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.csv.CSVPrinter", sQLRecoverableException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("QR=H;Nn=3\"i0-tFEJU");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("QR=H;Nn=3\"i0-tFEJU");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      String string1 = "fwFRSQrko|qZTVoP!} ";
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'q';
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      charArray0[2] = 'H';
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Af8");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Af8");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#5]GdLqXG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#5]GdLqXG");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printComment("#5]GdLqXG");
      cSVPrinter0.print("#5]GdLqXG");
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("fe escape character and he dlXmiter canot be th wame('");
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "fe escape character and he dlXmiter canot be th wame('";
      objectArray0[1] = (Object) cSVParser0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) "fe escape character and he dlXmiter canot be th wame('";
      objectArray0[4] = (Object) pipedReader0;
      objectArray0[5] = null;
      objectArray0[6] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0.");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0.");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("7W|pQrx~U");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#5]GdLqXG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#5]GdLqXG");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printComment("#5]GdLqXG");
      cSVPrinter0.print("#5]GdLqXG");
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^-8I};qj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^-8I};qj");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("&#*(d4o} <_MB@j)@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&#*(d4o} <_MB@j)@");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}rb83J0zB");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVFormat0.toString();
      cSVPrinter0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("gQNPR5-t?Z+4Y> ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DG |klQ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("H,]>n?");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<pb83J0zB");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Charset.defaultCharset();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
      String string0 = "N=pG |klQ";
      cSVFormat1.withNullString("N=pG |klQ");
      Charset.defaultCharset();
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(711);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('C');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat2.withRecordSeparator('|');
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      TreeSet<FilterOutputStream> treeSet0 = new TreeSet<FilterOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter1;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVPrinter1.printRecords(objectArray0);
      LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(97);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('c');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) charBuffer0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter2);
      linkedHashSet0.add(bufferedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('n');
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('D');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      HashSet<MockFileWriter> hashSet0 = new HashSet<MockFileWriter>(linkedList0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(116);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "GJ~O'a=n9-V|}Z ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GJ~O'a=n9-V|}Z ");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('l');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("GJ~O'a=n9-V|}Z ");
      CSVFormat.newFormat('l');
      Character character0 = Character.valueOf('g');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.put(',');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("GJ~O'a=n9-V|}Z ");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NG |klQ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NG |klQ");
      mockPrintWriter0.append((CharSequence) "NG |klQ");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Charset.defaultCharset();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('y');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8:E||TFu3s0k|r");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.printComment("8:E||TFu3s0k|r");
      Vector<Long> vector0 = new Vector<Long>();
      ArrayList<Long> arrayList0 = new ArrayList<Long>(vector0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) (byte)117;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) "8:E||TFu3s0k|r";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) vector0;
      objectArray0[8] = (Object) "8:E||TFu3s0k|r";
      cSVPrinter0.printRecords(objectArray0);
      byteArray0[1] = (byte)7;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      cSVPrinter0.print(byteArrayInputStream0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withDelimiter('G');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(122);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      try { 
        cSVPrinter0.print(cSVFormat2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "YaoqRGta^!1`ay5");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        cSVPrinter0.print("YaoqRGta^!1`ay5");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character cannot be a line break");
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printComment("The comment start character cannot be a line break");
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Set<String> set0 = charset0.aliases();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('n');
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) set0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DYt9BK]_]_%$");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter0.print(locale_Category0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("DYt9BK]_]_%$");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('<');
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) linkedHashSet0;
      objectArray0[5] = (Object) vector0;
      objectArray0[6] = (Object) cSVFormat3;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('t');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      MockFile mockFile0 = new MockFile("TOKEN");
      MockFile mockFile1 = new MockFile(mockFile0, "out");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFile1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "out", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printStream0);
      cSVPrinter0.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("8:E||TFu3s0k|r");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('\u0080');
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 12, 12);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) "K2'cSN}.pvf~CDmEId";
      objectArray0[6] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('G');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withDelimiter('G');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(122);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      cSVFormat0.withEscape('G');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('X');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      CSVFormat.newFormat(',');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('.');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      stack0.add(sQLIntegrityConstraintViolationException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter1.print(cSVFormat1);
      cSVFormat2.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printComment("org.apache.commons.csv.CSVPrinter$1");
      cSVPrinter0.printRecords((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('X');
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('.');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cSVFormat3.withEscape('I');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "No header mapping was specified, the record values can't be accessed by name";
      stringArray0[1] = "K2'cSN}.pvf~CDmEId";
      stringArray0[2] = "org.apache.commons.csv.CSVRecord";
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>(28);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      stringArray0[3] = "z_[n,oLy%H%Kr";
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter1.printComment("org.apache.commons.csv.CSVPrinter$1");
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('7');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat1.withDelimiter('?');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2007);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('0');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = objectArray0[0];
      String[] stringArray0 = new String[7];
      stringArray0[1] = "\u2028";
      cSVFormat2.withNullString("\u2028");
      stringArray0[2] = "org.apache.commons.csv.Lexer";
      stringArray0[3] = "";
      stringArray0[4] = "ji";
      stringArray0[5] = "eUM1V-?AsKTof?";
      cSVFormat3.withRecordSeparator('T');
      stringArray0[6] = "Z)VzJ)VaO-A";
      cSVFormat3.withHeader(stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printComment(".!qZy_:?5gs3EKs9q");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.allocate(39);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('X');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("vqG");
      cSVFormat3.withDelimiter('4');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(470);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      TreeSet<Console> treeSet0 = new TreeSet<Console>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      vector0.add((SQLIntegrityConstraintViolationException) null);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      cSVPrinter1.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('8');
      cSVFormat3.withDelimiter(')');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object object0 = new Object();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      stack0.add(sQLIntegrityConstraintViolationException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter0.print(cSVFormat4);
      Stack<DataOutputStream> stack1 = new Stack<DataOutputStream>();
      LinkedHashSet<DataOutputStream> linkedHashSet0 = new LinkedHashSet<DataOutputStream>(stack1);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      linkedHashSet0.add(dataOutputStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("#<vyw");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>(arrayList0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('9');
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayLanguage(locale1);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.print(objectArray0[6]);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("8:E||TFu3s0k|r");
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('y');
      String[] stringArray0 = new String[0];
      cSVFormat2.withHeader(stringArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream('y');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.close();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(outputStreamWriter0);
      cSVPrinter1.close();
      Object object0 = new Object();
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      ArrayDeque<BufferedWriter> arrayDeque1 = new ArrayDeque<BufferedWriter>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayDeque1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) arrayDeque1;
      objectArray0[7] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('X');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("vqG");
      cSVFormat3.withDelimiter('4');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(470);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      TreeSet<Console> treeSet0 = new TreeSet<Console>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('X');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("vqG");
      cSVFormat3.withDelimiter('4');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(470);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      TreeSet<Console> treeSet0 = new TreeSet<Console>();
      cSVFormat4.toString();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("vqG");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      charArrayWriter0.reset();
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3238).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      String string0 = null;
      cSVPrinter0.printComment(string0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) string0;
      objectArray1[1] = (Object) charArrayWriter0;
      objectArray1[2] = (Object) charArrayWriter0;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) charArrayWriter0;
      objectArray2[1] = (Object) string0;
      cSVPrinter0.printRecords(objectArray2);
      cSVPrinter0.printRecords(objectArray2);
      assertEquals(3311, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('L');
      cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      ArrayList<BufferedWriter> arrayList0 = new ArrayList<BufferedWriter>(arrayDeque0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1779)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('!');
      MockFileWriter mockFileWriter0 = new MockFileWriter("DYt9BK]_]_%$", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withDelimiter('!');
      cSVFormat2.withRecordSeparator('!');
      objectArray0[0] = (Object) cSVFormat0;
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.getOut();
      Collection<BufferedWriter> collection0 = null;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Dn!~R3#MO");
      mockFileWriter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      File file0 = MockFile.createTempFile("s/UD21koH", "s/UD21koH");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      mockFileWriter0.append((CharSequence) "s/UD21koH");
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) resultSet0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      mockFileWriter0.flush();
      ArrayDeque<BufferedWriter> arrayDeque0 = null;
      try {
        arrayDeque0 = new ArrayDeque<BufferedWriter>((Collection<? extends BufferedWriter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVFormat0.withSkipHeaderRecord(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter0.printComment("");
      pipedOutputStream0.flush();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      Object[] objectArray1 = new Object[1];
      Character character0 = new Character('o');
      cSVFormat0.withQuoteChar(character0);
      objectArray1[0] = (Object) outputStreamWriter0;
      try { 
        cSVPrinter0.printRecord(objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('d');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      ArrayList<BufferedWriter> arrayList0 = new ArrayList<BufferedWriter>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) arrayList0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("8:E||TFu3s0k|r");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      File file0 = MockFile.createTempFile("s/UD21koH", "s/UD21koH");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('f');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('f')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("DI24({Lg:V$w");
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('H');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>(vector0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) vector0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(689, charArrayWriter1.size());
      assertEquals(689, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      charArrayWriter0.reset();
      cSVFormat0.withDelimiter('G');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1080);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>(vector0);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(124, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("8:E||TFu3s0k|r");
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream('y');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(32);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("DI24({Lg:V$w");
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('H');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(273, charArrayWriter1.size());
      assertEquals(273, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      charArrayWriter0.reset();
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.printComment((String) null);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) charArrayWriter0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) cSVFormat0;
      objectArray1[5] = (Object) cSVFormat0;
      objectArray1[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray1);
      assertEquals(259, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-7);
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('\u001D');
      MockFileWriter mockFileWriter0 = new MockFileWriter("DYt9BK]_]_%$", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVFormat2.withRecordSeparator('\u001D');
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      vector0.add(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('d');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      ArrayList<BufferedWriter> arrayList0 = new ArrayList<BufferedWriter>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      assertArrayEquals(new char[] {'d', 'L'}, charArray0);
      assertEquals(1, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('d');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(711);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('C');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Quote quote0 = Quote.NONE;
      cSVFormat2.withRecordSeparator('|');
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      ArrayDeque<BufferedWriter> arrayDeque1 = new ArrayDeque<BufferedWriter>();
      ArrayList<BufferedWriter> arrayList0 = new ArrayList<BufferedWriter>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.flush();
      assertArrayEquals(new char[] {'\n', '\u0000'}, charArray0);
      assertEquals(1, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('7');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat1.withDelimiter('?');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2007);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('0');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) dataOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('7');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('q');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printStream0);
      cSVPrinter0.getOut();
      cSVPrinter0.print(objectArray0[6]);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      objectArray0[3] = (Object) charArrayWriter0;
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.println();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      charArray0[0] = 's';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('d');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.flush();
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      charArrayWriter0.reset();
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('d');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      ArrayList<BufferedWriter> arrayList0 = new ArrayList<BufferedWriter>(arrayDeque0);
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>(90, 90);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter1.close();
      assertArrayEquals(new char[] {'d', 'L'}, charArray0);
      assertEquals(1, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVFormat0.withSkipHeaderRecord(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter0.printComment("");
      pipedOutputStream0.flush();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      Object[] objectArray1 = new Object[1];
      Character character0 = new Character('o');
      cSVFormat0.withQuoteChar(character0);
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(32);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("DI24({Lg:V$w");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('H');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      char char0 = '}';
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      Character character0 = Character.valueOf('h');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("8:E||TFu3s0k|r");
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      Character character0 = new Character('1');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('E');
      StringWriter stringWriter0 = new StringWriter(4546);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.println();
      assertEquals("E", stringWriter0.toString());
  }
}
