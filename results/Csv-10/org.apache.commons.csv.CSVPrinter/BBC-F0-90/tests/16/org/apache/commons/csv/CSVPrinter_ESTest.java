/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:10:46 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 4);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      CSVParser cSVParser0 = cSVFormat0.parse(lineNumberReader1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('K');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALhqBsP[|:^Sv#");
      Object[] objectArray0 = new Object[8];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVPrinter0.printComment("\r(");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0y&$");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "BA#[4!";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('W');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Z\n");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0015');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("2 l}}0N&0xB5P[");
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x``?)nn");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVFormat1.withDelimiter('K');
      Float float0 = new Float(1.0F);
      cSVPrinter0.print(float0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(")]~v^&?o ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[45];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q= GHc-,.<8-PkHnL");
      cSVFormat1.print(stringWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Q= GHc-,.<8-PkHnL");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      char char0 = 'b';
      Character character0 = new Character('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) 'b';
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) 'b';
      objectArray0[5] = (Object) 'b';
      objectArray0[6] = (Object) 'b';
      Object object0 = new Object();
      objectArray0[7] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.print(objectArray0[0]);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}s5#[S|~xE!");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#[S~xE");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      stringWriter0.write((-2069));
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 44);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charsetEncoder0);
      cSVFormat0.print(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) outputStreamWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withCommentStart(':');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment("org.apache.commons.csv.Lexer");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('1');
      Character character0 = new Character('o');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RecordSeparator=<");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat2.validate();
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat2;
      mockPrintWriter0.format(locale0, "out", objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character('b');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) 'b';
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) 'b';
      objectArray0[5] = (Object) 'b';
      objectArray0[6] = (Object) 'b';
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) 'b';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The comment start character and the quoteChar cannot be the same ('", "nc[TZ%H;V5avz F\u0004&", (Throwable) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The comment start character and the quoteChar cannot be the same ('");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("The comment start character and the quoteChar cannot be the same ('", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "The comment start character and the quoteChar cannot be the same ('", sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "The comment start character and the quoteChar cannot be the same ('", sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The comment start character and the quoteChar cannot be the same ('", "kpS;h1& h,?B", sQLDataException0);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLRecoverableException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('n');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) quote0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "\\1gc7y/V}3W";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("lfu*AmtM4-?");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) byteBuffer0;
      objectArray0[3] = (Object) charset0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/\\\\1gc7y/V}3W");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)34;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat1);
      mockPrintWriter0.println(0.0);
      cSVPrinter1.print(evoSuiteFile0);
      cSVPrinter1.printComment("");
      cSVPrinter0.printComment("Parameter '");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('x');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      StringWriter stringWriter1 = new StringWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("? klv}060,x(B5PS[r");
      CSVFormat.newFormat('3');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('X');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withNullString("\\1gc7y/V}3W");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      cSVPrinter0.printRecords(objectArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("RXLKF/_b&-e1l\"-7/5");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("' must not be null!");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "RXLKF/_b&-e1l\"-7/5", sQLTimeoutException0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.getOut();
      sQLTimeoutException0.initCause(sQLNonTransientConnectionException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "' must not be null!";
      objectArray0[3] = (Object) null;
      cSVPrinter1.printRecords(objectArray0);
      Vector<CharArrayReader> vector0 = new Vector<CharArrayReader>(2260);
      // Undeclared exception!
      cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\\1gc7y/V}3W");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVPrinter0.close();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      cSVFormat1.withDelimiter('c');
      objectArray0[1] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      int[] intArray0 = new int[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException("VP<!", "", 2297);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UY:,U6VS99", "", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("UY:,U6VS99", intArray0, sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UY:,U6VS99", "UY:,U6VS99", batchUpdateException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 321);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^[a", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5#[S|~xE!");
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Appendable appendable0 = cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("^[a");
      cSVFormat3.withNullString("");
      CSVPrinter cSVPrinter2 = new CSVPrinter(appendable0, cSVFormat3);
      cSVPrinter1.printComment("}T!YT_P&3");
      Object object0 = new Object();
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/\\\\1gc7y/V}3W");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)34;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment("\\1gc7y/V}3W");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter1;
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 321);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^[a", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^[a");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) stringWriter0;
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      Character character0 = new Character('!');
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(appendable0);
      cSVPrinter1.getOut();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringWriter0);
      cSVPrinter2.printRecords(objectArray0);
      CSVPrinter cSVPrinter3 = cSVFormat4.print(stringWriter0);
      cSVPrinter3.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.print((Object) null);
      cSVPrinter3.printRecords(objectArray0);
      CSVPrinter cSVPrinter4 = new CSVPrinter(appendable0, cSVFormat4);
      cSVPrinter4.flush();
      cSVPrinter1.print(character0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 321);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^[a", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^[a");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter1.print((Object) null);
      Object object2 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      cSVPrinter0.printComment(">XRFp:zx3$D~");
      cSVPrinter0.printRecord(objectArray0);
      Object object0 = new Object();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      cSVPrinter0.printRecords(objectArray0);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(1243, 1243);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('}');
      Quote quote0 = Quote.ALL;
      cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      Object object0 = new Object();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      Double double0 = new Double((-1782.0));
      arrayList0.add(double0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.print(cSVFormat1);
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/\\\\1gc7y/V}3W");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)34;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('i');
      cSVFormat1.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      String string0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/\\\\1gc7y/V}3W");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)34;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat2);
      cSVPrinter1.printComment("");
      cSVPrinter0.printComment("Parameter '");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      Object object0 = new Object();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.print(cSVFormat1);
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[0] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(3205);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVPrinter0.print(pipedInputStream0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[0] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      Character character0 = Character.valueOf('M');
      Character character1 = Character.valueOf('F');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) character0;
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords(objectArray0);
      LinkedHashSet<CharArrayReader> linkedHashSet0 = new LinkedHashSet<CharArrayReader>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter2.printRecords(objectArray0);
      cSVPrinter2.printComment("The quoteChar character and the delimiter cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('}');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(3205);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(priorityQueue0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(8);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      stringWriter0.write("Unexpected Quote value: ");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      String string0 = "Header:";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "Zo/AsdM~`,\"zP");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter1.getOut();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char char0 = 'f';
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile((File) null, "*H6/@,K~J");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("CommntStart=<");
      cSVPrinter0.printComment("L9g~Jq<ggm~UzLow");
      mockFile0.setWritable(false, false);
      mockFileWriter0.write(0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(67).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1243;
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("=sqg`o3{1<?-T", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1234);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('8');
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      cSVFormat1.withEscape('8');
      ArrayList<Long> arrayList0 = new ArrayList<Long>(2572);
      Long long0 = new Long((-2618L));
      arrayList0.add(long0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("=sqg`o3{1<?-T");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char char0 = 'f';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile((File) null, ")/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("CommentStart=<");
      cSVPrinter0.printComment("L9g~Jq<ggm~UzLow");
      mockFile0.setWritable(false, false);
      mockFileWriter0.write(0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.println();
      cSVPrinter0.printRecords(resultSet0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(1243);
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.csv.CSVPrinter$1", "Header:");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      vector0.add(sQLNonTransientConnectionException0);
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) vector0);
      cSVPrinter1.print(vector0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray1[1] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray1[2] = (Object) "";
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) cSVPrinter1;
      cSVPrinter1.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('}');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('}');
      Quote quote0 = Quote.ALL;
      cSVFormat2.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('3');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(1243);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      TreeSet<MockFileOutputStream> treeSet0 = new TreeSet<MockFileOutputStream>();
      PriorityQueue<MockFileOutputStream> priorityQueue1 = new PriorityQueue<MockFileOutputStream>((SortedSet<? extends MockFileOutputStream>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      try { 
        cSVPrinter0.print(treeSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile((File) null, ")/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]W?bl4L]r");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVFormat0.withEscape('S');
      Character.valueOf('f');
      Character character0 = Character.valueOf('?');
      cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.ALL;
      mockFileWriter0.append('S');
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter1.println();
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char char0 = 'f';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile((File) null, ")/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("CommentStart=<");
      cSVPrinter0.printComment("L9g~Jq<ggm~UzLow");
      mockFile0.setWritable(false, false);
      mockFileWriter0.write(0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('t');
      Character.valueOf('M');
      cSVFormat3.withEscape(character0);
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "WhRtB!>k?(`&|O";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter("WhRtB!>k?(`&|O", false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("WhRtB!>k?(`&|O", false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      Character character0 = Character.valueOf('M');
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(1831);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "WhRtB!>k?(`&|O";
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.close();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(9);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) resultSet0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat3;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      cSVFormat2.print(pipedWriter0);
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.print(stringWriter1);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = objectArray0[3];
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(1243);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Vector<SQLNonTransientConnectionException> vector0 = null;
      try {
        vector0 = new Vector<SQLNonTransientConnectionException>((-2982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2982
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("WhRtB!>k?(`&|O", false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.println();
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.close();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", true);
      mockFileWriter0.write(0);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char char0 = 'f';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile((File) null, ")/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      String string0 = "CommentStart=<";
      cSVPrinter0.printComment("CommentStart=<");
      cSVPrinter0.printComment("L9g~Jq<ggm~UzLow");
      mockFile0.setWritable(false, false);
      int int0 = 0;
      mockFileWriter0.write(0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('>');
      Character character0 = new Character('w');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('j');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVFormat cSVFormat5 = cSVFormat0.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charArrayWriter0);
      cSVPrinter0.printComment((String) null);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.print(cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CSVFormat cSVFormat0 = CSVFormat.RFC4180;
          Object[] objectArray0 = new Object[6];
          objectArray0[0] = (Object) cSVFormat0;
          objectArray0[1] = (Object) cSVFormat0;
          objectArray0[2] = (Object) cSVFormat0;
          objectArray0[3] = (Object) cSVFormat0;
          objectArray0[4] = (Object) cSVFormat0;
          objectArray0[5] = (Object) cSVFormat0;
          cSVFormat0.format(objectArray0);
          String string0 = ";9 6sBK@";
          cSVFormat0.withNullString(";9 6sBK@");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor52.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withRecordSeparator('K');
      char char0 = 'J';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('J');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('K')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(1243);
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      cSVPrinter1.flush();
      cSVPrinter1.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<MockFileInputStream>((-383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.close();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withRecordSeparator("$qI<");
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(9);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(9);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.close();
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withRecordSeparator("$qI<");
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(9);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      HashSet<PipedWriter> hashSet0 = new HashSet<PipedWriter>();
      priorityQueue0.retainAll(hashSet0);
      try { 
        pipedWriter0.append('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("=sqg`o3{1<?-T", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1234);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('8');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Quote quote0 = Quote.MINIMAL;
      cSVFormat1.withEscape('8');
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 2);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(bufferedWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1243);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVFormat0.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(1243);
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) vector0);
      cSVPrinter1.print(vector0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile(")/", ")/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("CommentStart=<");
      cSVPrinter0.printComment("L9g~Jq<ggm~UzLow");
      mockFile0.setWritable(false, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "CommentStart=<";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "CommentStart=<";
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withSkipHeaderRecord(false);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(0);
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat2);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.validate();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "\\1gc7y/V}3W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.close();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withSkipHeaderRecord(false);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      PriorityQueue<MockFileInputStream> priorityQueue0 = new PriorityQueue<MockFileInputStream>(9);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("=sqg`o3{1<?-T", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1234);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('8');
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      cSVFormat1.withEscape('8');
      ArrayList<Long> arrayList0 = new ArrayList<Long>(2572);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("=sqg`o3{1<?-T");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char char0 = 'f';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile((File) null, ")/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(cSVFormat0);
      String string0 = "CommentStart=<";
      cSVPrinter0.printComment("CommentStart=<");
      cSVPrinter0.printComment("L9g~Jq<ggm~UzLow");
      mockFile0.setWritable(false, false);
      int int0 = 0;
      mockFileWriter0.write(0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('(');
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '(';
      charArray0[8] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      ArrayList<Long> arrayList0 = new ArrayList<Long>(0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.close();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Unexpected Quote value: ");
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
