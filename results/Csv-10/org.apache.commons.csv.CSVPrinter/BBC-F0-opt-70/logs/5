* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-70
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 11477
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 1573800791
* Starting evolution
bbc usage percentage is: 70%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:51:30.807 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:51:30.809 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:51:30.810 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:51:30.810 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:51:30.811 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:51:30.811 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:51:30.811 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:51:30.811 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:51:30.811 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:51:30.811 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:51:30.812 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:51:33.653 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:51:57.304 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:53:54.500 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 602s and 621 generations, 350725 statements, best individual has fitness: 127.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 159
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 128
* Number of covered goals: 116
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 35
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 486
* Number of covered goals: 436
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 128
* Number of covered goals: 110
* Generated 62 tests with total length 394
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:02:47.151 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.91105% of time used, but only 30/62 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 39%
* Compiling and checking tests
[MASTER] 23:03:06.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:07.729 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:08.246 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:08.586 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:09.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:10.110 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_69_tmp__ESTest.test0(CSVPrinter_69_tmp__ESTest.java:26)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:10.110 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
cSVPrinter0.print(cSVFormat0);

[MASTER] 23:03:18.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_84_tmp__ESTest.test0(CSVPrinter_84_tmp__ESTest.java:29)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:18.495 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
Character character0 = new Character('7');
CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
cSVPrinter0.printComment((String) null);

[MASTER] 23:03:24.781 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_95_tmp__ESTest.test0(CSVPrinter_95_tmp__ESTest.java:139)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:24.783 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertNotNull(cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getQuotePolicy());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());

CSVFormat cSVFormat1 = cSVFormat0.withEscape('h');
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getQuotePolicy());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('h', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.isQuoting());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());

Character character0 = Character.valueOf('h');
assertEquals('h', (char)character0);
assertNotNull(character0);

CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotNull(cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getQuotePolicy());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals(',', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('h', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.isQuoting());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat2.getNullString());
assertTrue(cSVFormat2.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('h', (char)cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('h', (char)cSVFormat2.getEscape());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isEscaping());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);

[MASTER] 23:03:28.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_97_tmp__ESTest.test0(CSVPrinter_97_tmp__ESTest.java:45)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:28.264 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertNotNull(cSVFormat0);
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getCommentStart());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter0);
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getCommentStart());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.close();

[MASTER] 23:03:34.042 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_104_tmp__ESTest.test0(CSVPrinter_104_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:34.051 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertNotNull(cSVFormat0);
assertTrue(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
assertNotNull(cSVPrinter0);
assertTrue(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\t', cSVFormat0.getDelimiter());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.printRecord((Iterable<?>) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-70/tests/5
* Done!

* Computation finished
