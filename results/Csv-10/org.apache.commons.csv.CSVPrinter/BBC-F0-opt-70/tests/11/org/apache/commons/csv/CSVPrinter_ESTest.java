/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:48:29 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Stream;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = 'q';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('q');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "o\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("E");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ">JdhjGp_Yo}B";
      MockFileWriter mockFileWriter0 = new MockFileWriter(">JdhjGp_Yo}B", false);
      mockFileWriter0.write((-4606));
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      mockFileWriter0.flush();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
      cSVPrinter0.print(cSVFormat0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "RecordSeparator=<", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLIntegrityConstraintViolationException0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('M');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('1');
      CSVFormat.newFormat('b');
      StringWriter stringWriter0 = new StringWriter(3605);
      cSVFormat3.validate();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      char char0 = 'f';
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      charArrayWriter0.flush();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HydBYpP&QK$~j51\"");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("HydBYpP&QK$~j51\"", sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning("HydBYpP&QK$~j51\"", "", 35, sQLFeatureNotSupportedException1);
      Throwable throwable0 = sQLFeatureNotSupportedException0.initCause(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLFeatureNotSupportedException0);
      cSVPrinter0.print(sQLSyntaxErrorException0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) throwable0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) sQLWarning0;
      objectArray0[5] = (Object) throwable0;
      objectArray0[6] = (Object) sQLFeatureNotSupportedException1;
      objectArray0[7] = (Object) sQLSyntaxErrorException0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('7');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.print(charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('7');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      LinkedHashSet<BufferedOutputStream> linkedHashSet0 = new LinkedHashSet<BufferedOutputStream>(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 376);
      linkedHashSet0.add(bufferedOutputStream0);
      linkedHashSet0.spliterator();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.withCommentStart('V');
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '$';
      charArray0[4] = '?';
      charArray0[5] = '?';
      charArray0[6] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("\r\n");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[26];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":%\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[23];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('M');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('1');
      StringWriter stringWriter0 = new StringWriter(20);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat4.validate();
      stringWriter0.getBuffer();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Character character0 = Character.valueOf('V');
      cSVFormat1.withQuoteChar(character0);
      cSVPrinter0.print(cSVFormat3);
      DataTruncation dataTruncation0 = new DataTruncation(3605, true, true, 44, 1614);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("w<6^jZN$8EbM{`!D", "w<6^jZN$8EbM{`!D", 20, dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter1.flush();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) dataTruncation0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('#');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r7");
      TreeSet<LineNumberReader> treeSet0 = new TreeSet<LineNumberReader>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(':');
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('L');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\n");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>(3);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('L');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment(" EmptyLines:ignorBd");
      cSVPrinter0.printComment("\r\n");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('%');
      cSVFormat2.withCommentStart('%');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("@(Dl @?Oq>`%bNL{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A&ENKTSK");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[13];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('L');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SL ./_P");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat.newFormat('-');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|X'>3[IbN[HJL%");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("D");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "D");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(":f<");
      CSVFormat.newFormat('9');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Charset.defaultCharset();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>(hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9g|m[F|SA");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      mockPrintStream0.print((Object) sQLClientInfoException0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "'-b-wNU![ZA+";
      objectArray0[1] = (Object) "9g|m[F|SA";
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape(')');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Byte byte0 = new Byte((byte)31);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("0");
      mockPrintStream0.print((Object) cSVFormat0);
      Character.valueOf('t');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(objectArray0[3]);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(')');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Charset charset0 = Charset.defaultCharset();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) charset0;
      objectArray0[7] = (Object) pipedReader0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Charset.defaultCharset();
      cSVPrinter0.print("Z7kbvD!4K:_6lM[L$\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedReader0;
      stringWriter0.append((CharSequence) "Z7kbvD!4K:_6lM[L$\"");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(')');
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) quote0;
      objectArray0[5] = (Object) quote0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("($w@at!<z;)Jf&fi6");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) "($w@at!<z;)Jf&fi6";
      objectArray0[4] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withNullString("");
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteChar(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) "($w@at!<z;)Jf&fi6";
      objectArray0[7] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      mockPrintStream0.format(locale0, "1pJhzg+#}sYD", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
      Object[] objectArray1 = new Object[0];
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Character character0 = new Character('l');
      cSVFormat0.withEscape(character0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(58);
      charArrayWriter0.append('G');
      Object object0 = new Object();
      Charset.defaultCharset();
      Stack<MockFileOutputStream> stack0 = new Stack<MockFileOutputStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Ox=*wN");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = Character.valueOf('b');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[1] = object1;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('b');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("($w@at!<z;)J0f&fi6");
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('s');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1489).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R_kC V:H*Ax.");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) "R_kC V:H*Ax.";
      objectArray0[3] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Character character0 = new Character('i');
      Character character1 = new Character('i');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      Character character2 = Character.valueOf('*');
      cSVFormat1.withEscape(character2);
      Character.valueOf('9');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      mockPrintStream0.append(',');
      Object object0 = new Object();
      Object object1 = new Object();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream1, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('6');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.printRecords(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      try { 
        cSVPrinter0.print(locale1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      MockFile mockFile0 = new MockFile("6");
      MockFileWriter mockFileWriter0 = new MockFileWriter("6", false);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      arrayList0.stream();
      Object object0 = new Object();
      Object object1 = new Object();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Stack<MockFileOutputStream> stack0 = new Stack<MockFileOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("BFUsT%+p];+TO(F_");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("BFUsT%+p];+TO(F_");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("6");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[x=`wN");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('9');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      HashSet<SQLSyntaxErrorException> hashSet0 = new HashSet<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning("t<t", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[x=`wN", sQLWarning0);
      hashSet0.add(sQLSyntaxErrorException0);
      cSVFormat4.withRecordSeparator('9');
      cSVPrinter0.printRecords((Iterable<?>) sQLException0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
      cSVPrinter0.print(charset0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("O[BNo-");
      cSVPrinter0.printComment("O[BNo-");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      mockPrintStream0.format(locale0, "1pJhzg+#}sYD", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "[fx<`wnN";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[fx<`wnN");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('9');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[fx<`wnN");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('9');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[6] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("[fx<`wnN");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("6");
      MockFileWriter mockFileWriter0 = new MockFileWriter("6", true);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      Stream<DataOutputStream> stream0 = arrayList0.stream();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stream0;
      Object object0 = new Object();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer.allocateDirect(2);
      Set<String> set0 = charset0.aliases();
      Stack<MockFileOutputStream> stack0 = new Stack<MockFileOutputStream>();
      ArrayDeque<MockFileOutputStream> arrayDeque0 = new ArrayDeque<MockFileOutputStream>(stack0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator('a');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) set0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[fx<`wnN");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('9');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[6] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Delimiter=<");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withDelimiter('s');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("R@<Im'={`U*^IIRq?1");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat1;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      charset0.decode(byteBuffer0);
      charset0.aliases();
      Stack<MockFileOutputStream> stack0 = new Stack<MockFileOutputStream>();
      ArrayDeque<MockFileOutputStream> arrayDeque0 = new ArrayDeque<MockFileOutputStream>(stack0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(charset0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('~');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/W[", true);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      arrayList0.stream();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("`DMVu\"iTI>Y");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(743);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
      charBuffer0.slice();
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) byteBuffer0;
      byteBuffer0.putFloat(111, (float) 743);
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) byteBuffer0;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      Charset charset1 = Charset.defaultCharset();
      Set<String> set0 = charset1.aliases();
      cSVPrinter1.printRecords((Iterable<?>) set0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(743);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
      charBuffer0.slice();
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter1.printComment("");
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) byteBuffer0;
      byteBuffer0.putFloat(111, (float) 743);
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) byteBuffer0;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      Charset charset1 = Charset.defaultCharset();
      Set<String> set0 = charset1.aliases();
      cSVPrinter1.printRecords((Iterable<?>) set0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(743);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
      charBuffer0.slice();
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) byteBuffer0;
      byteBuffer0.putFloat(111, (float) 743);
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) byteBuffer0;
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      Charset charset1 = Charset.defaultCharset();
      Set<String> set0 = charset1.aliases();
      cSVPrinter1.printRecords((Iterable<?>) set0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) set0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) "O[BNo-";
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) printStream0;
      cSVPrinter0.printRecords(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withDelimiter('s');
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      arrayList0.stream();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("R@<Im'={`U*^IIRq?1");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) "R@<Im'={`U*^IIRq?1";
      objectArray0[5] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      Vector<StringWriter> vector0 = new Vector<StringWriter>(10);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      arrayList0.stream();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("6");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "6";
      MockFile mockFile0 = new MockFile("6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      Stream<DataOutputStream> stream0 = arrayList0.stream();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      MockFileWriter mockFileWriter1 = new MockFileWriter("6");
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("6");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stream0;
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "PPSE[gc?/SmP");
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v.qzB", "PPSE[gc?/SmP", 1278, longArray0, sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("v.qzB", "&ND>hq2", 30, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet1.add(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("*\"~%V$m[$)Y9M", "PPSE[gc?/SmP");
      linkedHashSet1.add(sQLIntegrityConstraintViolationException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('s');
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Pfmu,5\"J4>", "FW6IgIj\"h~QL9(7\\");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%Y$*gf", "+A7^<j(.iV[syv=>", 32, (long[]) null, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("pW", "{8-.fYK_vNJr2h", 13, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("+A7^<j(.iV[syv=>", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) "O[BNo-";
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) printStream0;
      objectArray1[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray1);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      cSVPrinter0.printRecords((Iterable<?>) set0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("PPSE[gc?/SmP", "PPSE[gc?/SmP");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("PPSE[gc?/SmP", "PPSE[gc?/SmP", 114, (long[]) null, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("PPSE[gc?/SmP", "PPSE[gc?/SmP", 114, sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Character character0 = new Character('f');
      cSVFormat1.withQuoteChar(character0);
      cSVPrinter0.print(batchUpdateException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withDelimiter('s');
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      longArray0[1] = (long) 'b';
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("PPSE[gc?/SmP", "PPSE[gc?/SmP");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, longArray0, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 28, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      cSVFormat0.withHeader((String[]) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("PPSE[gc?/SmP", "?7!.YfWbI)j_Kph7s");
      linkedHashSet0.add(sQLIntegrityConstraintViolationException1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) printStream0;
      printStream0.print(0L);
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) "O[BNo-";
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) printStream0;
      objectArray1[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withDelimiter('s');
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Delimiter=<", "Delimiter=<");
      int[] intArray0 = new int[4];
      intArray0[0] = 28;
      intArray0[1] = (-93);
      intArray0[2] = 28;
      intArray0[3] = (-93);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("gCqS4K~Dy\"+cm}V", "Delimiter=<", (-93), intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Delimiter=<", "", 0, longArray0, batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.csv.CSVPrinter", "org.apache.commons.csv.CSVPrinter", 1990, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("wuVE*4m", "z07'");
      linkedHashSet0.add(sQLIntegrityConstraintViolationException1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('>');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('M');
      CSVFormat.newFormat('1');
      StringWriter stringWriter0 = new StringWriter(20);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat3.validate();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Character character0 = Character.valueOf('V');
      cSVFormat1.withQuoteChar(character0);
      DataTruncation dataTruncation0 = new DataTruncation(3605, true, true, 44, 1614);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("w<6^jZN$8EbM{`!D", "w<6^jZN$8EbM{`!D", 20, dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException0);
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      Stream<DataOutputStream> stream0 = arrayList0.stream();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("6");
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) stream0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stream0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) arrayList0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2444);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      charArrayWriter0.flush();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'g';
      charArrayWriter0.write(charArray0);
      charArrayWriter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      String string0 = "^";
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2444).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment(string0);
      ResultSet resultSet1 = null;
      cSVPrinter0.printRecords(resultSet1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Charset.defaultCharset();
      ByteBuffer.allocate(743);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[4];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "No quotes mode set but no escape character is set";
      stringArray0[2] = "=!2";
      stringArray0[3] = "n]";
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('4');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "=!2";
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "No quotes mode set but no escape character is set";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "";
      cSVFormat3.format(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(210);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      cSVFormat0.withRecordSeparator('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter0.print(stringBuffer0);
      // Undeclared exception!
      try { 
        stringWriter0.write("xw2c>^aS", 210, 210);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "WR_kC V:H*Ax.";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      ArrayDeque<PushbackReader> arrayDeque0 = new ArrayDeque<PushbackReader>();
      ArrayDeque<PushbackReader> arrayDeque1 = arrayDeque0.clone();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      cSVFormat0.withRecordSeparator('K');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) "O[BNo-";
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) printStream0;
      objectArray1[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printComment("O[BNo-");
      Vector<StringWriter> vector0 = new Vector<StringWriter>(10);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      TreeSet<SQLTransientConnectionException> treeSet1 = new TreeSet<SQLTransientConnectionException>((SortedSet<SQLTransientConnectionException>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      cSVPrinter0.printComment("~^s9#Mzs>:sS\\ox");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2444);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      charArrayWriter0.flush();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'g';
      charArrayWriter0.write(charArray0);
      charArrayWriter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("^");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withDelimiter('s');
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 28;
      longArray0[1] = (long) 'b';
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("PPSE[gc?/SmP", "PPSE[gc?/SmP");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, longArray0, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 28, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("PPSE[gc?/SmP", "?7!.YfWbI)j_Kph7s");
      linkedHashSet0.add(sQLIntegrityConstraintViolationException1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      Quote quote0 = Quote.ALL;
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1784);
      try { 
        byteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('s');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      charArrayWriter1.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      Character character0 = new Character('s');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) charArrayWriter1;
      objectArray1[1] = (Object) charArrayWriter1;
      objectArray1[2] = (Object) character0;
      objectArray1[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.newFormat('?');
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1152);
      CSVFormat.newFormat('?');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.flush();
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      TreeSet<BufferedReader> treeSet0 = new TreeSet<BufferedReader>(priorityQueue0);
      treeSet0.size();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("8cR1ye1#YM-p>yS");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("$f>ouXab@-G", "$f>ouXab@-G");
      MockFile mockFile1 = new MockFile(mockFile0, "$f>ouXab@-G");
      cSVFormat0.validate();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "The header contains a duplicate entry: '", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("$f>ouXab@-G", "$f>ouXab@-G");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(mockFile0, "$f>ouXab@-G");
      cSVFormat0.validate();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      String string0 = null;
      cSVPrinter0.close();
      String string1 = "The header contains a duplicate entry: '";
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "The header contains a duplicate entry: '", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('6');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('6');
      Character character0 = new Character('6');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat3.withQuoteChar(character0);
      cSVFormat3.withNullString("T");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('6')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('i');
      cSVFormat2.withDelimiter('M');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('1');
      CSVFormat.newFormat('f');
      StringWriter stringWriter0 = new StringWriter(3605);
      cSVFormat3.validate();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Character character1 = Character.valueOf('f');
      cSVFormat0.withQuoteChar(character1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ArrayList<DataOutputStream> arrayList0 = new ArrayList<DataOutputStream>();
      Stream<DataOutputStream> stream0 = arrayList0.stream();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("6");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) stream0;
      objectArray0[3] = (Object) stream0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) arrayList0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.print(objectArray0[1]);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(743);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      charBuffer0.slice();
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) byteBuffer0;
      byteBuffer0.putFloat(111, (float) 743);
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) byteBuffer0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
      charBuffer0.flip();
      ArrayList<ByteArrayOutputStream> arrayList0 = new ArrayList<ByteArrayOutputStream>(0);
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) charset0;
      objectArray1[1] = (Object) cSVPrinter0;
      objectArray1[2] = (Object) arrayList0;
      objectArray1[3] = (Object) appendable0;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "O[BNo-", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) printStream0;
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) "O[BNo-";
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) mockPrintStream0;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) printStream0;
      objectArray1[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('X');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      Object object1 = new Object();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      mockPrintStream1.println((Object) byteArrayInputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream1);
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      TreeSet<SQLTransientConnectionException> treeSet1 = new TreeSet<SQLTransientConnectionException>((SortedSet<SQLTransientConnectionException>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Quote quote0 = Quote.MINIMAL;
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.println();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2444);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      charArrayWriter0.flush();
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'g';
      charArrayWriter0.write(charArray0);
      charArrayWriter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      String string0 = "^";
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('X');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockPrintStream0;
      cSVFormat1.format(objectArray0);
      try { 
        byteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('e');
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      DataTruncation dataTruncation0 = new DataTruncation(1237, true, true, 4, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Unexpected Quote value: ", dataTruncation0);
      cSVPrinter0.printComment("}f.(^72qI");
      TreeSet<InputStreamReader> treeSet0 = new TreeSet<InputStreamReader>();
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      cSVFormat1.print(stringWriter0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "Mapping for %s not found, expected one of %s";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Mapping for %s not found, expected one of %s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      mockFileOutputStream0.write(1489);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('e');
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      DataTruncation dataTruncation0 = new DataTruncation(1237, true, true, 4, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Unexpected Quote value: ", dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable("2", sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable0);
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("2", "2");
      linkedHashSet0.add(sQLIntegrityConstraintViolationException1);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('s');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('b');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      cSVPrinter0.println();
      assertEquals("s", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
  }
}
