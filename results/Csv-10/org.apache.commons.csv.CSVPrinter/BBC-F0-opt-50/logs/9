* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-50
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 9961
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 1474272015
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:52:10.547 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:52:10.547 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:52:10.547 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:52:10.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:52:11.247 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:52:16.421 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:53:45.003 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 22:53:56.615 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 605s and 1396 generations, 752389 statements, best individual has fitness: 117.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 159
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 128
* Number of covered goals: 116
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 38
* Number of covered goals: 37
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 486
* Number of covered goals: 439
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 128
* Number of covered goals: 110
* Generated 64 tests with total length 408
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:03:51.058 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7160833333333333% of time used, but only 25/64 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
[MASTER] 23:04:16.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:17.109 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:17.338 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:17.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:18.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:18.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_71_tmp__ESTest.test0(CSVPrinter_71_tmp__ESTest.java:26)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:18.875 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
CSVFormat cSVFormat0 = CSVFormat.TDF;
Quote quote0 = Quote.NON_NUMERIC;
CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
Float float0 = new Float(3445.284);
cSVPrinter0.print(float0);

[MASTER] 23:04:29.091 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_93_tmp__ESTest.test0(CSVPrinter_93_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:29.094 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

Charset charset0 = Charset.defaultCharset();
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertTrue(charset0.canEncode());
assertNotNull(charset0);

OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
assertFalse(fileDescriptor0.valid());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertTrue(charset0.canEncode());
assertNotNull(outputStreamWriter0);

CSVFormat cSVFormat0 = CSVFormat.TDF;
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('k');
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuotePolicy());
assertNull(cSVFormat1.getEscape());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertEquals('k', (char)cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertNotNull(cSVFormat1);

CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(fileDescriptor0.valid());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertTrue(charset0.canEncode());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuotePolicy());
assertNull(cSVFormat1.getEscape());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertEquals('k', (char)cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());
assertNotNull(cSVPrinter0);

cSVPrinter0.printComment("^,wxcJ");
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(fileDescriptor0.valid());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertTrue(charset0.canEncode());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals('\t', cSVFormat0.getDelimiter());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuotePolicy());
assertNull(cSVFormat1.getEscape());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertEquals('k', (char)cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getNullString());

cSVPrinter0.close();

[MASTER] 23:04:49.492 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_101_tmp__ESTest.test0(CSVPrinter_101_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:49.494 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

Charset charset0 = Charset.defaultCharset();
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.displayName());
assertEquals("US-ASCII", charset0.toString());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.name());
assertNotNull(charset0);

OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
assertFalse(fileDescriptor0.valid());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.displayName());
assertEquals("US-ASCII", charset0.toString());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.name());
assertNotNull(outputStreamWriter0);

CSVFormat cSVFormat0 = CSVFormat.TDF;
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('x');
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertEquals('x', (char)cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isCommentingEnabled());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNotNull(cSVFormat1);

CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(fileDescriptor0.valid());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.displayName());
assertEquals("US-ASCII", charset0.toString());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.name());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertEquals('x', (char)cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isCommentingEnabled());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNotNull(cSVPrinter0);

cSVPrinter0.close();
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(fileDescriptor0.valid());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.displayName());
assertEquals("US-ASCII", charset0.toString());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.name());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertEquals('x', (char)cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isCommentingEnabled());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat1.getDelimiter());

cSVPrinter0.printComment("^,wxcJ");

[MASTER] 23:04:53.148 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_104_tmp__ESTest.test0(CSVPrinter_104_tmp__ESTest.java:32)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:53.149 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

Charset charset0 = Charset.defaultCharset();
assertTrue(charset0.isRegistered());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.displayName());
assertNotNull(charset0);

OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
assertFalse(fileDescriptor0.valid());
assertTrue(charset0.isRegistered());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.displayName());
assertNotNull(outputStreamWriter0);

CSVFormat cSVFormat0 = CSVFormat.TDF;
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertNotNull(cSVFormat0);

Set<String> set0 = charset0.aliases();
assertTrue(charset0.isRegistered());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.displayName());
assertFalse(set0.isEmpty());
assertEquals(14, set0.size());
assertNotNull(set0);

CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
assertFalse(fileDescriptor0.valid());
assertTrue(charset0.isRegistered());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.displayName());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertNotNull(cSVPrinter0);

cSVPrinter0.close();
assertFalse(fileDescriptor0.valid());
assertTrue(charset0.isRegistered());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertEquals("US-ASCII", charset0.displayName());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());

cSVPrinter0.printRecord((Iterable<?>) set0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-50/tests/9
* Done!

* Computation finished
