/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:45:31 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.UnmappableCharacterException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("(startline ");
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AnjkKN?t9~&9j");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">iJ";
      StringWriter stringWriter0 = new StringWriter(3696);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
      MockFile mockFile0 = new MockFile("/gM/_%~C-:");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[8];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N>'");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[2];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('z');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('@');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      StringWriter stringWriter0 = new StringWriter(249);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('@');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      mockPrintWriter0.println(false);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(printWriter0);
      cSVFormat3.print(stringBuffer0);
      TreeSet<Console> treeSet0 = new TreeSet<Console>();
      LinkedList<Console> linkedList0 = new LinkedList<Console>(treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(249).when(resultSetMetaData0).getColumnCount();
      cSVFormat4.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("No quotes mode set but no escape character is set");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      PipedReader pipedReader0 = new PipedReader(57);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "YO.d*v");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      HashSet<PipedInputStream> hashSet0 = new HashSet<PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      hashSet0.add(pipedInputStream0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[8];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N>'");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("xcj-*/PV #[`6uC:7+d");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(3696);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[24];
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ArrayList<ByteArrayOutputStream> arrayList0 = new ArrayList<ByteArrayOutputStream>(10);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(48);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u001E');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
      try { 
        cSVPrinter0.printComment("\u2028");
        fail("Expecting exception: UnmappableCharacterException");
      
      } catch(UnmappableCharacterException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('6');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "c R ev?$`h-Iml=H1|}");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('+');
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("2?4;OwN");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('~');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('E');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "c R el?$`h-9Iml=H1}");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      cSVPrinter0.print(sQLTransientConnectionException0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('E');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Mapping for %s not found, expected one of %s");
      LinkedHashSet<ObjectOutputStream> linkedHashSet0 = new LinkedHashSet<ObjectOutputStream>(81, 81);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      linkedHashSet0.add(objectOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      assertTrue(linkedHashSet0.contains(objectOutputStream0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('J');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Mapping for %s not found, expected one of %s");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader(102);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 102);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      HashSet<PipedInputStream> hashSet0 = new HashSet<PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      hashSet0.add(pipedInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      assertTrue(hashSet0.contains(pipedInputStream0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Vector<Object> vector0 = new Vector<Object>(0, 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Object@0000000003", "org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Object@0000000003", 0);
      vector0.add((Object) sQLTimeoutException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Stack<MockPrintStream> stack0 = new Stack<MockPrintStream>();
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>(stack0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u001E');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> CommentStart=<\u001E> RecordSeparator=<\r\n> SkipHeaderRecord:true");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Q');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\r");
      assertEquals("Q \nQ \n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('d');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\rZk");
      assertEquals(8, charArrayWriter0.size());
      assertEquals("d \nd Zk\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8p>rC-Ic|/t$");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('&');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Long long0 = new Long(2365L);
      cSVPrinter0.print(long0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.printComment("\n");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('.');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> CommentStart=<.> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('a');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter(".L*t!QWy'b!Y", true);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9 dJ*AeJUPS|n*Kj&\"");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u0085");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]t,#?I<XGi)_U.vX");
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]t,#?I<XGi)_U.vX");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[33];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<]tQ#?I<XGiamU{vVX");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(33, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0~zwis=;");
      MockPrintStream mockPrintStream0 = new MockPrintStream("0~zwis=;");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2?4;ywD");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!]:4v<84p9iHv,w");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]t,#?I<XGia_U{vVX", true);
      Object[] objectArray0 = new Object[24];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(24, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(32, byteArrayOutputStream0.size());
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", byteArrayOutputStream0.toString());
      assertEquals(32, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Double double0 = new Double(0.0);
      cSVPrinter0.print(double0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('@');
      StringWriter stringWriter0 = new StringWriter(249);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]t,#?I<XGia_U{vVX", true);
      Object[] objectArray0 = new Object[24];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(24, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("L\r");
      MockPrintStream mockPrintStream0 = new MockPrintStream("f=zt/0t=sgq1{");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("xcj-*/PV #[`6uC:7+d");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("xcj-*/PV #[`6uC:7+d");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<]tQ#?I<XGiamU{vVX", false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockFileWriter0, appendable0);
  }
}
