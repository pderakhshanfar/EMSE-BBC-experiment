/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:06:27 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader(5496);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.withNullString("8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("8");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('O');
      Character character0 = new Character('C');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      cSVFormat0.withEscape('O');
      cSVFormat2.toString();
      Character character1 = Character.valueOf('5');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat4);
      cSVFormat2.withRecordSeparator("RLp-%#j&Ml5Wbs,f^`9");
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('e');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("A00t");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("format");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      String string0 = "6QdHI";
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(")sHjc|(2>7Bx~f8");
      cSVFormat0.withRecordSeparator("4P!#;l7$9%9dj[_i");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('d');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) 'd';
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat2.withCommentStart('d');
      objectArray0[5] = (Object) ")sHjc|(2>7Bx~f8";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) ")sHjc|(2>7Bx~f8";
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("} :Z&DQ%_AHRRFg%VR");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "} :Z&DQ%_AHRRFg%VR";
      objectArray0[2] = null;
      cSVPrinter0.close();
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("} :Z&DQ%_AHRRFg%VR");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) "} :Z&DQ%_AHRRFg%VR";
      objectArray0[2] = null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.print(charArrayWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("z!w");
      cSVFormat0.withEscape('?');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '9';
      charArray0[2] = '#';
      charArray0[3] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=xn.x");
      charArrayWriter0.close();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLTransientException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!]]2BZDtbPG*u");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "!]]2BZDtbPG*u";
      cSVFormat1.withSkipHeaderRecord(false);
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "z_w";
      CSVFormat.newFormat('!');
      objectArray0[7] = (Object) charArrayWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("!]]2BZDtbPG*u");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '%';
      charArray0[2] = 'E';
      charArray0[3] = 's';
      charArray0[4] = '.';
      charArray0[5] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '%';
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) 'S';
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) '%';
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) '%';
      objectArray0[7] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('@');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, " Md_ttS5U]7e26zF`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('@');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      cSVPrinter0.printComment(" Md_ttS5U]7e26zF`");
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment(" Md_ttS5U]7e26zF`");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "org.apache.commons.csv.CSVPri1ter";
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPri1ter");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string1 = "p.&OC >94YCfc9i";
      mockFileWriter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("p.&OC >94YCfc9i");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat.newFormat('Z');
      objectArray0[1] = (Object) cSVFormat0;
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]J>");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) ":H";
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) charArrayWriter1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPri1ter");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      mockFileWriter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("p.&OC >94YCfc9i");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('\'');
      Quote quote1 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.validate();
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('`');
      cSVFormat1.withRecordSeparator("FL`$w~e");
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      ArrayDeque<CharArrayReader> arrayDeque0 = new ArrayDeque<CharArrayReader>();
      ArrayDeque<CharArrayReader> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      cSVPrinter0.printComment("Z}");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter", false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('R');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("");
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = new Integer(2308);
      Character character0 = Character.valueOf('u');
      cSVFormat1.withQuoteChar(character0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) integer0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(character0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('e');
      CSVFormat.newFormat('j');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVFormat0.validate();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('j');
      cSVPrinter0.getOut();
      cSVFormat1.withRecordSeparator('U');
      cSVFormat1.withDelimiter('U');
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(35);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) hashSet0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) charArrayWriter1;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('j');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('e');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('j');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVFormat0.validate();
      cSVFormat2.withRecordSeparator('j');
      cSVPrinter0.getOut();
      cSVFormat1.withRecordSeparator('U');
      cSVFormat1.withDelimiter('U');
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>(35);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = new PipedWriter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("D&ZXDE~J");
      cSVPrinter0.print(sQLTransactionRollbackException0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter", false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('?');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = new Object();
      PipedWriter pipedWriter1 = new PipedWriter();
      StringWriter stringWriter0 = new StringWriter(15);
      cSVPrinter0.print(stringWriter0);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVPrinter");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.print(cSVFormat3);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8PGe64#r%P,aRJ~");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("out");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Charset.defaultCharset();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('x');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('R');
      cSVFormat4.withEscape('Q');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter1.printComment("Index for header '%s' is %d but CSVRecord only has %d values!");
      Integer integer0 = new Integer(861);
      Character.valueOf('5');
      Character character1 = Character.valueOf('i');
      cSVFormat4.withQuoteChar(character1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException0);
      priorityQueue0.add(sQLTransactionRollbackException0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat4);
      cSVPrinter3.printRecords((Iterable<?>) sQLTransactionRollbackException0);
      cSVPrinter0.getOut();
      cSVPrinter3.getOut();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter", false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AT0d");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('P');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = new Object();
      cSVPrinter1.print(object0);
      cSVFormat0.toString();
      cSVFormat0.toString();
      Appendable appendable0 = cSVPrinter0.getOut();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat4.print(appendable0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) appendable0;
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[4] = object0;
      try { 
        cSVPrinter2.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) null);
      cSVFormat0.validate();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('?');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter1);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVFormat0.toString();
      String string0 = cSVFormat0.toString();
      cSVPrinter0.getOut();
      cSVFormat2.withDelimiter('1');
      cSVPrinter1.print((Object) null);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1276).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false, false, false).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      mockFileWriter0.flush();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.printRecords(resultSet1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet2 = null;
      cSVPrinter0.printRecords(resultSet2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(861);
      stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter1 = new StringWriter('H');
      stringWriter0.append('3');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = new Integer(92);
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.printComment("t&nE<`SXc{\"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "wJ~H", 0, 0);
      SQLDataException sQLDataException0 = new SQLDataException("wJ~H");
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = new Integer(1069);
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.printComment("wJ~H");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      SQLException sQLException0 = new SQLException("wJ~H", "y4@Xh.+[", sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      CSVPrinter cSVPrinter2 = cSVFormat2.print(charArrayWriter2);
      ArrayDeque<OutputStreamWriter> arrayDeque0 = new ArrayDeque<OutputStreamWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("wJ~H");
      arrayDeque0.add(mockFileWriter0);
      ArrayDeque<OutputStreamWriter> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter2.printRecords((Iterable<?>) arrayDeque1);
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      stringArray0[3] = "'9";
      cSVFormat0.withHeader(stringArray0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "'9");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter", false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      mockFileWriter0.append('P');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AT0d");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('a');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVFormat2.toString();
      cSVFormat0.toString();
      cSVPrinter0.getOut();
      cSVFormat2.withDelimiter(']');
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      cSVFormat0.withHeader(stringArray0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "'9");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) null);
      cSVFormat2.validate();
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('?');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVFormat2.print(charArrayWriter1);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      StringReader stringReader0 = new StringReader("yY)ze~\"HTWC/,x-r");
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "_#jL|~v3a>QK");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "yY)ze~\"HTWC/,x-r", (-1478), (-1478));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      cSVFormat1.print(charArrayWriter1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print((Object) null);
      StringReader stringReader0 = new StringReader("A\"JweymJk");
      Character character0 = Character.valueOf('i');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('i');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      PipedWriter pipedWriter1 = new PipedWriter();
      cSVPrinter1.print(pipedWriter1);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(pipedWriter1);
      cSVPrinter2.close();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("U");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "U";
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "chrset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      Charset.defaultCharset();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('R');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter1.printComment("org.apache.commons.csv.CSVPrinter");
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = new Integer(1069);
      Character character0 = Character.valueOf('R');
      cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter2.printComment("'9");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException0);
      priorityQueue0.add(sQLSyntaxErrorException0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "wJ~H", 0, 0);
      StringReader stringReader0 = new StringReader("wJ~H");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "wJ~H", (int[]) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "wJ~H");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charArrayWriter2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "chrset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "wJ~H");
      cSVFormat0.validate();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter1);
      cSVPrinter1.printComment("wJ~H");
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter1.print(charArrayWriter1);
      StringReader stringReader0 = new StringReader("V");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("_#jL|~v3a>QK", "V", (int[]) null);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "wJ~H";
      Object object0 = new Object();
      objectArray0[1] = object0;
      CSVPrinter cSVPrinter3 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter3.close();
      CSVPrinter cSVPrinter4 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter4.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "chrset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ArrayList<PipedOutputStream> arrayList0 = new ArrayList<PipedOutputStream>(31);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(861);
      StringWriter stringWriter1 = new StringWriter('F');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('F');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('\u0082');
      Character character0 = new Character('i');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.printComment("1%\"R ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('8');
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withEscape('I');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char[] charArray0 = new char[1];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withCommentStart('v');
      charArray0[0] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray1 = new Object[0];
      cSVPrinter0.printRecords(objectArray1);
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      Character character0 = new Character('_');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat0.validate();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "wJ~H";
      objectArray0[2] = (Object) "wJ~H";
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      priorityQueue0.add(sQLTransactionRollbackException0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      try { 
        cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayWriter0.append((CharSequence) charBuffer0);
      cSVFormat0.validate();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.print(pipedWriter0);
      PipedWriter pipedWriter1 = new PipedWriter();
      StringReader stringReader0 = new StringReader("+<dWAok");
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringReader0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZccwT55");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'9", "org.apache.commons.csv.CSVPrinter", sQLSyntaxErrorException0);
      priorityQueue0.add(sQLNonTransientConnectionException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('8');
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('I');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter0.printComment("=T_`2ZcHYpf^}<");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      cSVFormat0.withHeader(stringArray0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The quoteChar cannot be a line break");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "The quoteChar cannot be a line break");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print((Object) null);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVPrinter");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "C1$}@/dz;JH0ejO:2", (-3634), sQLTransientConnectionException0);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "wJ~H");
      Character character0 = new Character('_');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat0.validate();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "wJ~H";
      objectArray0[2] = (Object) "wJ~H";
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      try { 
        cSVPrinter1.print(sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "wJ~H", 0, 0);
      SQLDataException sQLDataException0 = new SQLDataException("/E@j|!10uJ#\"AZ{f?)");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/E@j|!10uJ#\"AZ{f?)", "The quoteChar cannot be a line break", sQLDataException0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "/E@j|!10uJ#\"AZ{f?)";
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      cSVFormat1.withSkipHeaderRecord(true);
      cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = new Integer(0);
      cSVPrinter0.print(integer0);
      cSVPrinter0.print(treeSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2648)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      ArrayList<PipedOutputStream> arrayList0 = new ArrayList<PipedOutputStream>(31);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('*');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      stringWriter1.append('*');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('6');
      Character character0 = Character.valueOf('Y');
      cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      stringWriter1.append('6');
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      cSVFormat3.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.printRecord((Iterable<?>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 72;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 72, 72);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('*');
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character('W');
      cSVFormat1.toString();
      Character character1 = new Character('y');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character1);
      cSVFormat2.validate();
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVFormat4.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object1 = new Object();
      cSVPrinter0.print(object1);
      StringReader stringReader0 = new StringReader("$'o@WS-B5$KFVhcmzD");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      cSVPrinter0.print(sQLTransientConnectionException0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ArrayList<PipedOutputStream> arrayList0 = new ArrayList<PipedOutputStream>(31);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      SQLDataException sQLDataException0 = new SQLDataException("/E@j|!10uJ#\"AZ{f?)");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-sp|4'@^[4`5U", "-sp|4'@^[4`5U", sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "-sp|4'@^[4`5U", sQLTimeoutException0);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(':');
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(':');
      cSVFormat0.withCommentStart(character0);
      cSVFormat1.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print(cSVFormat1);
      StringReader stringReader0 = new StringReader("V");
      cSVPrinter0.print(stringReader0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('*');
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character('W');
      Character character1 = new Character('y');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character1);
      cSVFormat2.validate();
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVFormat4.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      cSVFormat1.withSkipHeaderRecord(true);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print(object0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('=');
      Character character1 = new Character('y');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.validate();
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) cSVPrinter0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = object1;
      objectArray0[8] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(true);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      PriorityQueue<DataOutputStream> priorityQueue0 = new PriorityQueue<DataOutputStream>();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "wJ~H", 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter2);
      Vector<StringReader> vector0 = new Vector<StringReader>();
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      PriorityQueue<DataOutputStream> priorityQueue0 = new PriorityQueue<DataOutputStream>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "wJ~H";
      objectArray0[3] = (Object) "wJ~H";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) appendable0;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0000');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      cSVFormat0.withHeader(stringArray0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "'9");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      cSVPrinter0.getOut();
      Stack<Console> stack0 = new Stack<Console>();
      cSVPrinter0.printRecord((Iterable<?>) stack0);
      cSVPrinter0.printComment("F tQ61kEPR#$+");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "");
      CharBuffer charBuffer0 = CharBuffer.allocate(732);
      charArrayWriter0.append((CharSequence) charBuffer0, 116, 116);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter2);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'i';
      objectArray0[2] = (Object) 'i';
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ':';
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) 'i';
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('*');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      stringWriter1.append('*');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('Y');
      cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      Object object3 = new Object();
      objectArray0[7] = object3;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(':');
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(':');
      cSVFormat0.withCommentStart(character0);
      cSVFormat1.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.withIgnoreEmptyLines(false);
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      cSVFormat2.withSkipHeaderRecord(false);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The quoteChar cannot be a line break";
      stringArray0[1] = "charset";
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "'9";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2099);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>(2099);
      SQLDataException sQLDataException0 = new SQLDataException("]nl>AA4>,!_Zq_@-;|");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]nl>AA4>,!_Zq_@-;|", "/E@j|!10uJ#\"AZ{f?)", sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("]nl>AA4>,!_Zq_@-;|", "]nl>AA4>,!_Zq_@-;|", sQLTimeoutException0);
      priorityQueue0.add(sQLTransientException0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('*');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('*');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile(",5k0mRSb_._fOfFX", ",5k0mRSb_._fOfFX", (File) mockFile0);
      mockFile0.delete();
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVFormat1.toString();
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'z';
      charArray0[4] = '*';
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.println(1470.52);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('8');
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('I');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(':');
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(':');
      cSVFormat0.withCommentStart(character0);
      cSVFormat1.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.withIgnoreEmptyLines(false);
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      cSVFormat2.withSkipHeaderRecord(false);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      PriorityQueue<DataOutputStream> priorityQueue0 = new PriorityQueue<DataOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("OS;o@A4x.2Zeti");
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      File file0 = MockFile.createTempFile("&rCoxNy", "");
      try { 
        MockFile.createTempFile("OS;o@A4x.2Zeti", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("wJ~H");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "wJ~H");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "wJ~H", 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter2;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(40, charArrayWriter2.size());
      assertEquals(40, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('3');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?|P@_4$/,rUI.");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('\'');
      Character character0 = new Character('\'');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same (''')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
