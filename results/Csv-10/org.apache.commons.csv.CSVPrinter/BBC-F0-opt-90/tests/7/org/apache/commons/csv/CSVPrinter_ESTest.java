/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:06:13 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('z');
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'z';
      charArray0[2] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat.newFormat(';');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("format");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Lv[[Yb<D5m");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B/>*rC$%}6m?Xg>(.m");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("B/>*rC$%}6m?Xg>(.m");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      PipedReader pipedReader0 = new PipedReader(3522);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLException sQLException0 = new SQLException("QXFXT]I8h(,,}", "$Nh", 28, sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLException0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B0{");
      MockFileWriter mockFileWriter0 = new MockFileWriter("B0{");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '*';
      charArray0[2] = 'z';
      charArray0[3] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) '*');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('O');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Lv[[Yb<D5m");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0{");
      MockFileWriter mockFileWriter0 = new MockFileWriter("0{");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|2$iw6plXt;4a[");
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9IN/Ij\"8.T>-");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3TL%#dS *");
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#Ll%A)Gb_ZlMVN3");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('*');
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withEscape(character0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[10];
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(stringWriter0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T%#dT *");
      Character character0 = new Character('l');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('C');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withDelimiter('a');
      Character character1 = Character.valueOf(':');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character1);
      cSVFormat3.withEscape(':');
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat5.withDelimiter(':');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Byte byte0 = new Byte((byte) (-125));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat5;
      objectArray0[6] = (Object) cSVPrinter1;
      objectArray0[7] = (Object) cSVFormat5;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T%#dT *");
      Character character0 = new Character('d');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('C');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withDelimiter('a');
      Character character1 = Character.valueOf(':');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character1);
      cSVFormat3.withEscape(':');
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat5.withDelimiter(':');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Byte byte0 = new Byte((byte) (-125));
      cSVPrinter1.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T%#dT *");
      Character character0 = new Character('h');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('C');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.withDelimiter('a');
      Character character1 = Character.valueOf(':');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character1);
      cSVFormat3.withEscape(':');
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat5.withDelimiter(':');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Byte byte0 = new Byte((byte) (-125));
      cSVPrinter1.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("BCJ^Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'a';
      charArray0[2] = 'E';
      charArray0[3] = 'm';
      charArray0[4] = '%';
      charArray0[5] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "BCJ^Z";
      objectArray0[1] = (Object) ".o4~~";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) 'm';
      objectArray0[4] = (Object) charBuffer0;
      cSVFormat0.withRecordSeparator(';');
      objectArray0[5] = (Object) 'm';
      objectArray0[6] = (Object) 'a';
      objectArray0[7] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3TL%#dS *");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("l cQ&%c}26 'miPm ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?");
      Object[] objectArray0 = new Object[28];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I%;");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('8');
      Character character0 = new Character('!');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('!');
      cSVFormat1.withDelimiter('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      Byte byte0 = new Byte((byte) (-44));
      String string0 = "I";
      SQLTransientException sQLTransientException0 = new SQLTransientException("'i)r)71^!BD'", "I");
      // Undeclared exception!
      try { 
        cSVPrinter1.print(sQLTransientException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",2P&XZ?2#)Ns");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "}";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "}";
      objectArray0[6] = (Object) "zs?f|uGs";
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) "zs?f|uGs";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("}");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "w,YPcI+'`^s W7y4qBF";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("w,YPcI+'`^s W7y4qBF");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CSVFormat.newFormat('J');
      MockFile mockFile0 = new MockFile("w,YPcI+'`^s W7y4qBF");
      String string1 = "";
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Pt%UWPV(GY5D77qpx$");
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.Assertions");
      char[] charArray0 = new char[0];
      cSVFormat3.withRecordSeparator("I%;");
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = (Object) "I%;";
      objectArray0[1] = (Object) "org.apache.commons.csv.Assertions";
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&]z";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter$1";
      stringArray0[2] = "file";
      stringArray0[3] = "JO![DIfhxV|zC";
      stringArray0[4] = "\u0085";
      stringArray0[5] = "229ij6ZHFa)e7hFZ4}";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "C%0~9+\";0{De]`cY'";
      MockPrintStream mockPrintStream0 = new MockPrintStream("C%0~9+\";0{De]`cY'");
      mockPrintStream0.checkError();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('f');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T9#HIp*");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('=');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PB<zn*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      Object[] objectArray0 = new Object[13];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.checkError();
      objectArray0[1] = object0;
      objectArray0[8] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "PB<zn*";
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      HashSet<CharArrayWriter> hashSet0 = new HashSet<CharArrayWriter>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('a');
      hashSet0.add(charArrayWriter1);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('=');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PBK<zn*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      Object[] objectArray0 = new Object[13];
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("[Kt&tZ- .tV4vm)");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('?');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '?';
      charArray0[6] = '?';
      charArray0[7] = '?';
      charArray0[8] = '?';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer1);
      Comparator<ByteArrayOutputStream> comparator0 = (Comparator<ByteArrayOutputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<ByteArrayOutputStream> treeSet0 = new TreeSet<ByteArrayOutputStream>(comparator0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T9#HIp*");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('7');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("3T9#HIp*");
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("3T9#HIp*");
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat6.withEscape('|');
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines(true);
      cSVFormat4.withDelimiter('@');
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat8);
      Integer integer0 = new Integer((-1645));
      cSVFormat8.withNullString("H0UY2");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.print(pipedWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(pipedWriter0, cSVFormat4);
      try { 
        cSVPrinter2.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T9#HIp*");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('7');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("3T9#HIp*");
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("3T9#HIp*");
      cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('T');
      cSVFormat6.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Integer integer0 = new Integer(69);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat2.withDelimiter('T');
      cSVFormat7.withNullString("No header mapping was specified, the record values can't be accessed by name");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printComment("No header mapping was specified, the record values can't be accessed by name");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yE[bw[YXvKhYWl6Qw[");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("p\"0VrX^y", "p\"0VrX^y", (-590), sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLNonTransientConnectionException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLTimeoutException0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) sQLTimeoutException0;
      objectArray0[3] = (Object) cSVPrinter1;
      stringWriter0.write((-1877));
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "yE[bw[YXvKhYWl6Qw[";
      objectArray0[6] = (Object) cSVPrinter0;
      // Undeclared exception!
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3T9#HIp*");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3T9#HIp*");
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('=');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('=');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P'B<zn*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      cSVFormat0.withRecordSeparator("org.apache.commons.csv.ExtendedBufferedReader");
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "P'B<zn*";
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat2.withDelimiter('=');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Integer integer0 = new Integer(43);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("nLTY9Km>1'kl8'\"");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      cSVPrinter1.flush();
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat0;
      cSVFormat0.withRecordSeparator('0');
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.flush();
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = '+';
      charArray0[3] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I%^");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('o');
      cSVFormat4.withQuoteChar('o');
      cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object object2 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVFormat1.toString();
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "I%^";
      objectArray0[8] = object2;
      cSVPrinter0.printRecords(objectArray0);
      Integer integer0 = new Integer(2718);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      Locale locale0 = new Locale("o", "o", "o");
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("[Kt&tZ- .tV4vl)");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      cSVFormat3.withQuoteChar('J');
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet1 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      DataTruncation dataTruncation0 = new DataTruncation(2517, true, true, 727, (-1485), sQLRecoverableException0);
      cSVPrinter0.print(dataTruncation0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      Locale locale0 = new Locale("o", "o", "o");
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("[Kt&tZ- .tV4vl)");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      cSVFormat3.withQuoteChar('J');
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      cSVFormat4.withRecordSeparator("'E>XZTC/<&5=Ty");
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("o");
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      Locale locale0 = new Locale("o", "o", "o");
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat1.withCommentStart('*');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Byte byte0 = new Byte((byte)10);
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.flush();
      cSVPrinter0.print(bufferedOutputStream0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("\u0004`.&SV@K+8", false);
      Long long0 = new Long(0L);
      cSVPrinter0.print(long0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      Locale locale0 = new Locale("o", "o", "o");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Integer integer0 = new Integer((-1518));
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      Byte byte0 = new Byte((byte)99);
      cSVPrinter0.print(byte0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "o";
      objectArray0[3] = (Object) "o";
      objectArray0[4] = (Object) "o";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) stringWriter0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      Locale locale0 = new Locale("1i.KH/dR", "", "Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      Quote quote1 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      cSVFormat2.withNullString("OQX*$Bz=4iKr");
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar(')');
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      objectArray0[6] = (Object) "o";
      objectArray0[7] = (Object) "o";
      objectArray0[8] = (Object) cSVFormat3;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      Locale locale0 = new Locale("o", "o", "o");
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("[Kt&tZ- .tV4vl)");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      cSVFormat4.withQuoteChar('J');
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      Object object0 = new Object();
      cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("o");
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(416);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\"');
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I%^");
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Integer integer0 = new Integer(416);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat6);
      Byte byte0 = new Byte((byte)116);
      cSVPrinter0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) stringWriter0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat3;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      NavigableSet<BufferedWriter> navigableSet0 = treeSet0.descendingSet();
      treeSet0.containsAll(navigableSet0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter1.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter1.flush();
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter0.print(priorityQueue0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("'F{KIM/sPN:}D#z");
      mockPrintStream0.append('r');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      CSVPrinter cSVPrinter3 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Byte byte0 = new Byte((byte)104);
      cSVPrinter2.print(byte0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
      StringWriter stringWriter0 = new StringWriter(951);
      StringWriter stringWriter1 = stringWriter0.append('z');
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("M}IN^D(EM", objectArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray1 = new Object[3];
      stringWriter1.append((CharSequence) "M}IN^D(EM");
      Character character0 = new Character('\"');
      cSVFormat0.withEscape(character0);
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) cSVFormat1;
      mockPrintWriter0.println('+');
      objectArray1[2] = (Object) "M}IN^D(EM";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(951).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("");
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) vector0;
      cSVPrinter0.printRecords(objectArray2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("$");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('O');
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('J');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat2);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Byte byte0 = new Byte((byte)13);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("The comment start character and the quoteChar cannot be the same ('");
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$");
      cSVPrinter0.print("$");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) priorityQueue0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) "format";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) "$";
      objectArray0[8] = (Object) "The comment start character and the quoteChar cannot be the same ('";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat0.withQuoteChar('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedReader0;
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(416);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\"');
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      NavigableSet<BufferedWriter> navigableSet0 = treeSet0.descendingSet();
      treeSet0.containsAll(navigableSet0);
      Character character0 = new Character('O');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      cSVFormat2.withQuoteChar('?');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) navigableSet0;
      objectArray0[5] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter1.printRecords((Iterable<?>) treeSet0);
      Byte byte0 = new Byte((byte)25);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.withQuoteChar('|');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.print((Object) null);
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[0] = (Object) "$";
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "$", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('n');
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.print(mockPrintWriter1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      cSVFormat0.validate();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Character.valueOf('Z');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('k');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat3.withNullString("wrs5vP6A,XmP:");
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "$";
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[0];
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withQuoteChar('c');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(outputStreamWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      Byte byte0 = new Byte((byte)36);
      try { 
        cSVPrinter1.print(byte0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(416);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\"');
      cSVFormat0.withRecordSeparator('\"');
      Integer integer0 = new Integer(5513);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">G)_`0C3MO&'>#?c_", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
      StringWriter stringWriter0 = new StringWriter(951);
      StringWriter stringWriter1 = stringWriter0.append('z');
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("M}IN^D(EM", objectArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray1 = new Object[3];
      stringWriter1.append((CharSequence) "M}IN^D(EM");
      Character character0 = new Character('\"');
      cSVFormat0.withEscape(character0);
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) cSVFormat1;
      mockPrintWriter0.println('+');
      objectArray1[2] = (Object) "M}IN^D(EM";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      String string0 = "";
      cSVPrinter0.printComment(string0);
      cSVPrinter0.printRecords(objectArray0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      ServiceLoader<CharArrayWriter> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      Object object0 = new Object();
      Locale locale0 = new Locale("AVAf6~nix-bLVfy");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "9&m]t ", (Object[]) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayCountry(locale1);
      cSVFormat1.withDelimiter('7');
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Integer integer0 = new Integer(877);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('n');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("9");
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat3);
      Byte byte0 = new Byte((byte)116);
      cSVPrinter1.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "$";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "$", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      mockPrintWriter0.println('H');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      printWriter0.print(90.5041F);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
      cSVPrinter1.printComment("org.apache.commons.csv.CSVFormat");
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Character character1 = new Character('V');
      cSVFormat4.withEscape(character1);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.printComment("Unexpected Token type: ");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.withQuoteChar('|');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      NavigableSet<BufferedWriter> navigableSet0 = treeSet0.descendingSet();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      treeSet0.containsAll(stack0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter1.printRecord((Iterable<?>) navigableSet0);
      cSVPrinter0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter2.printRecord(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      CSVPrinter cSVPrinter3 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter3.print(mockPrintWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('Z');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withNullString((String) null);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('J');
      MockFile mockFile0 = new MockFile("w,YPcI+'`^s W7y4qBF");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat2.withRecordSeparator('n');
      cSVFormat2.withEscape('n');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter1.println();
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";Y#KA~ZS4uR");
      Locale locale0 = Locale.GERMAN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[8];
      mockPrintWriter0.println();
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) ";Y#KA~ZS4uR";
      objectArray0[4] = (Object) "wso*++r&XqWN2j/PIGe";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "wso*++r&XqWN2j/PIGe";
      objectArray0[7] = (Object) ";Y#KA~ZS4uR";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "wso*++r&XqWN2j/PIGe", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('p');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('p');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('p')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[0] = (Object) "$";
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "$", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('n');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      Integer integer0 = new Integer(5513);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printWriter0, cSVFormat2);
      Byte byte0 = new Byte((byte)116);
      cSVPrinter1.print(byte0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat.newFormat('J');
      MockFile mockFile0 = new MockFile("w,YPcI+'`^s W7y4qBF");
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) "w,YPcI+'`^s W7y4qBF";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.print(mockFile0);
      Integer integer0 = new Integer(5513);
      cSVPrinter0.print(objectArray1[2]);
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      Locale locale0 = Locale.ITALY;
      PipedReader pipedReader0 = new PipedReader(106);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedWriter0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat0.withRecordSeparator("bTWe,C'L");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('n');
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter2, cSVFormat0);
      Integer integer0 = new Integer(106);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('v');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter2, cSVFormat3);
      Byte byte0 = new Byte((byte)125);
      Object object1 = new Object();
      mockPrintWriter0.println('-');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) pipedWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.printComment("bTWe,C'L");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
      StringWriter stringWriter0 = new StringWriter(951);
      StringWriter stringWriter1 = stringWriter0.append('z');
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("M}IN^D(EM", objectArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray1 = new Object[3];
      stringWriter1.append((CharSequence) "M}IN^D(EM");
      Character character0 = new Character('\"');
      cSVFormat0.withEscape(character0);
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) cSVFormat1;
      mockPrintWriter0.println('+');
      objectArray1[2] = (Object) "M}IN^D(EM";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat.newFormat('J');
      MockFile mockFile0 = new MockFile("w,YPcI+'`^s W7y4qBF");
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) "w,YPcI+'`^s W7y4qBF";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.print(mockFile0);
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.getOut();
      cSVPrinter0.print(objectArray1[0]);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat.newFormat('J');
      MockFile mockFile0 = new MockFile("w,YPcI+'`^s W7y4qBF");
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) "w,YPcI+'`^s W7y4qBF";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.print(mockFile0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.getOut();
      cSVPrinter0.print(objectArray1[0]);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
      StringWriter stringWriter0 = new StringWriter(951);
      StringWriter stringWriter1 = stringWriter0.append('z');
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("M}IN^D(EM", objectArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object[] objectArray1 = new Object[3];
      stringWriter1.append((CharSequence) "M}IN^D(EM");
      Character character0 = new Character('\"');
      cSVFormat0.withEscape(character0);
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) cSVFormat1;
      mockPrintWriter0.println('+');
      objectArray1[2] = (Object) "M}IN^D(EM";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(416);
      StringWriter stringWriter1 = stringWriter0.append('F');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('M');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('Z');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withNullString((String) null);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat3.withQuoteChar('y');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(startline ");
      cSVFormat0.withIgnoreEmptyLines(true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "(startline ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter1);
      cSVPrinter0.printComment((String) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) fileDescriptor0;
      objectArray0[6] = (Object) mockPrintWriter1;
      cSVPrinter0.printRecords(objectArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      try { 
        byteArrayOutputStream0.writeTo(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "COMMENT";
      stringArray0[1] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('a');
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('~');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "COMMENT");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.print("COMMENT");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('=');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('=');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PB<zn*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("PB<zn*");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[8] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[7] = (Object) "PB<zn*";
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteChar('=');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Integer integer0 = new Integer(59);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("PB<zn*");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat5);
      cSVPrinter1.print(cSVFormat3);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('');
      Integer integer0 = new Integer(1009);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">G)_`0C3MO&'>#?c_", false);
      PrintStream printStream0 = mockPrintStream0.append('e');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yE[bw[YXvKhYWl6Qw[");
      Integer integer0 = new Integer(114);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('F');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Byte byte0 = new Byte((byte) (-67));
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      charArray0[7] = '(';
      charArray0[8] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) byte0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.flush();
      cSVPrinter0.printComment("yE[bw[YXvKhYWl6Qw[");
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('z');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');
      StringWriter stringWriter0 = new StringWriter(951);
      StringWriter stringWriter1 = stringWriter0.append('z');
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      mockPrintWriter0.printf("M}IN^D(EM", objectArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      stringWriter1.append((CharSequence) "M}IN^D(EM");
      Character character0 = new Character('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('z');
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat2);
      Integer integer0 = new Integer((-1581));
      cSVPrinter1.print(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator('M');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('_');
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[1] = (Object) outputStreamWriter0;
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.csv.CSVPrinter$1", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat.newFormat('J');
      MockFile mockFile0 = new MockFile("w,YPcI+'`^s W7y4qBF");
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.mkdirs();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      PriorityQueue<CharArrayReader> priorityQueue0 = new PriorityQueue<CharArrayReader>();
      priorityQueue0.poll();
      treeSet0.descendingSet();
      treeSet0.containsAll(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.flush();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) mockFile0;
      objectArray1[2] = (Object) "w,YPcI+'`^s W7y4qBF";
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.print(mockFile0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "$";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "$", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("RecordSeparator=<");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('H');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      Integer integer0 = new Integer(5513);
      cSVPrinter0.print(integer0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-65);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
