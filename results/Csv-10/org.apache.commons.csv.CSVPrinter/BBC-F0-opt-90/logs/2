* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-90
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 15014
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 1492277310
* Starting evolution
bbc usage percentage is: 90%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:51:00.727 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:51:00.728 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:51:00.728 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:51:00.728 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:51:00.728 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:51:00.729 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:51:00.729 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:51:00.729 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:51:00.729 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:51:00.729 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:51:00.730 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:51:01.652 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:51:30.839 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 604s and 1337 generations, 668380 statements, best individual has fitness: 165.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 159
* Number of covered goals: 147
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 128
* Number of covered goals: 111
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 486
* Number of covered goals: 410
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 128
* Number of covered goals: 105
* Generated 67 tests with total length 405
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:03:10.393 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.94535% of time used, but only 9/67 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 23:03:27.080 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_28_1633647807080
[MASTER] 23:03:27.084 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 23:03:28.644 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:29.314 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:29.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:30.803 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:31.110 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:31.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:32.007 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:32.403 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:33.162 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:34.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_39_tmp__ESTest.test0(CSVPrinter_39_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:34.992 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.isEscaping());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isQuoting());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
assertNotNull(mockPrintStream0);

Quote quote0 = Quote.NON_NUMERIC;
CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.isEscaping());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isQuoting());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getNullString());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('r', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isQuoting());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNotNull(cSVFormat1);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.isEscaping());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isQuoting());
assertFalse(fileDescriptor0.valid());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getNullString());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('r', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isQuoting());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) quote0;
cSVPrinter0.printRecord(objectArray0);
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuoteChar());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.isEscaping());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isQuoting());
assertFalse(fileDescriptor0.valid());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getNullString());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('r', cSVFormat1.getDelimiter());
assertFalse(cSVFormat1.isQuoting());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertEquals(1, objectArray0.length);


[MASTER] 23:03:48.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_63_tmp__ESTest.test0(CSVPrinter_63_tmp__ESTest.java:45)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:48.109 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isNullHandling());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.isEscaping());
assertEquals('\t', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isNullHandling());
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.flush();

[MASTER] 23:04:04.010 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_87_tmp__ESTest.test0(CSVPrinter_87_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:04.011 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNull(cSVFormat0.getQuotePolicy());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertNotNull(cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
assertNotNull(mockPrintWriter0);

CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
assertNull(cSVFormat0.getQuotePolicy());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);

cSVPrinter0.println();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-90/tests/2
* Done!

* Computation finished
