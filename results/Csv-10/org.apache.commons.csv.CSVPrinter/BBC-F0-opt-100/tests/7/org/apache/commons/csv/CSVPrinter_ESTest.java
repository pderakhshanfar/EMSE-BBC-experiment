/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:04:25 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9EmgHyS_ie");
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("9EmgHyS_ie", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("9EmgHyS_ie", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("", stringWriter0.toString());
      
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("9EmgHyS_ie", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("9EmgHyS_ie\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(3, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('a');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('a', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('a', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      cSVPrinter0.print(batchUpdateException0);
      assertEquals(3, intArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('a', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      
      Character character0 = new Character('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('v', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscaping());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      MockFile mockFile0 = new MockFile("E!y3AF;whq:R%~=Y7[");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("E!y3AF;whq:R%~=Y7[", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("E!y3AF;whq:R%~=Y7[", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("E!y3AF;whq:R%~=Y7[", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("E!y3AF;whq:R%~=Y7[", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      
      Object[] objectArray0 = new Object[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("qLh& Sc7N;N1A-@.", "qLh& Sc7N;N1A-@.", 2005, batchUpdateException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("qLh& Sc7N;N1A-@.", sQLTransactionRollbackException0.getSQLState());
      assertEquals("qLh& Sc7N;N1A-@.", sQLTransactionRollbackException0.getMessage());
      assertEquals(2005, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: qLh& Sc7N;N1A-@.", sQLTransactionRollbackException0.toString());
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)batchUpdateException0.initCause(sQLTransactionRollbackException0);
      assertNotNull(batchUpdateException1);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("qLh& Sc7N;N1A-@.", sQLTransactionRollbackException0.getSQLState());
      assertEquals("qLh& Sc7N;N1A-@.", sQLTransactionRollbackException0.getMessage());
      assertEquals(2005, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: qLh& Sc7N;N1A-@.", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      
      objectArray0[4] = (Object) batchUpdateException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      assertNotNull(mockPrintWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('}', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('}', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      
      Object[] objectArray0 = new Object[2];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "sJpI}T`");
      assertNotNull(charBuffer0);
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertEquals("sJpI}T`", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertEquals("sJpI}T`", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((int)';').when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("v", "v", 19, batchUpdateException0);
      assertNotNull(sQLTransientException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(19, sQLTransientException0.getErrorCode());
      assertEquals("v", sQLTransientException0.getSQLState());
      assertEquals("v", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: v", sQLTransientException0.toString());
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)batchUpdateException0.initCause(sQLTransientException0);
      assertNotNull(batchUpdateException1);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(19, sQLTransientException0.getErrorCode());
      assertEquals("v", sQLTransientException0.getSQLState());
      assertEquals("v", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: v", sQLTransientException0.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpecte Quote vlue: ");
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("KH", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, intArray0.length);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: KH", batchUpdateException0.toString());
      assertEquals("KH", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {}, intArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.Quote");
      assertNotNull(charBuffer0);
      assertEquals(28, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(28, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(28, charBuffer0.length());
      assertEquals("org.apache.commons.csv.Quote", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(28, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertEquals(28, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(28, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(28, charBuffer0.length());
      assertEquals("org.apache.commons.csv.Quote", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(28, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      CharBuffer charBuffer0 = CharBuffer.allocate('5');
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.limit());
      assertEquals(53, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.limit());
      assertEquals(53, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      cSVPrinter0.print((Object) null);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(51, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.position());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(51, charBuffer0.length());
      
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>(67);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      boolean boolean0 = hashSet0.add(sQLTransientConnectionException0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertTrue(boolean0);
      assertTrue(hashSet0.contains(sQLTransientConnectionException0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M_%l$&yh");
      assertNotNull(mockPrintWriter0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      assertNotNull(inputStreamReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      assertNotNull(cSVParser0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertFalse(cSVParser0.isClosed());
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.String@0000000003\tKH\\\tKH\\");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(35, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(35, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(35, charBuffer0.length());
      assertEquals(35, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(charBuffer0.hasArray());
      assertEquals(35, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(35, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(35, charBuffer0.length());
      assertEquals(35, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (int[]) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(batchUpdateException0));
      
      boolean boolean0 = arrayDeque0.add(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(batchUpdateException0));
      
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      
      String[] stringArray0 = new String[3];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "KH");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("KH", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.capacity());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("KH", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      
      CharBuffer charBuffer0 = CharBuffer.allocate('5');
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(53, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(53, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals(0, charBuffer0.position());
      assertEquals(53, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(53, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(53, charBuffer0.limit());
      assertEquals(53, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(53, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(53, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(53, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpecte Quote vlue: ");
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscaping());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      
      Object[] objectArray0 = new Object[9];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(10, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.length());
      assertEquals(10, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(10, charBuffer1.remaining());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      assertNotNull(cSVPrinter0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(10, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.length());
      assertEquals(10, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(10, charBuffer1.remaining());
      
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      
      CharBuffer charBuffer0 = CharBuffer.allocate('5');
      assertNotNull(charBuffer0);
      assertEquals(53, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(53, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(53, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(53, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(53, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(53, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(53, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(53, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(53, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(53, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(53, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(53, charBuffer1.limit());
      assertEquals(53, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      
      LinkedHashSet<ByteArrayOutputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayOutputStream>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('#', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      assertNotNull(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('#', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('#', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('#', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Fu5HYR,\"4=UqIT");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('#', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.remaining());
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('#', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('9', (char)cSVFormat1.getCommentStart());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('9', (char)cSVFormat1.getCommentStart());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('9', (char)cSVFormat1.getCommentStart());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "KH");
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("KH", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertNotNull(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(2, charBuffer1.remaining());
      assertEquals("KH", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.limit());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(2, charBuffer1.remaining());
      assertEquals("KH", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedOutputStream0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print("+90d%Q}iai+v?_Yt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      assertNotNull(bufferedWriter0);
      
      try { 
        cSVPrinter0.print(bufferedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      MockFile mockFile0 = new MockFile("E!y3AF;whq:R%~=Y7[");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("E!y3AF;whq:R%~=Y7[", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("E!y3AF;whq:R%~=Y7[", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      Character character0 = Character.valueOf('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('/', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('/');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals('/', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('/', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals('/', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoting());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.Token");
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('/')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CharBuffer charBuffer0 = CharBuffer.allocate('5');
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.limit());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(53, charBuffer0.length());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(53, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.limit());
      assertEquals(53, charBuffer0.capacity());
      assertEquals(53, charBuffer0.length());
      
      LinkedHashSet<ByteArrayOutputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayOutputStream>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      boolean boolean0 = linkedHashSet0.add(byteArrayOutputStream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(byteArrayOutputStream0));
      
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(42, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(53, charBuffer0.limit());
      assertEquals(53, charBuffer0.capacity());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(byteArrayOutputStream0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "KH");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("KH", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertNotNull(cSVPrinter0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("KH", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(39).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      PriorityQueue<BufferedInputStream> priorityQueue0 = new PriorityQueue<BufferedInputStream>();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 2676);
      priorityQueue0.add(bufferedInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(40, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      ArrayDeque<PipedReader> arrayDeque0 = new ArrayDeque<PipedReader>();
      ArrayList<PipedReader> arrayList0 = new ArrayList<PipedReader>(arrayDeque0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.println();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('t');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      assertEquals("t Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\nt > SkipHeaderRecord:false\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('t');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertEquals("t Delimiter=<\t> Escape=<> RecordSeparator=<\nt > SkipHeaderRecord:false\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter0.print(outputStreamWriter0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.printComment("format");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\r");
      assertEquals("U \nU \n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      Character character0 = new Character('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuffer0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      assertEquals("'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: ", stringBuffer0.toString());
      assertEquals("'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: 'Unexpected Quote value: ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"o");
      String string0 = cSVFormat1.format(stringArray0);
      assertEquals("\"\"\"o\",\"\"\"o\",\"\"\"o\"", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]>S<GocPHU9N7{5,`");
      String string0 = cSVFormat1.format(stringArray0);
      assertEquals("\"]>S<GocPHU9N7{5,`\",\"]>S<GocPHU9N7{5,`\",\"]>S<GocPHU9N7{5,`\"", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?A gq>tdD^\"(#MwEti");
      String string0 = cSVFormat1.format(stringArray0);
      assertEquals("\"?A gq>tdD^\"\"(#MwEti\",\"?A gq>tdD^\"\"(#MwEti\",\"?A gq>tdD^\"\"(#MwEti\"", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0QyQxG2b({m*wKC");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0QyQxG2b({m*wKC");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('t');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('*');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.print(character0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M_%l$&yh");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.print(character0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(20, charArrayWriter0.size());
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Integer integer0 = new Integer(44);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "KH";
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "(");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\nexpected Quote value: ");
      String string0 = cSVFormat1.format(stringArray0);
      assertEquals("\\nexpected Quote value: \t\\nexpected Quote value: \t\\nexpected Quote value:", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('>');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("KH");
      cSVPrinter0.print(sQLTransactionRollbackException0);
      assertEquals(51, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}3xsz)");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "3 sc)");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "sJpI}T`");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintWriter0, appendable0);
  }
}
