* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-30
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 13892
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 1805604543
* Starting evolution
bbc usage percentage is: 30%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:51:04.830 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:51:04.830 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:51:04.831 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:51:04.832 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:51:06.689 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:51:16.768 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 602s and 1194 generations, 694906 statements, best individual has fitness: 156.0
* Minimizing test suite
[MASTER] 23:02:09.018 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 159
* Number of covered goals: 148
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 128
* Number of covered goals: 112
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 486
* Number of covered goals: 414
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 128
* Number of covered goals: 106
* Generated 94 tests with total length 1718
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:02:50.261 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67375% of time used, but only 25/94 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 23:03:11.003 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 23:03:11.003 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_75_1633647791003
[MASTER] 23:03:12.018 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:12.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:12.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:12.969 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:13.255 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:13.421 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:03:18.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_102_tmp__ESTest.test0(CSVPrinter_102_tmp__ESTest.java:28)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:18.605 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getCommentStart());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getCommentStart());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());

Object[] objectArray0 = new Object[9];
objectArray0[0] = (Object) mockFileWriter0;
objectArray0[1] = (Object) cSVPrinter0;
objectArray0[2] = (Object) cSVPrinter0;
objectArray0[3] = (Object) cSVPrinter0;
objectArray0[4] = (Object) cSVFormat0;
objectArray0[5] = (Object) fileDescriptor0;
objectArray0[6] = (Object) cSVPrinter0;
objectArray0[7] = (Object) mockFileWriter0;
Object object0 = new Object();
assertNotNull(object0);

objectArray0[8] = object0;
cSVPrinter0.printRecords(objectArray0);

[MASTER] 23:03:27.000 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_110_tmp__ESTest.test0(CSVPrinter_110_tmp__ESTest.java:34)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:27.001 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNotNull(cSVFormat0);
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());

Object[] objectArray0 = new Object[9];
objectArray0[0] = (Object) mockFileWriter0;
objectArray0[1] = (Object) cSVPrinter0;
objectArray0[6] = (Object) cSVPrinter0;
Object object0 = new Object();
assertNotNull(object0);

String string0 = cSVFormat0.format(objectArray0);
assertNotNull(string0);
assertEquals(9, objectArray0.length);
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());

CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter1);
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());

HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
assertNotNull(hashSet0);
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());

cSVPrinter1.printRecords((Iterable<?>) hashSet0);
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
assertNotSame(cSVPrinter1, cSVPrinter0);
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());

ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
cSVPrinter1.printRecords(resultSet0);

[MASTER] 23:03:30.599 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_112_tmp__ESTest.test0(CSVPrinter_112_tmp__ESTest.java:240)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:30.606 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertNotNull(cSVFormat0);
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());

CSVFormat cSVFormat1 = CSVFormat.newFormat('b');
assertNotNull(cSVFormat1);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('b', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getEscape());

CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('b');
assertNotNull(cSVFormat2);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertEquals('b', (char)cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getEscape());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.isCommentingEnabled());

char[] charArray0 = new char[1];
charArray0[0] = 'b';
Object[] objectArray0 = new Object[0];
String string0 = cSVFormat1.format(objectArray0);
assertNotNull(string0);
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertEquals("", string0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertEquals(0, objectArray0.length);
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertEquals('b', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getEscape());

CharBuffer charBuffer0 = CharBuffer.allocate(2252);
assertNotNull(charBuffer0);
assertEquals(0, charBuffer0.position());
assertEquals(2252, charBuffer0.remaining());
assertEquals(0, charBuffer0.arrayOffset());
assertFalse(charBuffer0.isDirect());
assertFalse(charBuffer0.isReadOnly());
assertEquals(2252, charBuffer0.limit());
assertTrue(charBuffer0.hasArray());
assertEquals(2252, charBuffer0.capacity());
assertTrue(charBuffer0.hasRemaining());
assertEquals(2252, charBuffer0.length());

CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Q");
assertNotNull(cSVFormat3);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat1);
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertEquals('b', (char)cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getEscape());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.isCommentingEnabled());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isNullHandling());
assertNull(cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getEscape());
assertEquals("Q", cSVFormat3.getRecordSeparator());
assertEquals('b', (char)cSVFormat3.getCommentStart());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertEquals(',', cSVFormat3.getDelimiter());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());

CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertEquals(0, charBuffer0.position());
assertEquals(2252, charBuffer0.remaining());
assertEquals(0, charBuffer0.arrayOffset());
assertFalse(charBuffer0.isDirect());
assertFalse(charBuffer0.isReadOnly());
assertEquals(2252, charBuffer0.limit());
assertTrue(charBuffer0.hasArray());
assertEquals(2252, charBuffer0.capacity());
assertTrue(charBuffer0.hasRemaining());
assertEquals(2252, charBuffer0.length());

HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
assertNotNull(hashSet0);
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter1 = cSVFormat3.print(mockFileWriter0);
assertNotNull(cSVPrinter1);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVPrinter1, cSVPrinter0);
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertTrue(cSVFormat0.isQuoting());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals(',', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertEquals('b', (char)cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getEscape());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertFalse(cSVFormat2.isNullHandling());
assertTrue(cSVFormat2.isCommentingEnabled());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isNullHandling());
assertNull(cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getEscape());
assertEquals("Q", cSVFormat3.getRecordSeparator());
assertEquals('b', (char)cSVFormat3.getCommentStart());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertEquals(',', cSVFormat3.getDelimiter());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(fileDescriptor0.valid());

cSVPrinter0.printRecords((Iterable<?>) null);

[MASTER] 23:03:38.008 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_115_tmp__ESTest.test0(CSVPrinter_115_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:03:38.009 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNotNull(cSVFormat0);
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter0);
assertFalse(fileDescriptor0.valid());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

Object[] objectArray0 = new Object[9];
objectArray0[0] = (Object) mockFileWriter0;
objectArray0[1] = (Object) cSVPrinter0;
objectArray0[6] = (Object) cSVPrinter0;
Object object0 = new Object();
assertNotNull(object0);

String string0 = cSVFormat0.format(objectArray0);
assertNotNull(string0);
assertEquals(9, objectArray0.length);
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
assertNotNull(cSVPrinter1);
assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
assertNotSame(cSVPrinter1, cSVPrinter0);
assertFalse(fileDescriptor0.valid());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat0);
assertNotNull(cSVPrinter2);
assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
assertFalse(fileDescriptor0.valid());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.evosuite.runtime.mock.java.io.MockFileWriter@0000000003,org.apache.commons.csv.CSVPrinter@0000000001,,,,,org.apache.commons.csv.CSVPrinter@0000000001,,");
assertFalse(boolean0);

PipedWriter pipedWriter0 = new PipedWriter();
assertNotNull(pipedWriter0);

cSVPrinter2.printComment("org.evosuite.runtime.mock.java.io.MockFileWriter@0000000003,org.apache.commons.csv.CSVPrinter@0000000001,,,,,org.apache.commons.csv.CSVPrinter@0000000001,,");
assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
assertNotSame(cSVPrinter2, cSVPrinter0);
assertNotSame(cSVPrinter2, cSVPrinter1);
assertFalse(fileDescriptor0.valid());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());

cSVPrinter2.close();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-30/tests/3
* Done!

* Computation finished
