* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-30
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 15424
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 3517045550
* Starting evolution
bbc usage percentage is: 30%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:51:37.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:51:37.062 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:51:37.062 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:51:37.062 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:51:38.794 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:51:39.002 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:52:26.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 22:58:47.894 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 602s and 1365 generations, 716933 statements, best individual has fitness: 159.0
* Minimizing test suite
[MASTER] 23:02:51.142 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 159
* Number of covered goals: 148
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 128
* Number of covered goals: 112
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 486
* Number of covered goals: 409
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 128
* Number of covered goals: 106
* Generated 83 tests with total length 1467
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:03:46.348 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7663333333333333% of time used, but only 10/83 tests minimized), falling back to using all assertions
[MASTER] 23:04:01.241 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
[MASTER] 23:04:46.683 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:50.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_95_tmp__ESTest.test0(CSVPrinter_95_tmp__ESTest.java:323)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:50.660 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\"');
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getEscape());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isQuoting());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNotNull(cSVFormat1);
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('&');
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getEscape());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isQuoting());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals('&', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.isQuoting());
assertNotNull(cSVFormat2);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);

CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getEscape());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isQuoting());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals('&', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentStart());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertNull(cSVFormat3.getEscape());
assertEquals('&', cSVFormat3.getDelimiter());
assertFalse(cSVFormat3.isCommentingEnabled());
assertNull(cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isNullHandling());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNotNull(cSVFormat3);
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);

CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getEscape());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isQuoting());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals('&', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentStart());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertNull(cSVFormat3.getEscape());
assertEquals('&', cSVFormat3.getDelimiter());
assertFalse(cSVFormat3.isCommentingEnabled());
assertNull(cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isNullHandling());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertNull(cSVFormat4.getCommentStart());
assertTrue(cSVFormat4.getSkipHeaderRecord());
assertEquals('&', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getEscape());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertTrue(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.isEscaping());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getNullString());
assertNull(cSVFormat4.getQuotePolicy());
assertFalse(cSVFormat4.isCommentingEnabled());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isNullHandling());
assertNotNull(cSVFormat4);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getEscape());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getEscape());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isQuoting());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals('&', cSVFormat2.getDelimiter());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentStart());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertNull(cSVFormat3.getEscape());
assertEquals('&', cSVFormat3.getDelimiter());
assertFalse(cSVFormat3.isCommentingEnabled());
assertNull(cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isNullHandling());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertNull(cSVFormat4.getCommentStart());
assertTrue(cSVFormat4.getSkipHeaderRecord());
assertEquals('&', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getEscape());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertTrue(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.isEscaping());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getNullString());
assertNull(cSVFormat4.getQuotePolicy());
assertFalse(cSVFormat4.isCommentingEnabled());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isNullHandling());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertTrue(cSVFormat2.equals((Object)cSVFormat3));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);

cSVPrinter0.print(mockFileWriter0);

[MASTER] 23:04:57.673 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_107_tmp__ESTest.test0(CSVPrinter_107_tmp__ESTest.java:245)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:57.683 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.RFC4180;
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('u');
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertEquals('u', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuotePolicy());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getEscape());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.isQuoting());
assertNotNull(cSVFormat1);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('u');
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getEscape());
assertEquals('u', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isNullHandling());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertNotNull(cSVFormat2);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);

CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.isQuoting());
assertNull(cSVFormat2.getEscape());
assertEquals('u', cSVFormat2.getDelimiter());
assertFalse(cSVFormat2.isNullHandling());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals('u', cSVFormat3.getDelimiter());
assertTrue(cSVFormat3.isQuoting());
assertFalse(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertNull(cSVFormat3.getCommentStart());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertNull(cSVFormat3.getEscape());
assertFalse(cSVFormat3.isCommentingEnabled());
assertNull(cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isNullHandling());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNotNull(cSVFormat3);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);

CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertEquals('u', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuotePolicy());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getEscape());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.isQuoting());
assertTrue(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.isEscaping());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertNull(cSVFormat4.getQuotePolicy());
assertEquals('u', (char)cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.isNullHandling());
assertTrue(cSVFormat4.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isCommentingEnabled());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentStart());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getNullString());
assertNotNull(cSVFormat4);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat1);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertEquals('u', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getQuotePolicy());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getEscape());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.isQuoting());
assertTrue(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.isEscaping());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertNull(cSVFormat4.getQuotePolicy());
assertEquals('u', (char)cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.isNullHandling());
assertTrue(cSVFormat4.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isCommentingEnabled());
assertEquals(',', cSVFormat4.getDelimiter());
assertNull(cSVFormat4.getCommentStart());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getNullString());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat1);

cSVPrinter0.printRecord((Iterable<?>) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-30/tests/6
* Done!

* Computation finished
