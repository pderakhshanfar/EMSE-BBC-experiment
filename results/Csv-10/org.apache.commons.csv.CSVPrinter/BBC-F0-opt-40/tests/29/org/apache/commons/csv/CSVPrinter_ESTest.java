/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:32:23 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.file.Path;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1952);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9w=Mt&VrGo3PkC0-}");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?Z");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('b');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter1.printRecords((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("k");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k", "k");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('V');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("0u");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0u");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3/paysCqc`v(2");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[2] = (Object) "</7]/f";
      objectArray0[3] = object0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[4] = null;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?Z");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{|3Ev?!>=i-I:rgT");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|", false);
      cSVPrinter0.print(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "{|3Ev?!>=i-I:rgT";
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintStream0.close();
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "?Z";
      objectArray0[5] = null;
      objectArray0[6] = (Object) "|";
      objectArray0[7] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?Z");
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "?Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("?Z");
      Integer integer0 = new Integer(1237);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!Z~!");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      sQLRecoverableException0.getSuppressed();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat1.withEscape('.');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!Z~!");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?Z");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("?Z", "oJ#]B0A4'-)c!@}Ut", batchUpdateException0);
      batchUpdateException0.initCause(sQLTransientException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3028);
      MockPrintStream mockPrintStream0 = new MockPrintStream("qU!#Yy}%= Bhv:@{n");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^I1ypq6nY*<");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "qU!#Yy}%= Bhv:@{n";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      Character character0 = Character.valueOf('N');
      cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("nGM1s~f5c`Qyaoh+ ");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat0.withEscape('U');
      cSVFormat3.print(charBuffer0);
      Character character1 = new Character('3');
      cSVFormat3.withQuoteChar(character1);
      cSVFormat0.print(charBuffer0);
      cSVFormat3.withRecordSeparator('3');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      Character character0 = Character.valueOf('C');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[0] = objectArray0[0];
      objectArray0[2] = (Object) character0;
      objectArray0[3] = objectArray0[0];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("</7]/f");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment("</7]/f");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      Character character0 = Character.valueOf('C');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[0] = objectArray0[0];
      objectArray0[2] = (Object) character0;
      objectArray0[3] = objectArray0[0];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("E)m=tlW_ yIL");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('o');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.printComment("E)m=tlW_ yIL");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!Z~!");
      mockFile0.toPath();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[3] = (Object) consumer0;
      mockFileWriter0.write(32);
      sQLRecoverableException0.getSuppressed();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      cSVFormat0.withDelimiter('2');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3019);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('3');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = new Character('3');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('>');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      Object object0 = new Object();
      Character character1 = Character.valueOf('X');
      cSVFormat0.withCommentStart(character1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      cSVFormat6.validate();
      CSVFormat cSVFormat7 = cSVFormat6.withNullString(",~vAMr|Zsw?(>/JmN7");
      CSVPrinter cSVPrinter1 = cSVFormat7.print(charBuffer0);
      cSVPrinter0.printComment((String) null);
      cSVFormat6.print(charBuffer0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) character0;
      cSVFormat2.withNullString("'z~a[^?u]+!6Sl");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?*^IRjl5}V>Ej");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" hY12bztFqK/m");
      cSVFormat0.withDelimiter('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.printComment((String) null);
      cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "'z~a[^?u]+!6Sl";
      Object object2 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      objectArray0[4] = object2;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) batchUpdateException0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("Mapping for %s not found, expected one of %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.Mapping for %s not found, expected one of %s
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('s');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Nc4Q0W}N-r6w");
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.getOut();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = batchUpdateException0.getStackTrace();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stackTraceElementArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ";[1");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) ";[1";
      objectArray0[6] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "!Z~!";
      MockFile mockFile0 = new MockFile("!Z~!");
      mockFile0.toPath();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      sQLRecoverableException0.getSuppressed();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printComment("nwCu/u`0@5nJ:.)lV");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter1.printRecords((Iterable<?>) sQLRecoverableException0);
      try { 
        cSVPrinter1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "?*^IRjl5}V>Ej");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Object[]) stackTraceElementArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      cSVFormat1.print(printWriter0);
      cSVPrinter0.printRecord((Object[]) stackTraceElementArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!Z~!");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      cSVPrinter0.print(mockFileWriter0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) consumer0;
      objectArray0[3] = (Object) consumer0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) sQLNonTransientException0;
      cSVPrinter0.printRecords(objectArray0);
      sQLRecoverableException0.getSuppressed();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('2');
      cSVPrinter0.close();
      cSVPrinter0.printComment("NONE");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      String string0 = "out";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      SQLException sQLException0 = new SQLException("out", (String) null, 3014, sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("out", "out", sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("out", sQLNonTransientConnectionException0);
      MockThrowable.getDefaultStackTrace();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      Character.valueOf('N');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Character character0 = new Character('o');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString((String) null);
      cSVFormat0.withDelimiter('S');
      cSVPrinter0.close();
      cSVPrinter0.printComment("NONE");
      cSVFormat3.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat4);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) character0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      cSVPrinter0.printRecords(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("'z~a[^?u]+!6Sl");
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('U');
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter");
      cSVFormat3.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat4);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object object0 = new Object();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      SQLException sQLException0 = new SQLException("5h-JBo#7", "$", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.printRecords((Object[]) stackTraceElementArray0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      cSVPrinter0.printRecords((Object[]) stackTraceElementArray0);
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("eq8wJE101A90v");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 92);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(92).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z~!");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Object[]) stackTraceElementArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.close();
      cSVPrinter0.printComment("");
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLInvalidAuthorizationSpecException0;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      cSVPrinter2.printRecords(objectArray0);
      cSVPrinter2.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "OEAy'ep.;i&}");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("!Z~!");
      cSVPrinter0.print(mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("eq8wJE101A90v");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 92);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z~!");
      Path path0 = mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withCommentStart('U');
      Character character0 = Character.valueOf('U');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.getOut();
      cSVPrinter1.printComment("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) path0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "OEAy'ep.;i&}";
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "?*^IRjl5}V>Ej");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      mockPrintWriter0.checkError();
      mockFile0.setWritable(false, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord((Object[]) stackTraceElementArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withEscape('7');
      cSVFormat0.withCommentStart('3');
      Character.valueOf('3');
      charBuffer0.rewind();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('3');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('3');
      Quote quote0 = Quote.ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("Unexpected Quote value: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('3');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      Appendable appendable0 = cSVPrinter1.getOut();
      cSVFormat1.withNullString("|t=(>p e%DZ82I&I");
      cSVPrinter1.printComment("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4**YzR", "", 3041);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("4**YzR", "", 3041);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException1);
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      cSVPrinter0.printComment((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      CSVPrinter cSVPrinter2 = new CSVPrinter(appendable0, cSVFormat3);
      cSVPrinter1.printRecords((Object[]) stackTraceElementArray0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(appendable0, cSVFormat0);
      CSVPrinter cSVPrinter4 = cSVFormat3.print(appendable0);
      cSVPrinter4.printRecords((Object[]) stackTraceElementArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentStart('3');
      Character.valueOf('3');
      charBuffer0.flip();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('3');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.getOut();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.printComment("Unexpected Quote value: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) appendable0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z!");
      Path path0 = mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Object[]) stackTraceElementArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.close();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter1.printRecords((Object[]) stackTraceElementArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter2.printRecords((Iterable<?>) path0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 22;
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      String string0 = "Unexpected Quote value: ";
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*!_(^th+");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat1.withCommentStart('3');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("*!_(^th+");
      Character.valueOf('N');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('N');
      cSVFormat3.withEscape(character0);
      CSVPrinter cSVPrinter1 = null;
      try {
        cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?*^IRjl5}V>Ej");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, batchUpdateException0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" hY12bztFqK/m");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.printComment((String) null);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      Character character0 = new Character('U');
      cSVFormat0.withCommentStart(character0);
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "'z~a[^?u]+!6Sl";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) batchUpdateException0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.print(mockPrintWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter2.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('h');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('(');
      Character.valueOf('r');
      Character character0 = Character.valueOf('(');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = object0;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat0.withNullString("f(OQ0c");
      cSVFormat1.withDelimiter('N');
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apanhe.commons.csvCCSVPrinter");
      // Undeclared exception!
      try { 
        cSVFormat3.print(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('(')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "?*^IRjl5}V>Ej");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecords((Object[]) stackTraceElementArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      cSVPrinter0.close();
      cSVPrinter0.printComment("");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      String string0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.printComment("Unexpected Quote value: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      ArrayList<DataInputStream> arrayList0 = new ArrayList<DataInputStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("tm2H2[QOc.qJQ]");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 3041, sQLTransientException0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printComment("!Z!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment(" hT6#3=5MW");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3036);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) appendable0;
      objectArray0[7] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator('k');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('R');
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'R';
      intArray0[1] = 65;
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) 'R';
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      Character.valueOf(':');
      Character character0 = Character.valueOf('X');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      LinkedHashSet<Float> linkedHashSet0 = new LinkedHashSet<Float>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator('k');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('R');
      StringWriter stringWriter0 = new StringWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'R';
      intArray0[1] = 65;
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) 'R';
      intArray0[5] = (int) 'R';
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientConnectionException0);
      vector0.add(batchUpdateException0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      Character character0 = Character.valueOf('`');
      cSVFormat1.withEscape(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("org.apache.commons.csv.Constants");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      objectArray0[1] = (Object) "org.apache.commons.csv.Constants";
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.Constants");
      cSVPrinter0.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('$');
      String string0 = "lL@yAF{PWT4@pku@au/";
      File file0 = MockFile.createTempFile("lL@yAF{PWT4@pku@au/", "lL@yAF{PWT4@pku@au/", (File) null);
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.setLastModified('$');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(97);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('h');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('*');
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = '*';
      charArray0[4] = 'w';
      charArrayWriter2.write(charArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('w');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat4);
      cSVPrinter0.flush();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.print((Object) "format");
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('0');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) "format";
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVFormat1.validate();
      objectArray0[6] = (Object) "format";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        charBuffer0.put(3041, '&');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character.valueOf('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      ArrayDeque<BufferedWriter> arrayDeque0 = new ArrayDeque<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printComment("OEAy'ep.;i&}");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = (Object) "OEAy'ep.;i&}";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("p");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z!");
      Path path0 = mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      cSVPrinter1.printRecords((Iterable<?>) stack0);
      cSVPrinter1.flush();
      cSVPrinter0.printRecords((Iterable<?>) path0);
      cSVPrinter0.printComment("9}_Q-xA!JG,j");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "!Z!";
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      stack0.add(bufferedOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printComment("!Z!");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OEAy'ep.;i&}", "!Z!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      mockFile0.setLastModified(0L);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      mockFile0.toURI();
      Stack<BufferedOutputStream> stack0 = new Stack<BufferedOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      cSVPrinter0.printComment("!Z!");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'x';
      charArray0[2] = '_';
      charArray0[3] = '%';
      charArray0[4] = '6';
      charArray0[5] = 'N';
      charArray0[6] = 'A';
      charArray0[7] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = ')';
      charArray0[7] = ')';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append(')');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat0);
      stringWriter0.write("aTZ");
      stringWriter1.write("arL", 0, 0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3041);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('3');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) appendable0;
      objectArray0[7] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?Z");
      PrintStream printStream0 = mockPrintStream0.append('');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.println();
      ArrayDeque<Short> arrayDeque0 = new ArrayDeque<Short>(620);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.print((Object) "format");
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('0');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) "format";
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVFormat1.validate();
      objectArray0[6] = (Object) "format";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*!_(^th+");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.flush();
      Object object0 = new Object();
      objectArray0[1] = object0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      cSVFormat0.withSkipHeaderRecord(true);
      SQLException sQLException0 = new SQLException("5h-JBo#7", "*!_(^th+", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      sQLNonTransientConnectionException0.getStackTrace();
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer1);
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat0.withDelimiter('j');
      cSVPrinter0.close();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      pipedWriter0.close();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
}
