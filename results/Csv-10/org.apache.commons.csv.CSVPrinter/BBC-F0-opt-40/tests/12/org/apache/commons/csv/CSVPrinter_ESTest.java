/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:49:29 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}7");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Byte byte0 = new Byte((byte)2);
      cSVPrinter0.print(byte0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 118);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
      CSVParser cSVParser0 = cSVFormat2.parse(inputStreamReader0);
      cSVPrinter0.println();
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      mockPrintStream0.print(0.0F);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[13];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("C\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      PriorityQueue<CharArrayWriter> priorityQueue0 = new PriorityQueue<CharArrayWriter>((Collection<? extends CharArrayWriter>) treeSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("bp-cXnhH;N$", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLInvalidAuthorizationSpecException0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      objectArray0[2] = (Object) sQLNonTransientConnectionException0;
      objectArray0[3] = (Object) sQLNonTransientConnectionException0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('N');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Vector<FilterOutputStream> vector0 = new Vector<FilterOutputStream>(27);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('%');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("*\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('%');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printComment("\rP\n");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print("\r\n");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9^{*h)pq");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      Character character0 = new Character('4');
      Character character1 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) character1;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.String@0000000003\tjava.lang.Character@0000000004\torg.apache.commons.csv.CSVFormat@0000000005");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) cSVPrinter0;
      objectArray1[1] = (Object) cSVPrinter0;
      objectArray1[2] = (Object) "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray1[3] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0R@x\"wgBa:nR");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat1.withRecordSeparator('*');
      LinkedHashSet<DataOutputStream> linkedHashSet0 = new LinkedHashSet<DataOutputStream>();
      LinkedList<DataOutputStream> linkedList0 = new LinkedList<DataOutputStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('m');
      Character character0 = new Character('/');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat0;
      Object[] objectArray1 = new Object[8];
      cSVFormat2.format(objectArray1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVPrinter0.flush();
      cSVPrinter0.printComment("mm\tmm\tmm\tmm\tmm\tmm\tmm\tmm");
      HashSet<FilterOutputStream> hashSet0 = null;
      try {
        hashSet0 = new HashSet<FilterOutputStream>((-2380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2380
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "R=dck(@g@o5v";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("R=dck(@g@o5v");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("R=dck(@g@o5v", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('');
      Character character1 = Character.valueOf('');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('m');
      cSVFormat2.withQuoteChar('-');
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[31];
      Character.valueOf('-');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{7dmuX!qicPi:]");
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[24];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("/Kdo:u|qy/KPpi:o");
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("xB&}");
      char[] charArray0 = new char[2];
      charArray0[1] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Unexpecte Tfken type: ");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("]CHh?f'Sd_=Hmz83A");
      Object[] objectArray0 = new Object[1];
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      HashSet<PushbackReader> hashSet0 = new HashSet<PushbackReader>();
      Vector<PushbackReader> vector0 = new Vector<PushbackReader>(hashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ASxkCzyM1R?ou- H");
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      Character.valueOf('\u0086');
      CSVFormat.newFormat('\u0086');
      ClassLoader.getSystemClassLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withRecordSeparator(',');
      Character character0 = Character.valueOf('\u0086');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withDelimiter('P');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("7Kdo:mu|!qyiKPpi:6");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@B\",)gNd.G \u0001", "@B\",)gNd.G \u0001");
      MockPrintStream mockPrintStream0 = new MockPrintStream("@B\",)gNd.G \u0001");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@B\",)gNd.G \u0001");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@B{,)gNd.G \u0001", "@B{,)gNd.G \u0001");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@B{,)gNd.G \u0001", 8, 8);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) mockFile0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pushbackInputStream0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "R=dck(@g@o5v";
      MockFileWriter mockFileWriter0 = new MockFileWriter("R=dck(@g@o5v", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(65);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withEscape(' ');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CharBuffer charBuffer0 = CharBuffer.allocate(24);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[X+-");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('N');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) null;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "QD.BzYS&;]=(j";
      MockFileWriter mockFileWriter0 = new MockFileWriter("QD.BzYS&;]=(j");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('g');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      mockFileWriter0.close();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('g');
      cSVFormat1.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVFormat2.withRecordSeparator((String) null);
      LinkedHashSet<Byte> linkedHashSet0 = new LinkedHashSet<Byte>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.getOut();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      mockPrintWriter0.print(481.747933318);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      Stack<PipedInputStream> stack0 = new Stack<PipedInputStream>();
      cSVPrinter1.printRecords((Iterable<?>) stack0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter2.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("/Kdo:mu|!Fqy=KPpi:6");
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Long long0 = Long.getLong("`*p.RZ%fZ*p", (-470L));
      cSVPrinter0.print(long0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('z');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Float float0 = new Float((-447.299037));
      try { 
        cSVPrinter0.print(float0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "Unexpected Token type: ";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) "Unexpected Token type: ";
      objectArray0[8] = (Object) cSVFormat0;
      objectArray0[8] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "Unexpected Token type: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Unexpected Token type: \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      cSVFormat3.withNullString("/Kdo:mu|!Fqy=KPpi:6");
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.withEscape('{');
      charBuffer0.compact();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator('Q');
      Character character0 = new Character('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) charArrayWriter0;
      cSVFormat1.format(objectArray0);
      cSVFormat0.validate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Unexpected Quote value: ", sQLNonTransientConnectionException0);
      StringWriter stringWriter0 = new StringWriter();
      sQLNonTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^kz", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('f');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^kz");
      Quote quote0 = Quote.MINIMAL;
      cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('g');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("^kz");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("^kz");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('M');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.print(mockPrintStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('\u0089');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printComment("^kz");
      cSVFormat2.withSkipHeaderRecord(true);
      cSVPrinter0.print(mockFile0);
      ArrayDeque<PipedWriter> arrayDeque0 = new ArrayDeque<PipedWriter>(27);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printComment("(line ");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('M');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('\u0089');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printComment("^kz");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLNonTransientConnectionException0);
      StringWriter stringWriter0 = new StringWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('M');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('|');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printComment("^kz");
      mockPrintStream0.println('p');
      ArrayDeque<PipedWriter> arrayDeque0 = new ArrayDeque<PipedWriter>(27);
      PipedWriter pipedWriter0 = new PipedWriter();
      arrayDeque0.add(pipedWriter0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printComment("(line ");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator('Q');
      Character character0 = new Character('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('|');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Character character0 = new Character('');
      Character character1 = Character.valueOf('');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('m');
      cSVFormat3.withQuoteChar('-');
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) character1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Character character0 = new Character('U');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('q');
      cSVFormat1.withQuoteChar('-');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.print(cSVFormat1);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator('Q');
      Character character0 = new Character('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) charArrayWriter0;
      cSVFormat1.format(objectArray0);
      cSVFormat0.validate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z7`MD", sQLNonTransientConnectionException0);
      StringWriter stringWriter0 = new StringWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('N');
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('m');
      Character character0 = new Character('/');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('w');
      Character character1 = new Character('a');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat0.withEscape('a');
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("!T_Yi");
      cSVFormat4.withQuoteChar('c');
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'w';
      charArray0[2] = 'a';
      charArray0[3] = 'U';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^kz");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      charBuffer0.put("_J#h?Ve7]&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character(',');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withDelimiter('P');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("dKdJu|!qyiuPi:6");
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('M');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('|');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) mockFile0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('|');
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) character0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      objectArray1[1] = (Object) character0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter1.printComment("{EjT&cmCw");
      cSVPrinter0.getOut();
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) "^kz";
      cSVPrinter0.printRecord(objectArray2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character character0 = new Character('M');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withRecordSeparator('M');
      String[] stringArray0 = null;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      Quote quote0 = Quote.NONE;
      cSVFormat5.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Character character0 = new Character('w');
      Character character1 = new Character('U');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('M');
      cSVFormat1.withQuoteChar('m');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat1.print(charArrayWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        Charset.forName("Unexpected Quote value: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Unexpected Quote value: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      MockFile mockFile0 = new MockFile("");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter2.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-544)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "QVk&QuTFyf?9b/m";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVk&QuTFyf?9b/m");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withQuoteChar('N');
      Character character0 = new Character('N');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVFormat1.format(objectArray0);
      Long long0 = new Long(0L);
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('m');
      MockFile mockFile0 = new MockFile("");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.withEscape('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('6');
      Character character0 = new Character('>');
      cSVFormat1.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "^kz";
      objectArray0[4] = (Object) "^kz";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>(5);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.getOut();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(5);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withQuoteChar('N');
      Character character0 = new Character('N');
      cSVFormat1.withCommentStart(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2098);
      cSVFormat0.toString();
      Character character0 = new Character('!');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(533);
      byteArrayOutputStream0.write(923);
      cSVFormat0.withQuoteChar(character0);
      cSVFormat0.validate();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientConnectionException0);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2098);
      cSVFormat0.toString();
      Character character0 = new Character('!');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(533);
      byteArrayOutputStream0.write(923);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      cSVPrinter0.printRecord(objectArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientConnectionException0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter0.println();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockFile mockFile0 = new MockFile("^kz", "(startline ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "R=dck(@g@o5v";
      MockFileWriter mockFileWriter0 = new MockFileWriter("R=dck(@g@o5v", true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[0] = (Object) "R=dck(@g@o5v";
      objectArray0[3] = (Object) "R=dck(@g@o5v";
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('=');
      CSVFormat.newFormat('=');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withNullString("org.apache.commons.csv.Assertions");
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@3UyU}7@=f+E\"^8.~", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('M');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
      cSVFormat0.withQuoteChar('e');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0, 1916);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      cSVPrinter0.print((Object) null);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream0, 1916);
      cSVPrinter0.print(pushbackInputStream2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('N');
      cSVFormat1.withCommentStart(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) character0;
      cSVFormat1.format(objectArray0);
      File file0 = MockFile.createTempFile("java.lang.Character@0000000004", "java.lang.Character@0000000004", (File) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@3UyU}7@=f+E\"^8.~", "^kz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('M');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('|');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      cSVPrinter0.printComment("^kz");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#jHOQv-Df");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      cSVPrinter0.getOut();
      TreeSet<DataOutputStream> treeSet0 = new TreeSet<DataOutputStream>();
      mockPrintStream1.print((-1181));
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("#jHOQv-Df");
      Long long0 = new Long((-1L));
      cSVPrinter0.print(long0);
      Object[] objectArray0 = new Object[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(478);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.flush();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      byteArrayOutputStream0.write(478);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.println();
      Object[] objectArray1 = new Object[0];
      cSVFormat0.withEscape('e');
      cSVFormat0.withQuoteChar('~');
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecord(objectArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 478);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream1);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      cSVPrinter0.print(lineNumberReader0);
      cSVPrinter0.print(objectArray0[1]);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      cSVPrinter0.print(dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat1);
      cSVPrinter0.getOut();
      TreeSet<DataOutputStream> treeSet0 = new TreeSet<DataOutputStream>();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream0.print((-1181));
      mockPrintStream1.append('{');
      treeSet0.floor(dataOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("L*-$L24J9|");
      Long long0 = new Long((-2179L));
      cSVPrinter0.print(cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) "L*-$L24J9|";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "L*-$L24J9|";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) long0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("SW?;[LR");
      Character character0 = Character.valueOf('8');
      cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.println();
      cSVFormat2.withCommentStart(character0);
      Character character1 = Character.valueOf('\"');
      cSVFormat2.withEscape(character1);
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter1.flush();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat3.validate();
      cSVPrinter1.print(cSVFormat1);
      cSVPrinter0.getOut();
      cSVFormat1.withCommentStart('%');
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("R=dck(@g@o5v", false);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("SW?;[LR");
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.println();
      cSVFormat2.withEscape(character0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.validate();
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.getOut();
      cSVFormat2.withCommentStart('f');
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = 'J';
      charArray0[2] = '$';
      charArray0[3] = 'f';
      charArray0[4] = '\"';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = '\"';
      charArray0[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 0);
      cSVFormat2.parse(charArrayReader0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2098);
      cSVFormat0.toString();
      Character character0 = new Character('!');
      cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.getOut();
      cSVPrinter0.print(character0);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(13);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.addSuppressed(sQLNonTransientException0);
      cSVPrinter0.print(sQLRecoverableException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) sQLNonTransientException0;
      Object object0 = new Object();
      sQLNonTransientException0.fillInStackTrace();
      objectArray0[2] = object0;
      cSVPrinter0.printComment("$z6&OCc%2ra.)h[G");
      objectArray0[3] = (Object) sQLNonTransientException0;
      sQLNonTransientException0.getLocalizedMessage();
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[3];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientException0);
      Class<DataOutputStream> class0 = DataOutputStream.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("CfXBxI078?@", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<DataOutputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('^');
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      MockFile mockFile0 = new MockFile("", "!'ii=z5DV+hiA,uX*");
      File file0 = MockFile.createTempFile("!'ii=z5DV+hiA,uX*", "!'ii=z5DV+hiA,uX*", (File) mockFile0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) "!'ii=z5DV+hiA,uX*";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "!'ii=z5DV+hiA,uX*";
      objectArray0[7] = (Object) mockFile0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.getOut();
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>(44);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('(');
      Character character0 = new Character('N');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) quote0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\"org.apache.commons.csv.CSVFormat@0000000003\",\"org.apache.commons.csv.Quote@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000003\",\"java.lang.Object@0000000006\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.Quote@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000001\"", "\"org.apache.commons.csv.CSVFormat@0000000003\",\"org.apache.commons.csv.Quote@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000003\",\"java.lang.Object@0000000006\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.Quote@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000001\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"org.apache.commons.csv.CSVFormat@0000000003\",\"org.apache.commons.csv.Quote@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000003\",\"java.lang.Object@0000000006\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.Quote@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000001\"
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bvDwSf4W$");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<FilterOutputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) outputStreamWriter0;
      objectArray0[1] = (Object) classLoader0;
      objectArray0[2] = (Object) serviceLoader0;
      objectArray0[3] = (Object) classLoader1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) class0;
      objectArray1[1] = (Object) classLoader0;
      objectArray1[2] = (Object) serviceLoader0;
      cSVFormat1.format(objectArray1);
      objectArray1[3] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat0);
      
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Quote quote0 = Quote.NON_NUMERIC;
      stringWriter0.write("x=u@3o");
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      
      Character character1 = Character.valueOf('V');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('V', (char)character1);
      
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getEscape());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoting());
      assertFalse(cSVFormat4.isEscaping());
      assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
      assertEquals('V', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.isNullHandling());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat4.getCommentStart());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(character1.equals((Object)character0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat5 = cSVFormat2.withCommentStart(character1);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat5.isNullHandling());
      assertTrue(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getNullString());
      assertEquals('V', (char)cSVFormat5.getCommentStart());
      assertTrue(cSVFormat5.isQuoting());
      assertNull(cSVFormat5.getEscape());
      assertEquals(Quote.NON_NUMERIC, cSVFormat5.getQuotePolicy());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('V', (char)cSVFormat5.getQuoteChar());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.isEscaping());
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat3);
      assertEquals(6, stringBuffer0.length());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      
      cSVPrinter0.close();
      assertEquals(6, stringBuffer0.length());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      
      cSVPrinter0.println();
      assertEquals(8, stringBuffer0.length());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      
      cSVPrinter0.printComment("=S+6C{l=(R'W``");
      assertEquals(8, stringBuffer0.length());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      
      cSVPrinter0.close();
      assertEquals(8, stringBuffer0.length());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('V', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullHandling());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('V', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getEscape());
      assertEquals('V', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('=');
      assertEquals("=", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("=", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      assertEquals("=", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("=", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.close();
      assertEquals("=", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("=", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(186, charArrayWriter0.size());
      assertEquals(186, charArrayWriter1.size());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(5, objectArray0.length);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      // Undeclared exception!
      try { 
        charArrayWriter1.write("Unexpected Quote value: ", 1418, 343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(478);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVFormat0);
      
      byteArrayOutputStream0.write(478);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVFormat0.validate();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.close();
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(4, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.print(cSVFormat1);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.println();
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('e');
      assertNull(cSVFormat2.getNullString());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals('e', (char)cSVFormat2.getEscape());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      
      CSVFormat cSVFormat3 = cSVFormat0.withQuoteChar('~');
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('~', (char)cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getEscape());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      
      cSVPrinter0.printRecord(objectArray1);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      
      cSVPrinter0.printRecord(objectArray1);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 478);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream1);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      
      cSVPrinter0.print(lineNumberReader0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      
      cSVPrinter0.print(objectArray0[1]);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals(4, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStream0);
      
      cSVPrinter0.print(dataOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('=');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      cSVPrinter0.close();
      String string0 = "Unexpected Quote value: ";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        charArrayWriter1.write("Unexpected Quote value: ", 1418, 343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#jHOQv-Df");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat0);
      cSVPrinter0.getOut();
      TreeSet<DataOutputStream> treeSet0 = new TreeSet<DataOutputStream>();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream1.print((-1181));
      treeSet0.floor(dataOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.printComment("#jHOQv-Df");
      Long long0 = new Long((-1L));
      cSVPrinter0.print(long0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) "#jHOQv-Df";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) long0;
      objectArray0[6] = (Object) "#jHOQv-Df";
      objectArray0[7] = (Object) mockFileOutputStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('9');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "e";
      stringArray0[1] = "Unexpected Quote value: ";
      stringArray0[2] = "";
      cSVFormat2.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'p';
      charArray0[2] = '6';
      charArray0[3] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
  }
}
