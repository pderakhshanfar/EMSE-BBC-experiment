/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:06:51 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLSyntaxErrorException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('#');
      cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('G');
      cSVFormat0.withNullString("N:Z");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('y');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("\r");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Character.valueOf('9');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      PipedReader pipedReader0 = new PipedReader(9);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("format");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('9');
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('(');
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat5);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("d");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('!');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@LcK2>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@LcK2>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVFormat1.withEscape('K');
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character(' ');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r$~\n");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("7Nf$Pk cw(");
      Character character0 = Character.valueOf('$');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("7Nf$Pk cw(");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      linkedHashSet0.add((MockFileInputStream) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "At");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('F');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "\r\n";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "\r\n";
      objectArray0[4] = null;
      objectArray0[5] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      PriorityQueue<SQLSyntaxErrorException> priorityQueue1 = new PriorityQueue<SQLSyntaxErrorException>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "Nm*>Ks|(eYtD$IL`o?";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Nm*>Ks|(eYtD$IL`o?");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[10];
      LinkedHashSet<Console> linkedHashSet0 = new LinkedHashSet<Console>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('V');
      Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('V');
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("[");
      cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat3);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" >");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" >");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.newFormat('c');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('/');
      mockPrintStream0.println(" >");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)31;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"zzsL]+7}w6{r");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AtfE");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AtfE");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AtfE");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      linkedHashSet0.add((MockFileInputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      Character character0 = new Character('d');
      Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      cSVFormat0.withNullString("[");
      Character character1 = Character.valueOf('2');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("[");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      try { 
        cSVPrinter1.printComment("The comment start character cannot be a line break");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u2029");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u2029");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      linkedHashSet0.add((MockFileInputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The quoteChar character and the delimiter cannot be the same ('", "The quoteChar character and the delimiter cannot be the same ('");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AX");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The quoteChar character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      LinkedHashSet<MockFileInputStream> linkedHashSet1 = new LinkedHashSet<MockFileInputStream>();
      linkedHashSet0.add((MockFileInputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "C,Li2{f#WE\"=h";
      MockFile mockFile0 = new MockFile("C,Li2{f#WE\"=h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('v');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T,Li2{f#WE\"=h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("T,Li2{f#WE\"=h");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T,Li2{f#WE\"=h");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "T,Li2{f#WE\"=h");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("g |h}\\ upU@]D");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("T,Li2{f#WE\"=h");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object object0 = new Object();
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      linkedHashSet0.add((MockFileInputStream) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3tfE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("3tfE");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3tfE");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      linkedHashSet0.add((MockFileInputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tfE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("tfE");
      cSVFormat0.withRecordSeparator("tfE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.getOut();
      Short short0 = new Short((short)4);
      cSVPrinter0.print(short0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T,Li2{f#WE\"=h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("T,Li2{f#WE\"=h");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>();
      HashSet<OutputStreamWriter> hashSet0 = new HashSet<OutputStreamWriter>(arrayList0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      Object object0 = new Object();
      Character character0 = Character.valueOf('=');
      Character character1 = new Character('=');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter1.print(character1);
      cSVFormat1.withRecordSeparator('3');
      cSVFormat1.withQuoteChar(character0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tfE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("tfE");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("tfE");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat1.withEscape('S');
      cSVFormat3.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(123);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) "tfE";
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVFormat3;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$r>_", "$r>_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$r>_");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$r>_");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("$r>_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) quote0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "$r>_";
      objectArray0[6] = (Object) "$r>_";
      objectArray0[7] = (Object) mockFileOutputStream0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$r>_", "$r>_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$r>_");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$r>_");
      cSVFormat0.withRecordSeparator("$r>_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      cSVPrinter1.print(sQLInvalidAuthorizationSpecException0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
      cSVPrinter1.printComment("$r>_");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('j');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat4);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "T,Li2{f#WE\"=h";
      MockFile mockFile0 = new MockFile("T,Li2{f#WE\"=h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("T,Li2{f#WE\"=h");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "T,Li2{f#WE\"=h");
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T,Li2{f#WE\"=h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("T,Li2{f#WE\"=h");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object object0 = new Object();
      Character character0 = Character.valueOf('=');
      Character character1 = new Character('=');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVFormat1.withQuoteChar(character0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      linkedHashSet0.add(mockFileInputStream0);
      cSVFormat0.print(mockFileWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T,Li2{f#WE\"=|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("T,Li2{f#WE\"=|");
      cSVFormat0.withRecordSeparator("T,Li2{f#WE\"=|");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.print((Object) null);
      cSVFormat2.withCommentStart((Character) null);
      Quote quote0 = Quote.MINIMAL;
      cSVFormat1.withQuotePolicy(quote0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$r>_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$r>_");
      cSVFormat0.withRecordSeparator("$r>_");
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.print((Object) null);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object2;
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      Object object3 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      mockPrintWriter0.printf("$r>_", objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$r>_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("$r>_");
      cSVFormat0.withRecordSeparator("$r>_");
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.print((Object) null);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object2;
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      objectArray0[2] = (Object) "$r>_";
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withRecordSeparator("]$J?yv)$l");
      Character character1 = new Character('V');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('m');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charset0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      cSVPrinter0.print(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_6z{hkIm");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.flush();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('1');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.println();
      Appendable appendable0 = cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      cSVFormat1.format(objectArray0);
      mockPrintStream0.println((-1279.567F));
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) appendable0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_6z{hkIm");
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_6z{hkIm");
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      Character.valueOf('v');
      Character character0 = new Character('v');
      cSVFormat0.withCommentStart(character0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "_6z{hkIm";
      objectArray0[3] = (Object) "_6z{hkIm";
      objectArray0[4] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) "_6z{hkIm";
      cSVPrinter0.printRecord(objectArray0);
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>(1406);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("_6z{hkIm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(14);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withEscape('.');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_6z{hkIm");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("_6z{hkIm");
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      Object object3 = new Object();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      String string0 = "]$J?yv)$l";
      cSVFormat1.withRecordSeparator("]$J?yv)$l");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      charBuffer0.rewind();
      Character character1 = new Character('3');
      Character.valueOf('k');
      Character character2 = Character.valueOf('_');
      cSVFormat1.withCommentStart(character2);
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      stringWriter0.append('~');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("out");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "out";
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getStackTrace();
      hashSet0.add(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = null;
      hashSet0.add((SQLFeatureNotSupportedException) null);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      hashSet0.addAll(arrayDeque0);
      hashSet0.add((SQLFeatureNotSupportedException) null);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      cSVPrinter1.print(sQLFeatureNotSupportedException0);
      cSVPrinter1.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_6z{hkIm");
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      cSVFormat1.withEscape('Y');
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.setWritable(false);
      cSVPrinter0.println();
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("_6z{hkIm");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object2 = new Object();
      objectArray0[0] = object2;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('');
      cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character1);
      cSVFormat1.withRecordSeparator("]$J?yv)$l");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3272)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      objectArray0[4] = object1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withRecordSeparator("]$J?yv)$l");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter(52);
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      stringWriter0.append((CharSequence) charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = (Object) 'P';
      objectArray0[2] = (Object) 'P';
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) 'P';
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) stringWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.setWritable(true);
      cSVPrinter0.println();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('P');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter(52);
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      stringWriter0.append((CharSequence) charBuffer0);
      stringWriter0.append('<');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLFeatureNotSupportedException1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Rv1!P]g?qF3k3", true);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Character.valueOf(':');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('$');
      Character character0 = Character.valueOf('|');
      cSVFormat2.withCommentStart(character0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("wuG`'YGt;C:F");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('s');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      cSVFormat0.withQuoteChar('s');
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) mockFileWriter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.println();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('m');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withRecordSeparator("_6z{hkIm");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("7lFfc]xM6S,g'", "Index for header '%s' is %d but CSVRecord only has %d values!");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) mockFileWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withRecordSeparator("]$J?yv)$l");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]$J?yv)$l");
      mockFileOutputStream0.write(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object3 = new Object();
      objectArray0[0] = object3;
      objectArray0[1] = object0;
      objectArray0[2] = object2;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object4 = new Object();
      objectArray0[5] = object4;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T,Li2{f#WE\"=h");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("T,Li2{f#WE\"=h");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(2499);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Character character0 = Character.valueOf('O');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("T,Li2{f#WE\"=h");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.flush();
      stringWriter0.flush();
      Object[] objectArray0 = new Object[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.flush();
      objectArray0[0] = (Object) stringWriter1;
      cSVFormat0.withQuoteChar('(');
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printComment("}V6lx_7ni9-");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character.valueOf('V');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("<])ETQZN");
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) resultSet0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("oIk0!W{C7sN)-fY',", "Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      objectArray0[3] = (Object) "Unexpected Quote value: ";
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) mockFile0;
      objectArray0[7] = (Object) "oIk0!W{C7sN)-fY',";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "#K>wN";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#K>wN");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(61);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('2')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'\"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 284);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3R}Bc]@K&.25@|(#B");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Character character0 = new Character('0');
      Character character1 = Character.valueOf('v');
      cSVFormat0.withCommentStart(character1);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>(277);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("3R}Bc]@K&.25@|(#B");
      linkedHashSet0.add(mockFileInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'\"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 284);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.println();
      Appendable appendable0 = cSVPrinter0.getOut();
      ArrayList<PipedWriter> arrayList0 = new ArrayList<PipedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(appendable0);
      cSVPrinter1.println();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) vector0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("", "Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>(109, 109);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "U8v6L3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.flush();
      stringWriter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      cSVFormat0.withQuoteChar('(');
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'\"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 284);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.println();
      Appendable appendable0 = cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(appendable0);
      cSVPrinter1.println();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) vector0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) appendable0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.flush();
      stringWriter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      cSVFormat0.withQuoteChar('(');
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('`');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Character character0 = new Character('c');
      Character character1 = Character.valueOf('J');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'\"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 284);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("J2mU}(xJOj7}jv/Vef", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("'\"", "org.apache.commons.csv.CSVPrinter$1", map0, sQLClientInfoException0);
      vector0.add(sQLClientInfoException1);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter1);
      cSVPrinter0.flush();
      stringWriter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      cSVFormat0.withQuoteChar('(');
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'\"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 284);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>(hashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_6z{hkIm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter(52);
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      StringWriter stringWriter2 = stringWriter1.append('/');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("", "Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[", false);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Character character0 = new Character('0');
      cSVFormat0.withCommentStart(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = null;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) null);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
