/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:05:07 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", 97, 97);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      StringWriter stringWriter0 = new StringWriter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(87);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 114);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bufferedInputStream0;
      objectArray0[1] = (Object) "8";
      objectArray0[2] = (Object) cSVParser0;
      objectArray0[3] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLException sQLException0 = new SQLException("", sQLNonTransientConnectionException0);
      Throwable throwable0 = sQLNonTransientConnectionException0.initCause(sQLException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) throwable0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      String string0 = "org.apache.commons.csv.CSVPrinter$1";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("027ST", "~IIZ#v", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('*');
      String string0 = "The header contains a duplicate entry: '";
      MockFileWriter mockFileWriter0 = new MockFileWriter("The header contains a duplicate entry: '");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The header contains a duplicate entry: '");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("The header contains a duplicate entry: '");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('>');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      mockFileWriter0.getEncoding();
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      LinkedList<MockPrintWriter> linkedList0 = new LinkedList<MockPrintWriter>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", 9, 9);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('F');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Q3:-%#Im,o");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "8";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2057);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('W');
      Character.valueOf('W');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("({OdQj");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.close();
      Object object0 = new Object();
      Class<DataInputStream> class0 = DataInputStream.class;
      ServiceLoader<DataInputStream> serviceLoader0 = ServiceLoader.load(class0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('.');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = ';';
      charArray0[4] = '.';
      charArray0[5] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AcS,Js?~C+~x'Y3)Jx");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AcS,Js?~C+~x'Y3)Jx");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[19];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aYz6|");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("QOl,v-~sh[30");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0U[sxi,'Tlqx");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      Object[] objectArray0 = new Object[5];
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aYz6|");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("]tl$3yK2[");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      Short short0 = new Short((short)98);
      cSVPrinter0.print(short0);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) short0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) sQLNonTransientConnectionException0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "am-*3Mp7r]6cAb";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("am-*3Mp7r]6cAb");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('5');
      cSVFormat0.withQuoteChar('5');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Character character0 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "am-*3Mp7r]6cAb", 114, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("am-*3Mp7r]6cAb", "am-*3Mp7r]6cAb", 114, sQLTransientException0);
      sQLNonTransientConnectionException0.initCause(sQLNonTransientConnectionException1);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("am-*3Mp7r]6cAb");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(',');
      Character character0 = new Character('h');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      Character character1 = Character.valueOf('h');
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar(character1);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintWriter0);
      MockFile mockFile0 = new MockFile("2F>(~&X;L", "am-*3Mp7r]6cAb");
      Path path0 = mockFile0.toPath();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter1.printRecords((Iterable<?>) path0);
      cSVPrinter0.printComment("2F>(~&X;L");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<$!w:'$f^A5RBCE(z0;");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")5~X");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PVA[G");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "PVA[G";
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      SQLDataException sQLDataException0 = new SQLDataException("PVA[G", "Unexpected Quote value: ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      TreeSet<PipedInputStream> treeSet0 = new TreeSet<PipedInputStream>();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Xbv");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("#pF#jOYO-BZ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<$!w:'$f^A5RBCE(z0;");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<$!w:'$f^A5RBCE(z0;");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(257);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Fm15&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('L');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      cSVFormat1.print(bufferedWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Character.valueOf('H');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter('H');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object object0 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.print(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character.valueOf('L');
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(257);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("!!Rr|Q(4o");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('L');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "8";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2057);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('W');
      Character.valueOf('W');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("({OdQj");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter1.close();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("&Be.&Ew", "&Be.&Ew");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) path0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("ogxapache.cmmos.csv.CSVPinter$1");
      MockFile mockFile1 = new MockFile("VpfgRH/~nKc_B->", "ogxapache.cmmos.csv.CSVPinter$1");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'd';
      charArray0[2] = 'i';
      charArray0[3] = '7';
      charArray0[4] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.close();
      Object object0 = new Object();
      MockFile mockFile2 = new MockFile("]^\"");
      Path path0 = mockFile2.toPath();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) path0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("ogxapache.cmmos.csv.CSVPinter$1");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ogxapache.cmmos.csv.CSVPinter$1");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "VpfgRH/~nKc_B->";
      objectArray0[1] = (Object) "ogxapache.cmmos.csv.CSVPinter$1";
      objectArray0[2] = (Object) "No header mapping wa specifi>, the record values can't be:accessed by name";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFile0.toPath();
      cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2880);
      Character character0 = new Character('d');
      Character.valueOf('d');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.close();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("G(T--W6LK:T+(vJ1>", "0!n^-N/G");
      MockFile mockFile1 = new MockFile(mockFile0, "G(T--W6LK:T+(vJ1>");
      Path path0 = mockFile1.toPath();
      cSVPrinter0.printRecords((Iterable<?>) path0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = (Object) cSVFormat1;
      mockPrintWriter0.printf("8", objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.flush();
      Object object0 = new Object();
      cSVFormat0.withRecordSeparator("8");
      cSVPrinter0.flush();
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar('V');
      cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.close();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setLastModified(0L);
      Path path0 = mockFile0.toPath();
      cSVPrinter0.printRecords((Iterable<?>) path0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('Z');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = (Object) cSVFormat1;
      mockPrintWriter0.printf("8", objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.flush();
      Object object0 = new Object();
      cSVFormat0.withRecordSeparator("8");
      cSVPrinter0.flush();
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteChar('V');
      cSVFormat0.withSkipHeaderRecord(true);
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) "8";
      cSVPrinter0.printRecord(objectArray0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "8";
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) appendable0;
      objectArray1[5] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1353);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Character character0 = new Character('d');
      Character character1 = Character.valueOf('s');
      cSVFormat1.withCommentStart(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.close();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("", "G(T--W6LK:T+(vJ1>");
      mockFile0.setLastModified(0L);
      Path path0 = mockFile0.toPath();
      cSVPrinter1.printRecords((Iterable<?>) path0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('}');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('}');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withEscape('}');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('W');
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Character character0 = new Character('m');
      Character character1 = new Character('W');
      cSVFormat0.withCommentStart(character1);
      cSVPrinter0.close();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "S0=rO3uf=+ir{?lo";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) "S0=rO3uf=+ir{?lo";
      objectArray0[4] = (Object) stringWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat0;
      cSVPrinter0.flush();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.newFormat('*');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('W');
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "S0=rO3uf=+ir{?lo";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat1;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) path0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) path0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVPrinter1;
      objectArray0[5] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter1.close();
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        cSVPrinter0.print(stringWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('W');
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      mockFile0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      mockFileWriter0.write("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "' must not be null!";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) path0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.close();
      try { 
        cSVPrinter1.printRecords((Iterable<?>) path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      file0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      priorityQueue0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "\\&inV<m";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1/VpfgRH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character.valueOf('9');
      cSVFormat0.withDelimiter('9');
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[1] = "S0=rO3uf=+ir{?lo";
      stringArray0[2] = "S0=rO3uf=+ir{?lo";
      stringArray0[3] = "";
      stringArray0[4] = "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVPrinter0.printRecords((Object[]) stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("O:o0k", 0, 0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2199)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1/VpfgRH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) file0;
      Path path0 = file0.toPath();
      objectArray0[1] = (Object) "&inV<m";
      cSVPrinter0.printRecords((Iterable<?>) path0);
      cSVPrinter0.printRecord(objectArray0);
      Short short0 = new Short((short) (-3968));
      cSVPrinter0.print(short0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VpfgRH/~nKc_B->";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.close();
      cSVFormat2.print(mockFileWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      try { 
        cSVPrinter1.printRecord((Object[]) stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      cSVFormat2.withCommentStart('W');
      charArray0[0] = 'W';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('{');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("am-*3Mp7r]6cAb");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('5');
      cSVFormat0.withQuoteChar('5');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Character character0 = new Character('g');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object object0 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile("VpfgRH/~nKc_B->", "gi?06m");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "gi?06m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("gi?06m");
      file0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      mockFileWriter0.append((CharSequence) "VpfgRH/~nKc_B->");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      file0.toPath();
      cSVPrinter0.printRecord(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile("VpfgRH/~nKc_B->", "gi?06m");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "gi?06m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("gi?06m");
      file0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      mockFileWriter0.append((CharSequence) "VpfgRH/~nKc_B->");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "gi?06m";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart('b');
      Character character0 = new Character('y');
      cSVFormat2.withQuoteChar(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character.valueOf('9');
      cSVFormat0.withDelimiter('9');
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[1] = "S0=rO3uf=+ir{?lo";
      stringArray0[2] = "S0=rO3uf=+ir{?lo";
      stringArray0[3] = "";
      stringArray0[4] = "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVPrinter0.printRecords((Object[]) stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('-');
      stringWriter1.write("O:o0k", 0, 0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 'W';
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('s');
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1353);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Character character1 = new Character('d');
      Character character2 = Character.valueOf('s');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.close();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "";
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character.valueOf('9');
      cSVFormat0.withDelimiter('9');
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[1] = "S0=rO3uf=+ir{?lo";
      stringArray0[2] = "S0=rO3uf=+ir{?lo";
      stringArray0[3] = "";
      stringArray0[4] = "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVPrinter0.printRecords((Object[]) stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b'xk");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('U');
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = ' ';
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      String string0 = "jP";
      File file0 = MockFile.createTempFile(" EmptyLines:ignored", "jP");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVFormat0.withNullString("");
      cSVPrinter0.printComment("");
      cSVFormat2.withEscape(character0);
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      char char1 = 'f';
      cSVFormat2.withQuoteChar(char1);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) string0;
      objectArray0[1] = (Object) cSVPrinter0;
      char char2 = 's';
      char[] charArray0 = new char[7];
      charArray0[0] = char1;
      charArray0[1] = char0;
      charArray0[2] = char1;
      charArray0[3] = char2;
      CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) charArray0[2]);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter1.flush();
      cSVPrinter1.print(mockFileWriter0);
      int int0 = (-1678);
      float float0 = 0.0F;
      HashSet<Console> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Console>(int0, float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1678
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('9');
      cSVFormat0.withEscape(character0);
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character1 = Character.valueOf('9');
      cSVFormat1.withEscape(character1);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('9');
      String string0 = "Z} *63";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Z} *63", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      file0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1/VpfgRH");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      Path path0 = file0.toPath();
      objectArray0[1] = (Object) "&inV<m";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) path0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S0=rO3uf=+ir{?lo";
      stringArray0[1] = "TS@|K(YwK(A";
      stringArray0[2] = "j)2iyN@";
      stringArray0[3] = ".dNz^,^@aE!&czz";
      stringArray0[4] = "";
      cSVFormat2.withHeader(stringArray0);
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      stringWriter1.write("", 0, 0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      cSVFormat2.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals(271, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      cSVFormat2.withCommentStart('W');
      charArray0[0] = 'W';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('{');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(215, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      file0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      Path path0 = file0.toPath();
      objectArray0[1] = (Object) "&inV<m";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) path0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      cSVFormat2.withCommentStart('W');
      charArray0[0] = 'W';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('{');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(215, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('9');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'Y';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '9';
      charArray0[8] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.getOut();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      cSVFormat3.withQuoteChar(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('{')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'O';
      charArray0[2] = 'p';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[3] = 'O';
      charArray0[4] = '^';
      charArray0[5] = 'F';
      charArray0[6] = 'p';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'p';
      objectArray0[1] = (Object) 'O';
      objectArray0[2] = (Object) 'F';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) 'L';
      objectArray0[6] = (Object) 'F';
      objectArray0[7] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Character character0 = new Character('H');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      cSVPrinter0.close();
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('{');
      cSVFormat1.withCommentStart(character0);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S0=rO3uf=+ir{?lo";
      stringArray0[1] = "TS@|K(YwK(A";
      stringArray0[2] = "j)2iyN@";
      stringArray0[3] = ".dNz^,^@aE!&czz";
      stringArray0[4] = "";
      cSVFormat2.withHeader(stringArray0);
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      stringWriter1.write("", 0, 0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      MockThrowable mockThrowable0 = new MockThrowable("S0=rO3uf=+ir{?lo");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", mockThrowable0);
      cSVPrinter0.print(sQLRecoverableException0);
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(312, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PVA[G");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) "PVA[G";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      Appendable appendable0 = cSVPrinter0.getOut();
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      arrayDeque0.add(batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("PVA[G", "Unexpected Quote value: ");
      CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      cSVFormat0.print(appendable0);
      TreeSet<PipedInputStream> treeSet0 = new TreeSet<PipedInputStream>();
      cSVPrinter0.printRecord((Iterable<?>) sQLDataException0);
      Appendable appendable1 = cSVPrinter0.getOut();
      assertSame(appendable1, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S0=rO3uf=+ir{?lo";
      stringArray0[1] = "TS@|K(YwK(A";
      stringArray0[2] = "gd$o>lO2U{{Cp@$s";
      stringArray0[3] = ".dNz^,^@aE!&czz";
      stringArray0[4] = "";
      cSVFormat2.withHeader(stringArray0);
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      stringWriter1.write("", 0, 0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>(0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S0=rO3uf=+ir{?lo";
      stringArray0[1] = "TS@|K(YwK(A";
      stringArray0[2] = "j)2iyN@";
      stringArray0[3] = ".dNz^,^@aE!&czz";
      stringArray0[4] = "";
      cSVFormat1.withHeader(stringArray0);
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      stringWriter1.write("", 0, 0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(269, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('W');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1/VpfgRH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1", "&inV<m");
      File file0 = MockFile.createTempFile("&inV<m", "org.apache.commons.csv.CSVPrinter$1", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      cSVFormat0.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      file0.renameTo(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "&inV<m";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFileWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("&inV<m");
      File file0 = MockFile.createTempFile("&inV<m", "org.apache.commons.csv.CSVPrinter$1", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockFile mockFile1 = new MockFile(file0, "org.apache.commons.csv.CSVPrinter$1");
      mockFile0.renameTo(mockFile1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1/VpfgRH");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Path path0 = mockFile1.toPath();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) path0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) evoSuiteFile0;
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) path0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) path0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Character character1 = new Character('{');
      cSVFormat1.withCommentStart(character0);
      cSVPrinter0.close();
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter0);
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      cSVPrinter1.printRecords((Iterable<?>) path0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) path0;
      objectArray0[6] = (Object) "";
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords((Iterable<?>) path0);
      assertEquals(245, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j)2iyN@";
      stringArray0[1] = "L._T-(>Pym~8-_x:8";
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.println();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "]fCyphxu#$!@V^38";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("j-");
      assertEquals(305, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PVA[G");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('L');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) "PVA[G";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      arrayDeque0.add(batchUpdateException0);
      int[] intArray1 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("PVA[G", "Unexpected Quote value: ");
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray1, sQLDataException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('{');
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) character0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S0=rO3uf=+ir{?lo";
      stringArray0[1] = "TS@|K(YwK(A";
      stringArray0[2] = "j)2iyN@";
      stringArray0[3] = ".dNz^,^@aE!&czz";
      stringArray0[4] = "";
      cSVFormat2.withHeader(stringArray0);
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      stringWriter1.write("", 0, 0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVPrinter$1/VpfgRH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
      String string0 = "DNl&g'V }5zg";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DNl&g'V }5zg");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter0.flush();
      Character character0 = Character.valueOf('E');
      cSVFormat0.withCommentStart(character0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        outputStreamWriter0.append((CharSequence) "DNl&g'V }5zg", 1, 2316);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("`W@T2^");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('E');
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('9');
      cSVFormat0.withEscape(character0);
      cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character1 = Character.valueOf('9');
      cSVFormat1.withEscape(character1);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Z} *63", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b'xk");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('U');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('9');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.printComment("b'xk");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("I5t8j0syGa)8=WxxC", "(w79h");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "R\"", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("&inV<m");
      MockFile mockFile1 = new MockFile(file0, "]GF6");
      mockFile1.renameTo(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      mockFileWriter0.append((CharSequence) "VpfgRH/~nKc_B->");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) "I5t8j0syGa)8=WxxC";
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character.valueOf('9');
      cSVFormat0.withDelimiter('9');
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('9');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      stringArray0[1] = "S0=rO3uf=+ir{?lo";
      stringArray0[2] = "S0=rO3uf=+ir{?lo";
      stringArray0[0] = "";
      stringArray0[4] = "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVPrinter0.printRecords((Object[]) stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printComment("");
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = '.';
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      String string1 = " EmptyLines:ignored";
      String string2 = "jP";
      File file0 = MockFile.createTempFile(" EmptyLines:ignored", "jP");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("");
      cSVFormat2.withEscape(character0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      File file0 = MockFile.createTempFile("VpfgRH/~nKc_B->", "&inV<m", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "&inV<m";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) "VpfgRH/~nKc_B->";
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('L');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("3n%D");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "out";
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EC~U]LU1%%~Yu50&";
      stringArray0[1] = "QdV|~Wq$g";
      stringArray0[2] = "The comment start character and the delimiter cannot be the same ('";
      stringArray0[3] = "q_D ZYBU(dM_OqaL!w";
      cSVFormat1.withHeader(stringArray0);
      char char0 = '-';
      cSVFormat1.withCommentStart('-');
      cSVFormat1.withQuoteChar('S');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
