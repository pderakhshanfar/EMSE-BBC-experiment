/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:05:16 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8}a$2line ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("8}a$2line ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("8}a$2line ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('T');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[3] = (Object) pipedWriter0;
      objectArray1[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray1);
      objectArray0[1] = (Object) pipedWriter0;
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Double double0 = new Double('T');
      cSVPrinter0.printComment("");
      cSVPrinter0.print(double0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"&VwPO'Cw%");
      MockFileWriter mockFileWriter0 = new MockFileWriter("\"&VwPO'Cw%");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0jn$}'ee!w");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Tqken type: ");
      ArrayList<OutputStreamWriter> arrayList0 = new ArrayList<OutputStreamWriter>();
      arrayList0.add((OutputStreamWriter) mockFileWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = ']';
      charArray0[2] = 'f';
      charArray0[3] = '7';
      charArray0[4] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("GV");
      ArrayList<OutputStreamWriter> arrayList0 = new ArrayList<OutputStreamWriter>();
      arrayList0.add((OutputStreamWriter) mockFileWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "GV");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "O[MbrZ:;=-f\"Nm4";
      stringArray0[1] = "No header mapping was specified, the record values can't be accessed by name";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "Wu44u~d{qh;Fe.n";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[3] = "";
      stringArray0[4] = "v>eYj";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader(804);
      cSVFormat1.parse(pipedReader0);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1882);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('3');
      Character character0 = Character.valueOf('3');
      cSVFormat0.validate();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter(680);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      ArrayList<MockFileWriter> arrayList0 = new ArrayList<MockFileWriter>(treeSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8}tar2line ");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("8}tar2line ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFileWriter mockFileWriter0 = new MockFileWriter("C|(");
      Character.valueOf('0');
      MockFileWriter mockFileWriter1 = new MockFileWriter("Unexpected Quote value: ");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter1, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      objectArray0[1] = (Object) "C|(";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "C|(";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[1];
      cSVPrinter0.printRecords(objectArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NullString=<");
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":R<>EJ[um1{");
      cSVFormat0.withRecordSeparator(":R<>EJ[um1{");
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("string", false);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("[/q$c Em`(-L43");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      MockFile mockFile0 = new MockFile("ef.Ba");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter2 = cSVFormat4.print(mockPrintStream0);
      cSVPrinter2.printRecords((Object[]) stringArray0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":R<>EJ[um1{");
      cSVFormat0.withRecordSeparator(":R<>EJ[um1{");
      cSVFormat0.withSkipHeaderRecord(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(".^3SE[I0", false);
      cSVFormat1.withNullString("KaDl8aS8L\"8^HvOZFz");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("ef.Ba");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("UR\"RFNYAj\"'DIDIcgsV");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("$+f=`Wv");
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter2.getOut();
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("%#kYP}<,");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(":R<>EJ[um1{");
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      Quote quote0 = Quote.NONE;
      cSVFormat3.withQuotePolicy(quote0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("%#kYP}<,", false);
      cSVFormat2.withNullString("out");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(":R<>EJ[um1{");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter2;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVPrinter2;
      objectArray0[3] = (Object) ".^3SE[I0";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVPrinter1;
      cSVPrinter0.printRecord(objectArray0);
      HashSet<SQLWarning> hashSet0 = new HashSet<SQLWarning>(116);
      cSVPrinter2.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.printComment("out");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[2] = ":R<>EJ[um1{";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":R<>EJ[um1{");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(stringArray0[1]);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(":R<>EJ[um1{", false);
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("KaDl8aS8L\"8^HvOZFz");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter2.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(49).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecords(resultSet0);
      Stack<ByteArrayOutputStream> stack0 = new Stack<ByteArrayOutputStream>();
      cSVPrinter1.printRecord((Iterable<?>) stack0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("aDlJaS9L\"8^HvOZFz");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("xr");
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("aDlJaS9L\"8^HvOZFz");
      cSVFormat2.withDelimiter('C');
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("");
      cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("xr");
      Quote quote0 = Quote.NONE;
      cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>((-388));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      cSVFormat0.withRecordSeparator("");
      MockFileWriter mockFileWriter0 = new MockFileWriter("KaDl8aS8L\"8^HvOZFz");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("{.'JD");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      Vector<Console> vector0 = new Vector<Console>();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("KaDl8aS8L\"8^HvOZFz");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("xr");
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("KaDl8aS8L\"8^HvOZFz");
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("");
      cSVFormat2.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("xr");
      Quote quote0 = Quote.NONE;
      cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat5);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1750).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[2] = "KaDl8aS8L\"8^HvOZFz";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("KaDl8aS8L\"8^HvOZFz");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(stringArray0[1]);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("KaDl8aS8L\"8^HvOZFz");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter2.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":R<>EJ[um1{";
      stringArray0[2] = "KaDl8aS8L\"8^HvOZFz";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":R<>EJ[um1{");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(":R<>EJ[um1{");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("KaDl8aS8L\"8^HvOZFz");
      CSVFormat cSVFormat4 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "[G";
      MockFileWriter mockFileWriter0 = new MockFileWriter("[G");
      Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile(".,i8QAm=}}6$j(<", "");
      MockFileWriter mockFileWriter1 = new MockFileWriter("The quoteChar character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".,i8QAm=}}6$j(<");
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('8');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(914);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'i';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '^';
      charArray0[8] = '8';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("6+~*902]J;p*");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      outputStreamWriter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":R<>EJ[um1{";
      stringArray0[2] = "KaDl8aS8L\"8^HvOZFz";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "KaDl8aS8L\"8^HvOZFz");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("[G");
      Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile(".,i8QAm=}}6$j(<", "");
      MockFileWriter mockFileWriter1 = new MockFileWriter("The quoteChar character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".,i8QAm=}}6$j(<");
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('.');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Integer integer0 = new Integer((-731));
      cSVPrinter0.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("[G*");
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      ArrayList<OutputStreamWriter> arrayList0 = new ArrayList<OutputStreamWriter>();
      arrayList0.add((OutputStreamWriter) mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The header contains a duplicate entry: '");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
      int int0 = 35;
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.getOut();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoader0.reload();
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader1 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader1);
      cSVFormat2.withRecordSeparator("out");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("loa#/taa0dDR'M~}[C");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$1|i7dSUymg3TuO|", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.csv.CSVPrinter$1", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLRecoverableException0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter0.printComment("$1|i7dSUymg3TuO|");
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = new Character('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('s');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVFormat2.withEscape(character1);
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("=JN_D\"ji");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('-');
      cSVFormat1.withQuoteChar('F');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(27);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "=JN_D\"ji");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.printComment("8T/r|");
      LinkedHashSet<ByteArrayOutputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayOutputStream>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Double double0 = new Double(0.0);
      cSVPrinter2.print("8T/r|");
      assertEquals(44, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("=JN_D\"ji");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('-');
      cSVFormat1.withQuoteChar('F');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(27);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "=JN_D\"ji");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVPrinter0.printComment("8T/r|");
      LinkedHashSet<ByteArrayOutputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayOutputStream>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Delimiter=<", "vU@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"vU@\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('n');
      PipedWriter pipedWriter0 = new PipedWriter();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('n');
      cSVFormat0.withEscape('n');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[1] = (Object) quote0;
      objectArray0[2] = (Object) locale_Category0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = object0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withCommentStart('f');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVFormat3.withEscape((Character) null);
      Double double0 = new Double((-525.27186424796));
      try { 
        cSVPrinter0.print(double0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withEscape((Character) null);
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("loa#/taa0dDR'M~}[C");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withCommentStart(')');
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat1.withQuoteChar(')');
      CharBuffer charBuffer0 = CharBuffer.allocate(25);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.printComment("QjraWdt");
      LinkedHashSet<ByteArrayOutputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayOutputStream>();
      Float float0 = new Float((-14.597280315464115));
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.print(object0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withEscape((Character) null);
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The header contains a duplicate entry: '");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
      int int0 = 35;
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.getOut();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoader0.reload();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('1');
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      Character character1 = new Character('d');
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar(character1);
      MockFile mockFile0 = new MockFile("^w\"Nl}Sy~~24!Tv", "j[}eF++H><A-@VmJy");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockFileWriter0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedList0);
      cSVPrinter0.print("^w\"Nl}Sy~~24!Tv");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) "j[}eF++H><A-@VmJy";
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withDelimiter('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVFormat0.withEscape('a');
      cSVFormat0.withSkipHeaderRecord(false);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.print(cSVFormat0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (Throwable) null);
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
      cSVPrinter1.print((Object) null);
      assertEquals(128, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\"');
      PipedWriter pipedWriter0 = new PipedWriter();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('\"');
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      InputStreamReader inputStreamReader1 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      LineNumberReader lineNumberReader1 = new LineNumberReader(inputStreamReader1, 2168);
      priorityQueue0.add(lineNumberReader1);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}Z");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) mockPrintStream0;
      cSVPrinter0.close();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter1.print(cSVFormat2);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("foi(,O-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.JAPANESE;
      locale1.getUnicodeLocaleKeys();
      CharBuffer charBuffer0 = CharBuffer.allocate(1137);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1137, 1137);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B");
      MockFile mockFile0 = new MockFile("B");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.KOREAN;
      locale1.getUnicodeLocaleKeys();
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '}';
      charArray0[2] = '/';
      charArray0[3] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter1.print(charBuffer0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter2.printComment("B");
      cSVPrinter0.close();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter1.print(locale_Category0);
      assertEquals(71L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B");
      MockFile mockFile0 = new MockFile("B");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.US;
      locale0.getUnicodeLocaleKeys();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter0.print((Object) null);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      cSVPrinter0.close();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVPrinter0.print("B");
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      assertEquals(1L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat.newFormat('f');
      CSVFormat cSVFormat5 = cSVFormat3.withNullString("org.apache.commons.csv.Constants");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat5);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.println();
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Quote quote1 = Quote.ALL;
      cSVFormat1.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('I');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVPrinter0.printComment("UMA");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quote1;
      objectArray0[1] = (Object) cSVFormat4;
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      PriorityQueue<LineNumberReader> priorityQueue1 = new PriorityQueue<LineNumberReader>(priorityQueue0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArrayInputStream0;
      objectArray0[1] = (Object) priorityQueue0;
      objectArray0[2] = (Object) (byte)29;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) priorityQueue0;
      objectArray0[5] = (Object) priorityQueue1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      priorityQueue0.add(lineNumberReader0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = ":R>E1{";
      stringArray0[2] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(":R>E1{");
      cSVFormat3.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("XpBV[-\u0001?&cJ9^");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('a');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockFileWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      PriorityQueue<LineNumberReader> priorityQueue0 = new PriorityQueue<LineNumberReader>();
      PriorityQueue<LineNumberReader> priorityQueue1 = new PriorityQueue<LineNumberReader>(priorityQueue0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      priorityQueue1.add(lineNumberReader0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withQuoteChar('f');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat.newFormat('f');
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.Constants");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withQuoteChar('N');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = ":R<>Em1{";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("[CQlJd9J?Q8XTz");
      cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat4.withQuoteChar('Z');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}Z");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("}Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) mockPrintStream0;
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintStream0);
      DataTruncation dataTruncation0 = new DataTruncation(30, true, true, (-1183), (-1183));
      cSVPrinter1.print(dataTruncation0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      cSVPrinter0.printRecord((Iterable<?>) dataTruncation0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = "MHayq+UHX^`$e2M";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("XpBV[-\u0001?&cJ9^");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      cSVFormat4.withSkipHeaderRecord(false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      mockFile0.setReadable(false, true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("out");
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      Class<Console> class0 = Console.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      printWriter0.format("MHayq+UHX^`$e2M", (Object[]) stringArray0);
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
      assertEquals(1L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      cSVFormat1.withSkipHeaderRecord(true);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-193)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      cSVFormat2.withEscape((Character) null);
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withQuoteChar('f');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1231).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVFormat2.withEscape((Character) null);
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      Quote quote1 = Quote.ALL;
      cSVFormat1.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('I');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVPrinter0.printComment("UMA");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quote1;
      objectArray0[1] = (Object) cSVFormat4;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = "MHayq+UHX^`$e2M";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("XpBV[-\u0001?&cJ9^");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      cSVFormat4.withSkipHeaderRecord(false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      mockFile0.setReadable(false, true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("out");
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      Class<Console> class0 = Console.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.io.Console]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}Z");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      mockPrintStream0.println((-1810L));
      MockFile mockFile0 = new MockFile("iH;uOkq6");
      mockFile0.getAbsolutePath();
      MockFile.createTempFile("/experiment/iH;uOkq6", "", (File) mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        mockPrintStream0.printf("|B_KR9-  5%>", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '>'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withQuoteChar('f');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object object0 = new Object();
      String string0 = "5;Tc\"Asj&[q3";
      MockFile mockFile0 = new MockFile("5;Tc\"Asj&[q3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ArrayDeque<PipedWriter> arrayDeque0 = new ArrayDeque<PipedWriter>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('a');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('a');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVFormat0.withEscape('a');
      cSVFormat0.withSkipHeaderRecord(false);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      Object object0 = null;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.print(cSVFormat0);
      Appendable appendable0 = cSVPrinter1.getOut();
      // Undeclared exception!
      try { 
        cSVFormat2.print(appendable0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('a')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "org.apache.commons.csv.CSVFormat");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      Class<PushbackReader> class0 = PushbackReader.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<PushbackReader> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)19;
      printStream0.write(byteArray0, (int) (byte)19, (int) (byte)19);
      charArray0[0] = 'K';
      Object object0 = new Object();
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "org.apache.commons.csv.CSVFormat";
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      mockPrintStream0.append('K');
      cSVPrinter0.print((Object) null);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.print(objectArray0[4]);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'u';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = 'u';
      charArray0[7] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('0');
      cSVFormat0.withCommentStart((Character) '0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      cSVPrinter1.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withQuoteChar('f');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVFormat2.withEscape((Character) null);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printComment("Usf%gkIT'%-,^DI");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.withQuoteChar('f');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("5;Tc\"Asj&[q3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = object0;
      mockPrintStream0.format(locale0, "5;Tc\"Asj&[q3", objectArray0);
      try { 
        cSVPrinter0.print(object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}Z");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("}Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("*I?6h}*FEvp*OfF");
      File file0 = MockFile.createTempFile("NON_NUMERIC", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "NON_NUMERIC";
      mockPrintStream0.println((-1810L));
      mockFile0.getAbsolutePath();
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) cSVFormat0;
      MockFile.createTempFile("out", "*I?6h}*FEvp*OfF", (File) mockFile0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(786L, file0.length());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "org.apache.commons.csv.CSVFormat");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      Class<PushbackReader> class0 = PushbackReader.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<PushbackReader> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'p';
      charArray0[2] = 'M';
      charArray0[3] = '}';
      charArray0[4] = 'z';
      charArray0[5] = 'E';
      charArray0[6] = 'c';
      charArray0[7] = 'K';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B";
      stringArray0[1] = "MHayq+UHX^`$e2M";
      stringArray0[2] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      MockFile mockFile0 = new MockFile("XpBV[-\u0001?&cJ9^");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.close();
      assertEquals(1L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'u';
      charArray0[2] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart((Character) 'u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(Cq6Gea&KKDbrZ");
      char char0 = 'O';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(Cq6Gea&KKDbrZ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'l';
      charArray0[3] = '$';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      mockPrintWriter0.write(charArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('O');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('O');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('O')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat.newFormat('n');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("B");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("=JN_D\"ji");
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('-');
      cSVFormat1.withQuoteChar('F');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(27);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.println();
      cSVPrinter0.printComment("8T/r|");
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withRecordSeparator('F');
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("7@)nY$p");
      assertEquals(26, charArrayWriter0.size());
      assertEquals("\r\n- 8T/r|\r\n\"\"\r\n- 7@)nY$p\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuoteChar(',');
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('f');
      Quote quote1 = Quote.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote1);
      cSVFormat0.withQuoteChar('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat4);
      try { 
        cSVPrinter0.printComment("8T/r|");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("}Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      MockPrintStream mockPrintStream0 = new MockPrintStream("aQB\"::m[)]gVF");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "Unexpected Token type: ";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "Unexpected Token type: ";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Unexpected Token type: ", objectArray0);
      cSVPrinter0.print(printStream0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      MockFileWriter mockFileWriter0 = new MockFileWriter("\",Lb");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      mockFileWriter0.getEncoding();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\",Lb";
      cSVFormat0.withDelimiter('A');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("\",Lb");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "h04Sbud^Cl");
      MockFile mockFile1 = new MockFile(mockFile0, "5v[I~");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "5v[I~";
      objectArray0[1] = (Object) "JLp*KjgJ:-.Cg ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "JLp*KjgJ:-.Cg ";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      Object object4 = new Object();
      objectArray0[7] = object4;
      PrintStream printStream0 = mockPrintStream0.format("JLp*KjgJ:-.Cg ", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(239L, mockFile1.length());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        cSVFormat2.print(charArrayWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('J')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
