/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:08:05 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sQLTransientConnectionException0.initCause(sQLDataException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Short short0 = new Short((short)65);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Short short1 = new Short((short)65);
      hashSet0.add(short1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("GB9tanrOMT!");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      String string0 = "";
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '#';
      charArray0[2] = 'k';
      cSVFormat1.withQuoteChar('\"');
      charArray0[3] = 'v';
      charArray0[4] = ']';
      charArray0[5] = 'V';
      charArray0[6] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('Y');
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = ")M6NT2R\"o/<S_C:3|W";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('R');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")M6NT2R\"o/<S_C:3|W", 3, 3);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      String string1 = "";
      Class<Byte> class0 = Byte.class;
      ServiceLoader<Byte> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withNullString("shBkrk^]KA[7O4");
      StringWriter stringWriter0 = new StringWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Character character0 = Character.valueOf('T');
      cSVFormat1.withEscape(character0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('F');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('F');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      linkedHashSet0.add((Short) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1719);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1719, 1719);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0Kz<QU_N*\"zMi, +3X");
      cSVFormat1.format(objectArray0);
      cSVFormat0.withNullString("UMio[Ka.@]");
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1fbw8y>JiJqy");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('A');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("Unexpected Quote value: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9nhm{_p~1AkHK*O");
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.printComment("format");
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "format";
      objectArray0[6] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<_<~bYiov]v U");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ")M6NT2R\"o/<S_C:3|W";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('R');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")M6NT2R\"o/<S_C:3|W", 3, 3);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.format(objectArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = 'i';
      charArray0[2] = 'p';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^ehi:>^oD8f");
      cSVFormat1.withNullString("\"\",org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000003,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000004,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002");
      cSVFormat1.format(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[5] = (Object) outputStreamWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000003\t\tjava.io.OutputStreamWriter@0000000004\t\torg.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat2.format(objectArray0);
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("org.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000003\t\tjava.io.OutputStreamWriter@0000000004\t\torg.apache.commons.csv.CSVFormat@0000000001");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Short short0 = new Short((short)65);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      hashSet0.add(short0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("GB9tanrOMT!");
      cSVFormat1.print(mockFileWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '#';
      charArray0[2] = 'k';
      charArray0[3] = 'v';
      charArray0[5] = 'V';
      charArray0[6] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('V');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) 'V';
      objectArray0[2] = (Object) short0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) 'V';
      objectArray0[5] = (Object) hashSet0;
      objectArray0[6] = (Object) charBuffer0;
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('s');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("ECf9TNYz,yi");
      Object[] objectArray0 = new Object[1];
      cSVFormat3.format(objectArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[2] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("<_<~bYiov]v U");
      cSVFormat4.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('$');
      Quote quote0 = Quote.NONE;
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'V';
      charArray0[5] = 'Y';
      charArray0[6] = 'V';
      charArray0[7] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.allocate(48);
      charBuffer0.append('V');
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment("@/%BSw$w;$vj+");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Short short0 = new Short((short)65);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      Short short1 = new Short((short)65);
      hashSet0.add(short1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("GB9tanrOMT!");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '#';
      charArray0[2] = 'k';
      charArray0[3] = 'v';
      charArray0[4] = ']';
      charArray0[5] = 'V';
      charArray0[6] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('Y');
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.printComment("");
      try { 
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      Short short0 = new Short((short)28);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      charBuffer0.append('p');
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      cSVPrinter0.printComment("");
      cSVPrinter0.print("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withEscape('Y');
      String[] stringArray0 = new String[2];
      cSVFormat1.format(stringArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Character.valueOf('Y');
      cSVFormat1.withEscape((Character) 'Y');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("}$VALUES");
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Character character0 = new Character('l');
      Character character1 = Character.valueOf('$');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Unexpected Quote value: ");
      cSVFormat0.format(objectArray0);
      cSVFormat3.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.getOut();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLClientInfoException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('s');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('n');
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat4.withNullString("ECf9TNY1z,yi");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      cSVFormat7.format(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      String[] stringArray0 = new String[5];
      cSVFormat1.format(stringArray0);
      cSVFormat0.withQuoteChar('8');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("\"\",\"\",\"\",\"\",\"\"");
      cSVFormat2.format(stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('m');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ", false);
      MockFileReader mockFileReader0 = new MockFileReader("Unexpected Quote value: ");
      cSVFormat3.parse(mockFileReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) appendable0;
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter1.close();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(appendable0);
      try { 
        cSVPrinter2.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      Short short0 = new Short((short)7);
      linkedHashSet0.add(short0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 116);
      cSVPrinter1.print(sQLSyntaxErrorException0);
      cSVPrinter1.flush();
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
      cSVPrinter1.getOut();
      Object[] objectArray0 = new Object[0];
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat0.withEscape('y');
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter", true);
      MockFileReader mockFileReader0 = new MockFileReader("org.apache.commons.csv.CSVPrinter");
      CSVParser cSVParser0 = cSVFormat0.parse(mockFileReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) appendable0;
      objectArray0[4] = (Object) "Unexpected Quote value: ";
      objectArray0[5] = (Object) cSVParser0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      String[] stringArray0 = new String[5];
      cSVFormat1.format(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('8');
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.withNullString("l7)U|]k\"1$o}]k4a;Qk");
      cSVFormat3.format(stringArray0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)7;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(stringReader0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('$');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      HashSet<Short> hashSet0 = new HashSet<Short>(linkedList0);
      hashSet0.add((Short) null);
      cSVFormat2.print(mockPrintWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1818);
      CharBuffer charBuffer1 = charBuffer0.append('E');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 2);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1340).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('E');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "out";
      stringArray0[2] = "org.apache.commons.csv.Quote";
      stringArray0[2] = "Tk 7h~Nw[<;pu%{y=";
      stringArray0[3] = " SkipHeaderRecord:";
      cSVFormat3.format(stringArray0);
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString(" SkipHeaderRecord:");
      cSVFormat5.format(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.print(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CharBuffer charBuffer0 = CharBuffer.allocate('+');
      charBuffer0.get(31);
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      Short short0 = new Short((short)7);
      linkedHashSet0.add(short0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      charBuffer0.chars();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVFormat0.withEscape('j');
      cSVPrinter0.printComment("");
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      linkedHashSet0.add(short0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('}');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('t');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('H');
      cSVFormat0.withRecordSeparator((String) null);
      cSVFormat3.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) null;
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote1 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('L');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('0');
      String string0 = "!Zz]3PU~57%ph";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) quote1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat4;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Short short0 = new Short((short)7);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1383);
      charBuffer0.chars();
      LinkedHashSet<InputStreamReader> linkedHashSet0 = new LinkedHashSet<InputStreamReader>((short)7);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('m');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('S');
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ", true);
      MockFileReader mockFileReader0 = new MockFileReader("Unexpected Quote value: ");
      cSVFormat3.parse(mockFileReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Unexpected Quote value: ";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) "Unexpected Quote value: ";
      Object object1 = new Object();
      objectArray0[8] = object1;
      cSVFormat2.format(objectArray0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'p';
      charArray0[2] = 'Y';
      charArray0[3] = '7';
      charArray0[4] = 'p';
      charArray0[5] = 'Y';
      charArray0[6] = 'p';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      ServiceLoader.loadInstalled(class0);
      cSVFormat1.print(charBuffer1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Y');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "org.apache.commons.csv.Quote";
      objectArray0[1] = (Object) "org.apache.commons.csv.Quote";
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) " SkipHeaderRecord:";
      objectArray0[5] = (Object) "Tk 7h~Nw[<;pu%{y=";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Character character0 = new Character('i');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.close();
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      ServiceLoader.loadInstalled(class0);
      Character character1 = new Character('a');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character1);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      Quote quote1 = Quote.MINIMAL;
      cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('$');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printComment(")M6NT2R\"o/<S_C:3|W");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      Short short0 = new Short((short)7);
      linkedHashSet0.add(short0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      charBuffer0.append('p');
      cSVPrinter0.printComment("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVPrinter0.close();
      StringWriter stringWriter0 = new StringWriter((short)7);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-o`8!z");
      cSVFormat0.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.printComment("");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate('p');
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      Short short0 = new Short((short)7);
      linkedHashSet0.add(short0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      charBuffer0.append('p');
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVPrinter0.printComment("EiQL-S_@+m");
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) linkedHashSet0;
      cSVPrinter0.flush();
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) linkedHashSet0;
      objectArray0[6] = (Object) linkedList0;
      objectArray0[7] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Y');
      String[] stringArray0 = new String[6];
      String string0 = " SkipHeaderRecord:";
      cSVFormat0.format(stringArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = '7';
      charArray0[7] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      String string1 = "$";
      cSVPrinter0.printComment("@$#C]8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat2.withEscape('L');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!Zz]3PU~57%ph";
      stringArray0[1] = "org.apache.commons.csv.Quote";
      cSVFormat2.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter(1698);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Tk 7h~Nw[<;pu%{y=");
      stringWriter1.append('L');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('X');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter(106);
      StringWriter stringWriter1 = stringWriter0.append('X');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "org.apache.commons.csv.Quote";
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = objectArray0[0];
      objectArray0[4] = (Object) " SkipHeaderRecord:";
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVPrinter1;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Y');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "out";
      stringArray0[1] = "org.apache.commons.csv.Quote";
      stringArray0[2] = "Tk 7h~Nw[<;pu%{y=";
      stringArray0[3] = " SkipHeaderRecord:";
      cSVFormat3.format(stringArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = '7';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat2.print(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1412, 1412);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charBuffer1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) charBuffer1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVFormat0.print(charBuffer1);
      cSVPrinter0.close();
      cSVPrinter1.printRecord(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter2.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('k');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) appendable0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat4.format(objectArray0);
      cSVPrinter0.printComment(",=yo/0YAQ/d4={\u0001");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment(",=yo/0YAQ/d4={\u0001");
      cSVPrinter0.println();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1412, 1412);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charBuffer1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) charBuffer1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1412, 1412);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charBuffer1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) charBuffer1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printComment("org.apache.commons.csv.CSVPrinter@0000000002porg.apache.commons.csv.CSVFormat@0000000001porg.apache.commons.csv.CSVPrinter@0000000002pjava.nio.HeapCharBuffer@0000000004porg.apache.commons.csv.CSVFormat@0000000001pjava.nio.StringCharBuffer@0000000005pjava.lang.Object@0000000006pjava.nio.StringCharBuffer@0000000005");
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1412, 1412);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>(hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      Integer integer0 = new Integer(1412);
      Integer integer1 = new Integer('p');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")";
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) ")";
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) hashSet0;
      objectArray0[7] = (Object) integer1;
      objectArray0[8] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('k');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) appendable0;
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("lnHY");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("lnHY", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printStream0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      String[] stringArray0 = new String[5];
      cSVFormat1.format(stringArray0);
      cSVFormat1.format(stringArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '}';
      charArray0[2] = '>';
      charArray0[3] = '%';
      charArray0[4] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Character.valueOf('3');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape((Character) '3');
      cSVFormat2.withNullString("\"\",\"\",\"\",\"\",\"\"");
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      try { 
        cSVPrinter0.printRecord((Object[]) stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      int int0 = 1466;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1466);
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1466).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('k');
      Character character0 = new Character('t');
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withNullString((String) null);
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat6.print(stringWriter0);
      CSVFormat cSVFormat7 = cSVFormat0.withCommentStart('s');
      CSVFormat cSVFormat8 = cSVFormat7.withQuoteChar('s');
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat8;
      cSVFormat4.format(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter1);
      cSVPrinter1.printRecord(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      linkedHashSet0.retainAll(linkedList0);
      Short short0 = new Short((short)7);
      linkedHashSet0.add(short0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      CharBuffer charBuffer1 = charBuffer0.append('p');
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVPrinter0.printComment("EiQL-S_@+m");
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) linkedHashSet0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) linkedHashSet0;
      objectArray0[3] = (Object) charBuffer1;
      objectArray0[4] = (Object) "EiQL-S_@+m";
      objectArray0[5] = (Object) "EiQL-S_@+m";
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1228, charBuffer0.remaining());
      assertEquals(184, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1412, 1412);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>(hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      Integer integer0 = new Integer(1412);
      Integer integer1 = Integer.getInteger(")", integer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(integer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      linkedHashSet0.retainAll(linkedList0);
      Short short0 = new Short((short)7);
      linkedHashSet0.add(short0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      cSVPrinter0.flush();
      charBuffer0.append('p');
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVPrinter0.printComment("EiQL-S_@+m");
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedList0);
      assertEquals(1, charBuffer0.position());
      assertEquals(1411, charBuffer0.remaining());
      
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertEquals(1385, charBuffer0.length());
      assertEquals(27, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 2);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printComment("");
      try { 
        cSVPrinter0.print(objectArray0[3]);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat.newFormat(';');
      CharBuffer charBuffer0 = CharBuffer.allocate(1412);
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      linkedHashSet0.retainAll(linkedList0);
      Short short0 = new Short((short)7);
      Short short1 = new Short((short) (-474));
      linkedHashSet0.add(short1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter0.flush();
      charBuffer0.append('D');
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVPrinter0.printComment("EiQL-S_@+m");
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printComment("");
      assertEquals(57, charBuffer0.position());
      assertEquals(1355, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('k');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) appendable0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]\"l`(c6h~T}T");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", sQLTimeoutException0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(batchUpdateException0);
      cSVPrinter0.print(objectArray0[5]);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")M6NT2R\"o/<S_C:3|W");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator("<PH");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('\\');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Y');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "out";
      stringArray0[1] = "org.apache.commons.csv.Quote";
      stringArray0[2] = "Tk 7h~Nw[<;pu%{y=";
      stringArray0[3] = " SkipHeaderRecord:";
      stringArray0[4] = "";
      stringArray0[5] = "^F{P?Bck+lO";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.Quote");
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter(769);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      stringWriter0.append('d');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter1);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 2);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      File file0 = MockFile.createTempFile(": ,oT5qwHK;AUQUv", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      mockPrintStream0.append((CharSequence) "");
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream1.printf("", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '\'';
      charArray0[2] = '3';
      charArray0[3] = 'r';
      charArray0[4] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('r');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('R');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('R');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('R')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('k');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) appendable0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat4.format(objectArray0);
      cSVPrinter0.printComment("}w,8");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 2);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVPrinter", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
      cSVFormat2.withRecordSeparator('<');
      cSVFormat2.withDelimiter('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment((String) null);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      PriorityQueue<PipedWriter> priorityQueue1 = new PriorityQueue<PipedWriter>((Collection<? extends PipedWriter>) priorityQueue0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      File file0 = MockFile.createTempFile("cd!xah{vHlmc", "cd!xah{vHlmc");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('?');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)cSVPrinter0.getOut();
      assertEquals(0, charArrayWriter1.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('k');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '?';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = '?';
      charArray0[5] = '?';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('k');
      cSVPrinter0.printComment("Cx>BmcAsaMB&");
      CSVPrinter cSVPrinter1 = cSVFormat4.print(stringWriter0);
      cSVPrinter1.close();
      CSVPrinter cSVPrinter2 = new CSVPrinter(appendable0, cSVFormat2);
      cSVPrinter2.printComment("?-mM{e)bNUqo@{O,r7)");
      cSVPrinter2.close();
      cSVPrinter2.close();
      cSVPrinter2.flush();
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>();
      cSVPrinter2.printRecord((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      int int0 = 1466;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1466);
      charArrayWriter0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      char char0 = '-';
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('-');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1113
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('?');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withRecordSeparator("format");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('Y');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "out";
      stringArray0[1] = "org.apache.commons.csv.Quote";
      stringArray0[2] = "Tk 7h~Nw[<;pu%{y=";
      stringArray0[3] = " SkipHeaderRecord:";
      stringArray0[4] = "";
      stringArray0[5] = "^F{P?Bck+lO";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      StringWriter stringWriter0 = new StringWriter(769);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals(6, stringArray0.length);
  }
}
