/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 13:38:01 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicReferenceDeserializer_ESTest extends AtomicReferenceDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, false, javaType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 276);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, valueInstantiator_Base0, asWrapperTypeDeserializer0, fromStringDeserializer_Std0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, true, javaType0);
      AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved(asArrayTypeDeserializer0, fromStringDeserializer_Std0);
      assertNotSame(atomicReferenceDeserializer0, atomicReferenceDeserializer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, false, javaType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 276);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, valueInstantiator_Base0, asWrapperTypeDeserializer0, fromStringDeserializer_Std0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue((Object) null);
      Object object0 = atomicReferenceDeserializer0.getReferenced(atomicReference0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, classNameIdResolver0, "r[jHc8Cm?o)6l^x", false, arrayType0, jsonTypeInfo_As0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(arrayType0, (ValueInstantiator) null, asPropertyTypeDeserializer0, jsonDeserializer0);
      Object object0 = atomicReferenceDeserializer0.getEmptyValue((DeserializationContext) null);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue(object0);
      Object object1 = atomicReferenceDeserializer0.getReferenced(atomicReference0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, false, javaType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 276);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, valueInstantiator_Base0, asWrapperTypeDeserializer0, fromStringDeserializer_Std0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext_Impl0);
      assertEquals("null", atomicReference0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "=A5#]zux7+b", false, (JavaType) null);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, asArrayTypeDeserializer0, (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        atomicReferenceDeserializer0.updateReference((AtomicReference<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, true, javaType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 276);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, valueInstantiator_Base0, asWrapperTypeDeserializer0, fromStringDeserializer_Std0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>((String) null);
      AtomicReference<Object> atomicReference1 = atomicReferenceDeserializer0.referenceValue(atomicReference0);
      AtomicReference<Object> atomicReference2 = atomicReferenceDeserializer0.updateReference(atomicReference1, (Object) null);
      assertEquals("null", atomicReference2.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "^%S@]ZmyIF\"p", true, (JavaType) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, asWrapperTypeDeserializer0, jsonDeserializer0);
      Boolean boolean0 = atomicReferenceDeserializer0.supportsUpdate((DeserializationConfig) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "^%S@]ZmyIF\"p", true, (JavaType) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, asWrapperTypeDeserializer0, jsonDeserializer0);
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer1 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved(asWrapperTypeDeserializer0, jsonDeserializer1);
      assertFalse(atomicReferenceDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, valueInstantiator_Base0, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        atomicReferenceDeserializer0.getReferenced((AtomicReference<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", e);
      }
  }
}
