/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 13:35:14 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import java.time.format.ResolverStyle;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicReferenceDeserializer_ESTest extends AtomicReferenceDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1039));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "cM`8JdgS]|kv:n#[aQu", false, javaType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Bogus0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, (ValueInstantiator) null, typeDeserializer0, jsonDeserializer0);
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved(asExternalTypeDeserializer0, jsonDeserializer1);
      assertEquals(AccessPattern.DYNAMIC, atomicReferenceDeserializer1.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, valueInstantiator_Base0, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue("");
      Integer integer0 = new Integer(60000);
      AtomicReference<Object> atomicReference1 = atomicReferenceDeserializer0.updateReference(atomicReference0, (Object) integer0);
      assertEquals("60000", atomicReference1.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", false, resolvedRecursiveType0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(resolvedRecursiveType0, valueInstantiator_Base0, asPropertyTypeDeserializer0, jsonDeserializer0);
      AtomicReference<Object> atomicReference0 = new AtomicReference<Object>();
      Object object0 = atomicReferenceDeserializer0.getReferenced(atomicReference0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, valueInstantiator_Base0, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext_Impl0);
      assertEquals("null", atomicReference0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        atomicReferenceDeserializer0.updateReference((AtomicReference<Object>) null, (Object) objectNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class1, 2099);
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, valueInstantiator_Base0, (TypeDeserializer) null, fromStringDeserializer_Std0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = atomicReferenceDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      assertEquals("null", object0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1039));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "cM`8JdgS]|kv:n#[aQu", false, javaType0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, (ValueInstantiator) null, asExternalTypeDeserializer0, jsonDeserializer0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue("cM`8JdgS]|kv:n#[aQu");
      Object object0 = atomicReferenceDeserializer0.getReferenced(atomicReference0);
      assertEquals("cM`8JdgS]|kv:n#[aQu", object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1039));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "cM`8JdgS]|kv:n#[aQu", false, javaType0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(javaType0, (ValueInstantiator) null, asExternalTypeDeserializer0, jsonDeserializer0);
      Boolean boolean0 = atomicReferenceDeserializer0.supportsUpdate((DeserializationConfig) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        atomicReferenceDeserializer0.getReferenced((AtomicReference<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", e);
      }
  }
}
