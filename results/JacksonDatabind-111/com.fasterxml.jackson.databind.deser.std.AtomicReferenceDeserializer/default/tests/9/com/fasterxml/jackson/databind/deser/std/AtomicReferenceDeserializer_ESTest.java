/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 13:45:19 GMT 2020
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicReferenceDeserializer_ESTest extends AtomicReferenceDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, ",(~\"~QRJGjk:X", true, mapLikeType0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionLikeType0, (ValueInstantiator) null, asArrayTypeDeserializer0, jsonDeserializer0);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer1 = atomicReferenceDeserializer0.withResolved((TypeDeserializer) null, jsonDeserializer1);
      assertEquals(AccessPattern.DYNAMIC, atomicReferenceDeserializer1.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      AtomicReference<Object> atomicReference0 = new AtomicReference<Object>();
      Object object0 = atomicReferenceDeserializer0.getReferenced(atomicReference0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        atomicReferenceDeserializer0.updateReference((AtomicReference<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        atomicReferenceDeserializer0.getReferenced((AtomicReference<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, classNameIdResolver0, ")r-LzE3", false, collectionType0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, asArrayTypeDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext_Impl0);
      assertEquals("null", atomicReference0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, classNameIdResolver0, ")r-LzE3", false, collectionType0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, asArrayTypeDeserializer0, jsonDeserializer0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue(collectionType0);
      AtomicReference<Object> atomicReference1 = atomicReferenceDeserializer0.updateReference(atomicReference0, (Object) class1);
      assertSame(atomicReference1, atomicReference0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, classNameIdResolver0, ")r-LzE3", false, collectionType0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, asArrayTypeDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = atomicReferenceDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      assertEquals("null", object0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, classNameIdResolver0, ")r-LzE3", false, collectionType0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer(collectionType0, valueInstantiator_Base0, asArrayTypeDeserializer0, jsonDeserializer0);
      AtomicReference<Object> atomicReference0 = atomicReferenceDeserializer0.referenceValue(collectionType0);
      CollectionType collectionType1 = (CollectionType)atomicReferenceDeserializer0.getReferenced(atomicReference0);
      assertTrue(collectionType1.isContainerType());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AtomicReferenceDeserializer atomicReferenceDeserializer0 = new AtomicReferenceDeserializer((JavaType) null, (ValueInstantiator) null, (TypeDeserializer) null, (JsonDeserializer<?>) null);
      Boolean boolean0 = atomicReferenceDeserializer0.supportsUpdate((DeserializationConfig) null);
      assertTrue(boolean0);
  }
}
