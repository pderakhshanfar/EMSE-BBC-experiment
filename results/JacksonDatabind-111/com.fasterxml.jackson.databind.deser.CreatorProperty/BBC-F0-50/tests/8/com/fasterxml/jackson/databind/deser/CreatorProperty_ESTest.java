/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 23:18:51 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.WritableTypeId;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.text.DateFormat;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = null;
      JavaType javaType1 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType1, (TypeIdResolver) null, "No fallback setter/field defined for creator property '", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, "No fallback setter/field defined for creator property '", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, creatorProperty1, false);
      PipedReader pipedReader0 = new PipedReader(3);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with((SubtypeResolver) stdSubtypeResolver0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(linkedHashMap0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, deserializationConfig2, readerBasedJsonParser0, injectableValues_Std0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No injectable id with value 'No fallback setter/field defined for creator property '' found (for property '')
         //
         verifyException("com.fasterxml.jackson.databind.InjectableValues$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1321L);
      Random.setNextRandom(15711167);
      PropertyName propertyName0 = new PropertyName("", "");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      PropertyName propertyName2 = PropertyName.NO_NAME;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "Lh]VY", false, mapType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) mapType0, (JavaType) mapType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, (-584));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, mapType0, propertyName2, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter1, 15711167, mapType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      AnnotatedMember annotatedMember0 = creatorProperty1.getMember();
      assertNotNull(annotatedMember0);
      assertEquals(15711167, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      collectionLikeType0.getTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      NamedType namedType0 = new NamedType(class0, "[collection-like type; class java.lang.String, contains [recursive type; UNRESOLVED]");
      try { 
        creatorProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl2, namedType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.String' as a subtype of [recursive type; UNRESOLVED: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Cgay");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      resolvedRecursiveType0.findSuperType(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      resolvedRecursiveType0.isTypeOrSuperTypeOf(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      try { 
        settableBeanProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "Cs%1-Y[*1o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cs%1-Y[*1o%y82D");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*1o%y82D", false, javaType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2404), asExternalTypeDeserializer0, propertyMetadata0);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      String string0 = creatorProperty0._managedReferenceName;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0._propertyIndex = 471;
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withName(propertyName0);
      assertEquals((-2404), settableBeanProperty2.getCreatorIndex());
      assertTrue(settableBeanProperty2.hasValueDeserializer());
      assertEquals((-2404), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertEquals(2310, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
      
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      creatorProperty0.withNullProvider(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
      
      creatorProperty0.withName(propertyName1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(2310, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Cgay");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      resolvedRecursiveType0.isTypeOrSuperTypeOf(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      try { 
        settableBeanProperty0.set("Property '%s' (type %s) has no injectable value id configured", resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("|i4:+I$EV", "|i4:+I$EV");
      JavaType javaType0 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "|i4:+I$EV", true, (JavaType) null);
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName2 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName.construct("|i4:+I$EV", "|i4:+I$EV");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, "|i4:+I$EV", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 7);
      Class<SimpleModule> class0 = SimpleModule.class;
      classArray0[0] = class0;
      Class<SimpleModule> class1 = SimpleModule.class;
      classArray0[1] = class1;
      Class<SimpleModule> class2 = SimpleModule.class;
      classArray0[2] = class2;
      Class<SimpleModule> class3 = SimpleModule.class;
      classArray0[3] = class3;
      Class<SimpleModule> class4 = SimpleModule.class;
      classArray0[4] = class4;
      Class<SimpleModule> class5 = SimpleModule.class;
      classArray0[5] = class5;
      Class<SimpleModule> class6 = SimpleModule.class;
      classArray0[6] = class6;
      creatorProperty1.setViews(classArray0);
      propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName2);
      creatorProperty2._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      creatorProperty2.toString();
      System.setCurrentTimeMillis((-9223372036854775808L));
      System.setCurrentTimeMillis((-9223372036854775808L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName1, javaType0, propertyName2, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, "|i4:+I$EV", propertyMetadata0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, creatorProperty3, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      try { 
        creatorProperty2.deserializeAndSet(readerBasedJsonParser0, defaultDeserializationContext_Impl1, "|i4:+I$EV");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '|i4:+I$EV'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = null;
      JavaType javaType1 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType1, (TypeIdResolver) null, "|i4:I)^$EuV", false, javaType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-955), "|i4:I)^$EuV", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, creatorProperty1, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet(readerBasedJsonParser0, defaultDeserializationContext_Impl0, javaType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      creatorProperty1.toString();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(2310, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 733, javaType0, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "Cs%1-Y[*1o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cs%1-Y[*1o%y82D");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*1o%y82D", false, javaType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2404), asExternalTypeDeserializer0, propertyMetadata0);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name 'Cs%1-Y[*1o%y82D'; inject id '[com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer; base-type:[simple type, class java.lang.Object]; id-resolver: null]']", string0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0._propertyIndex = 0;
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withName(propertyName0);
      assertEquals((-2404), settableBeanProperty2.getCreatorIndex());
      assertTrue(settableBeanProperty2.hasValueDeserializer());
      assertEquals((-2404), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-12), (Object) null, propertyMetadata0);
      creatorProperty0.withName((PropertyName) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(creatorProperty0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-241), javaType0, propertyMetadata0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-127);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        creatorProperty1.set(byteArrayInputStream0, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*o%y82D", false, javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 593, asExternalTypeDeserializer0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName1);
      creatorProperty0.getValueDeserializer();
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty2);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType1, (TypeIdResolver) null, "Cs%1-Y[*o%y82D", false, javaType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName1 = new PropertyName(" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName1, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1666, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonParser jsonParser0 = null;
      creatorProperty0.getObjectIdInfo();
      creatorProperty0.setObjectIdInfo((ObjectIdInfo) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      propertyName0.internSimpleName();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      Object object0 = new Object();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl2, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*o%y82D", "Cs%1-Y[*o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*o%y82D", false, javaType0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.disableDefaultTyping();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      char[] charArray0 = new char[3];
      charArray0[1] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2184), objectMapper0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet(readerBasedJsonParser0, deserializationContext0, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "Cs%1-Y[*1o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*1o%y82D", false, javaType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer1, (Annotations) null, (AnnotatedParameter) null, (-2404), asExternalTypeDeserializer0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory1.createParser((byte[]) null, (int) (byte) (-58), 0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, asExternalTypeDeserializer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'Cs%1-Y[*1o%y82D'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*o%y82D", "Cs%1-Y[*o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*o%y82D", false, javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2404), "Cs%1-Y[*o%y82D", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)0;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, 364, (int) (byte) (-33));
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'Cs%1-Y[*o%y82D'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      JavaType javaType0 = TypeFactory.unknownType();
      boolean boolean0 = false;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      asExternalTypeDeserializer0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      int int0 = 3749;
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, (AnnotationMap) null, 3749);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, annotatedParameter0, 1359, simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.getName();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      IOContext iOContext0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      asExternalTypeDeserializer0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, (AnnotationMap) null, 3749);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, annotatedParameter0, 1359, simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      typeResolutionContext_Basic0.resolveType(javaType0);
      creatorProperty2.getName();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "", false, javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2404), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "Cs%1-Y[*1o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*1o%y82D", false, javaType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2404), asExternalTypeDeserializer0, propertyMetadata0);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name 'Cs%1-Y[*1o%y82D'; inject id '[com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer; base-type:[simple type, class java.lang.Object]; id-resolver: null]']", string0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0._propertyIndex = 0;
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals((-2404), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "Cs%1-Y[*1o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Cs%1-Y[*1o%y82D", false, javaType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, (TypeResolutionContext) null, (AnnotationMap) null, (-2404));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations((AnnotationMap) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, annotatedParameter1, 2371, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.toString();
      JsonDeserializer<NullNode> jsonDeserializer0 = (JsonDeserializer<NullNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, "[creator property, name 'Cs%1-Y[*1o%y82D'; inject id 'null']");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName0.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      typeBindings0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-1548));
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) objectIdGenerators_IntSequenceGenerator0, (Object) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "Illegal unquoted character (", true, arrayType0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, resolvedRecursiveType0, propertyName0, (AnnotatedMember) null, propertyMetadata1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Std0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, resolvedRecursiveType0, propertyName1, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-18), (Object) null, propertyMetadata1);
      arrayType0.withStaticTyping();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "f");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "f", true, javaType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer1, (Annotations) null, (AnnotatedParameter) null, (-2404), asExternalTypeDeserializer0, propertyMetadata0);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.markAsIgnorable();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.toString();
      creatorProperty2.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.toString();
      assertTrue(creatorProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      System.setCurrentTimeMillis(2);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.METADATA_PROPERTY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName1, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 1250, writableTypeId_Inclusion0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertEquals(1250, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("ACCEPT_SINGLE_VALUE_AS_ARRAY");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls1);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, resolvedRecursiveType0, propertyName0, asArrayTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1889), typeBindings0, propertyMetadata2);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asArrayTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1889), typeBindings0, propertyMetadata1);
      creatorProperty2.markAsIgnorable();
      assertTrue(creatorProperty2.isIgnorable());
      
      creatorProperty1.getAnnotation(class2);
      creatorProperty1.fixAccess((DeserializationConfig) null);
      assertEquals((-1889), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1L);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 498, (Object) null, propertyMetadata0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      PropertyName propertyName2 = new PropertyName("");
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName2);
      creatorProperty2.isIgnorable();
      assertEquals(498, creatorProperty2.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(498, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1735L);
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "f");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "f", false, javaType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer1, (Annotations) null, (AnnotatedParameter) null, (-943), byteArrayInputStream0, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-943), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      typeBindings0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) propertyName1, (Object) propertyName2);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "java.lang.String", true, arrayType0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("<>");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, arrayType0, propertyName1, (AnnotatedMember) null, propertyMetadata0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Std0);
      PropertyName propertyName3 = new PropertyName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, resolvedRecursiveType0, propertyName3, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-28), beanProperty_Std0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName2);
      CreatorProperty creatorProperty3 = null;
      try {
        creatorProperty3 = new CreatorProperty((CreatorProperty) null, propertyName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      System.setCurrentTimeMillis(2);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.METADATA_PROPERTY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName1, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 1250, writableTypeId_Inclusion0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertEquals(1250, creatorProperty2.getCreatorIndex());
      
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(1250, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      typeBindings0.toString();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) propertyName1, (Object) propertyName2);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "java.lang.String", true, arrayType0);
      PropertyName propertyName3 = new PropertyName("", "java.lang.String");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, arrayType0, propertyName3, (AnnotatedMember) null, propertyMetadata0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Std0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asExternalTypeDeserializer1, beanProperty_Std0);
      valueInstantiator_Base0.getValueTypeDesc();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName2, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.isIgnorable();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '#';
      charArray0[2] = 'a';
      charArray0[3] = 's';
      charArray0[4] = '/';
      charArray0[5] = '2';
      charArray0[6] = ':';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper2, charsToNameCanonicalizer0, charArray0, 33, 0, true);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Object object0 = new Object();
      try { 
        creatorProperty0.deserializeAndSet(readerBasedJsonParser0, deserializationContext0, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) propertyName1, (Object) propertyName2);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "java.lang.String", true, arrayType0);
      PropertyName propertyName3 = new PropertyName("", "java.lang.String");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, arrayType0, propertyName3, (AnnotatedMember) null, propertyMetadata0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Std0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asExternalTypeDeserializer1, beanProperty_Std0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName2, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.isIgnorable();
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(collectionLikeType0);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1309), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      defaultDeserializationContext_Impl0.copy();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl1, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "P5operty '%s' (typep%s) has no injectable valueJid coffigured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      System.setCurrentTimeMillis(2310);
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.PAYLOAD_PROPERTY;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class1 = Annotation.class;
      annotationMap1.get(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2310, (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals(2310, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      PropertyName propertyName2 = PropertyName.construct("", "Cgay");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      resolvedRecursiveType0.isTypeOrSuperTypeOf(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      Class<String> class1 = String.class;
      FromStringDeserializer.findDeserializer(class1);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      NullNode nullNode0 = NullNode.getInstance();
      try { 
        creatorProperty0.set(class0, nullNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) propertyName1, (Object) propertyName2);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "java.lang.String", true, arrayType0);
      PropertyName propertyName3 = new PropertyName("", "");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, arrayType0, propertyName3, (AnnotatedMember) null, propertyMetadata0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Std0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asExternalTypeDeserializer1, beanProperty_Std0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName2, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.isIgnorable();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = PropertyName.NO_NAME;
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withName(propertyName2);
      assertEquals(2310, settableBeanProperty2.getCreatorIndex());
      assertEquals(2310, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-256), asArrayTypeDeserializer0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals((-256), settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty1.toString();
      assertEquals((-256), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      PropertyName propertyName2 = propertyName1.internSimpleName();
      classNameIdResolver0.idFromBaseType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertEquals(2310, creatorProperty1.getCreatorIndex());
      
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertEquals(2310, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty1.getCreatorIndex();
      Integer integer0 = new Integer(7);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName2, class0, class2, class3);
      settableBeanProperty0._objectIdInfo = objectIdInfo0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Cs%1-Y[*1o%y82D", "Cs%1-Y[*1o%y82D");
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "G.^DR|Mg/N[du<f,[3K", false, javaType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name 'Cs%1-Y[*1o%y82D'; inject id '{Cs%1-Y[*1o%y82D}Cs%1-Y[*1o%y82D']", string0);
      
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      PropertyName propertyName2 = PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Cgay");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, resolvedRecursiveType0, propertyName1, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-32768), classNameIdResolver0, propertyMetadata1);
      JsonDeserializer<WritableTypeId.Inclusion> jsonDeserializer0 = (JsonDeserializer<WritableTypeId.Inclusion>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName3 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName3);
      assertEquals((-32768), creatorProperty2.getCreatorIndex());
      
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<Object> class1 = Object.class;
      FromStringDeserializer.findDeserializer(class1);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer1 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, jsonDeserializer1, (NullValueProvider) null);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class2 = Integer.class;
      classArray0[0] = class2;
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty3.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertFalse(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      PropertyName.construct("Property '%s' (type %s) has no injectable value id configured", "Cgay");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      resolvedRecursiveType0.isTypeOrSuperTypeOf(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      try { 
        settableBeanProperty0.set("Property '%s' (type %s) has no injectable value id configured", resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "+l>nK$\"J.KN", false, javaType0);
      Class<String> class0 = String.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(30);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Class<Collection> class2 = Collection.class;
      typeFactory0.constructCollectionType(class2, class2);
      valueInstantiator_Base0.getIncompleteParameter();
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.WRAPPER_OBJECT;
      Boolean boolean0 = new Boolean("+l>nK$\"JKN");
      Integer integer0 = new Integer(30);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "+l>nK$\"J.KN", integer0, "");
      Integer.getInteger("");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 30, writableTypeId_Inclusion0, propertyMetadata1);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.isIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(30, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext0, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty2.setFallbackSetter(creatorProperty0);
      creatorProperty0.withName(propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer((-1099));
      try { 
        creatorProperty1.setAndReturn(simpleObjectIdResolver0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonDeserializer<WritableTypeId.Inclusion> jsonDeserializer0 = (JsonDeserializer<WritableTypeId.Inclusion>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.withName(propertyName0);
      assertEquals(2310, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      classNameIdResolver0.idFromBaseType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", false, resolvedRecursiveType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2310, classNameIdResolver0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertEquals(2310, creatorProperty1.getCreatorIndex());
      
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      FromStringDeserializer.findDeserializer(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(2310, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "+l>nK$\"J.KN", false, javaType0);
      Class<String> class0 = String.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(30);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Class<Collection> class2 = Collection.class;
      typeFactory0.constructCollectionType(class2, class2);
      valueInstantiator_Base0.getIncompleteParameter();
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.WRAPPER_OBJECT;
      Boolean boolean0 = new Boolean("+l>nK$\"J.KN");
      Integer integer0 = new Integer(30);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "+l>nK$\"J.KN", integer0, "");
      Integer.getInteger("");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 30, writableTypeId_Inclusion0, propertyMetadata1);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.isIgnorable();
      assertEquals(30, creatorProperty0.getCreatorIndex());
      
      creatorProperty0.getMember();
      assertEquals(30, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "+l>nK$\"J.KN", false, javaType0);
      Class<String> class0 = String.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(30);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      Class<Collection> class2 = Collection.class;
      typeFactory0.constructCollectionType(class2, class2);
      valueInstantiator_Base0.getIncompleteParameter();
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.WRAPPER_OBJECT;
      Boolean boolean0 = new Boolean("+l>nK$\"J.KN");
      Integer integer0 = new Integer(30);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "+l>nK$\"J.KN", integer0, "");
      Integer.getInteger("");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex((Integer) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 30, writableTypeId_Inclusion0, propertyMetadata1);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.isIgnorable();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      deserializationFeatureArray0[7] = deserializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      Locale locale0 = Locale.ROOT;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(2, locale0);
      ObjectMapper objectMapper2 = objectMapper1.setDateFormat(dateFormat0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper3 = objectMapper2.disable(mapperFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
