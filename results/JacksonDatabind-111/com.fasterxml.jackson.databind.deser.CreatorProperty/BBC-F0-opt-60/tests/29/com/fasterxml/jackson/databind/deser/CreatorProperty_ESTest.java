/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 16:31:48 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.LinkedHashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NullNode nullNode0 = jsonNodeFactory0.nullNode();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, nullNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.assignIndex(0);
      creatorProperty1.withName((PropertyName) null);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<SerializationFeature> jsonDeserializer0 = (JsonDeserializer<SerializationFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      settableBeanProperty0.assignIndex(0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 108, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName.construct("ubS)", (String) null);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-6), objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Integer integer0 = new Integer((-6));
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2124, (Object) null, propertyMetadata0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      creatorProperty0.fixAccess((DeserializationConfig) null);
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4, (Object) null, propertyMetadata0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(2124, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(2124, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2124, (Object) null, propertyMetadata0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdInfo objectIdInfo0 = creatorProperty0._objectIdInfo;
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      JsonDeserializer<LongNode> jsonDeserializer1 = (JsonDeserializer<LongNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty0;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!mb|^!$cY");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, classNameIdResolver0, "", true, placeholderForType0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Bogus0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      beanDeserializerBuilder0.getBuildMethod();
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      beanSerializerBuilder0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, typeDeserializer0, (Annotations) null, annotatedParameter0, 1, "!mb|^!$cY", propertyMetadata1);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.getAnnotation(class0);
      assertEquals(1, creatorProperty0.getCreatorIndex());
      
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNotNull(annotatedMember0);
      assertEquals(1, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2124, (Object) null, propertyMetadata0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      JsonDeserializer<LongNode> jsonDeserializer1 = (JsonDeserializer<LongNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer1, jsonDeserializer1);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, (PropertyName) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty2;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1194, valueInstantiator_Base0, propertyMetadata0);
      Class<SimpleObjectIdResolver>[] classArray0 = (Class<SimpleObjectIdResolver>[]) Array.newInstance(Class.class, 1);
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      classArray0[0] = class1;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withName((PropertyName) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0.set((Object) null, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      JavaType javaType0 = referenceType1.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType1, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getCreatorIndex();
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 38, (Object) null, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl1, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
      
      Class<JavaType> class5 = JavaType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class5);
      creatorProperty0.withNullProvider(fromStringDeserializer_Std0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1383, objectIdResolver0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object object0 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, deserializationContext0, jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, classNameIdResolver0, "", true, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, typeResolutionContext_Basic0, annotationMap0, 4722);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1812, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1477, simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      LinkedHashMap<String, JsonNode> linkedHashMap0 = new LinkedHashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, linkedHashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("I.6]}{B9a8xPmT0Z");
      TextNode textNode0 = arrayNode0.textNode("I.6]}{B9a8xPmT0Z");
      JsonParser jsonParser0 = objectReader0.treeAsTokens(textNode0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet(jsonParser0, (DeserializationContext) null, jsonNodeFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Object object0 = new Object();
      creatorProperty0.getMember();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(2, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = null;
      TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      int int0 = 2536;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TypeDeserializer typeDeserializer0 = null;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JavaType javaType0 = null;
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, (AnnotatedMember) null, propertyMetadata1);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2536, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      valueInstantiator_Base0.getIncompleteParameter();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Integer integer0 = new Integer(2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        creatorProperty0.setAndReturn(beanProperty_Bogus0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeDeserializer typeDeserializer0 = null;
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Annotations annotations0 = null;
      valueInstantiator_Base0.getIncompleteParameter();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      LongNode longNode0 = new LongNode(0L);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, longNode0, propertyMetadata0);
      Integer integer0 = new Integer(2);
      creatorProperty0.withName(propertyName0);
      Object object0 = new Object();
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName.construct("ubS)", (String) null);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Integer integer0 = new Integer(2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      Object object0 = new Object();
      try { 
        creatorProperty0.set(valueInstantiator_Base0, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Integer integer0 = new Integer(2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      Object object0 = new Object();
      try { 
        creatorProperty0.setAndReturn(objectIdGenerators_StringIdGenerator0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      int int0 = 2;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1505, valueInstantiator_Base0, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
      CreatorProperty creatorProperty2 = null;
      try {
        creatorProperty2 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      Object object0 = new Object();
      beanProperty_Bogus0.getWrapperName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty1.set(object1, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType1 = typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType1, typeResolutionContext_Basic0, (AnnotationMap) null, 2);
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations((AnnotationMap) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.SET;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType1, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, annotatedParameter1, (-1335), class0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals((-1335), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      boolean boolean0 = true;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, classNameIdResolver0, (String) null, true, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, pipedInputStream0, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator1 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata1.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-11), objectIdGenerators_StringIdGenerator0, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-11), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.TYPE;
      Class<Integer> class2 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, classNameIdResolver0, "", true, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, (Object) null, propertyMetadata0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(decimalNode0, pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withMergeInfo((PropertyMetadata.MergeInfo) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals(2, creatorProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      PropertyName propertyName0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      typeFactory0.constructMapLikeType((Class<?>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[0], (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2521, propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = 2;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      objectMapper1.getDeserializationContext();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, (DeserializationContext) null, jsonFactory1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      PropertyName propertyName0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[0], (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = 2;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, deserializationContext0, valueInstantiator_Base0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("(y;Sp#La' icQoCJ", "(y;Sp#La' icQoCJ");
      Class<JsonNode> class0 = JsonNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 68);
      coreXMLDeserializers_Std0.getValueType();
      boolean boolean0 = false;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
      Class<InputStream> class1 = InputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Nulls nulls0 = Nulls.SKIP;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 68, (Object) null, propertyMetadata2);
      DeserializationContext deserializationContext0 = null;
      Integer integer0 = new Integer(68);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("(y;Sp#La' icQoCJ", "(y;Sp#La' icQoCJ");
      Class<JsonNode> class0 = JsonNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 68);
      coreXMLDeserializers_Std0.getValueType();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
      Class<InputStream> class1 = InputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-333), (Object) null, propertyMetadata0);
      creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2, objectIdGenerators_StringIdGenerator0, propertyMetadata1);
      JsonDeserializer<JsonParser.Feature> jsonDeserializer0 = (JsonDeserializer<JsonParser.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[0], (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = 1985;
      JsonDeserializer<JsonParser.Feature> jsonDeserializer0 = (JsonDeserializer<JsonParser.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.toString();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals(2536, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("(y;Sp#La' icQoCJ", "(y;Sp#La' icQoCJ");
      Class<JsonNode> class0 = JsonNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 68);
      coreXMLDeserializers_Std0.getValueType();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
      Class<InputStream> class1 = InputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.SKIP;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 68, (Object) null, propertyMetadata2);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name '(y;Sp#La' icQoCJ'; inject id 'null']", string0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      assertEquals(68, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      JavaType[] javaTypeArray0 = new JavaType[1];
      PropertyName propertyName1 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[0], (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = 1985;
      valueInstantiator_Base0.getValueTypeDesc();
      JsonDeserializer<JsonParser.Feature> jsonDeserializer0 = (JsonDeserializer<JsonParser.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withName(propertyName0);
      try { 
        creatorProperty0.set("", (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[0], (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = 1985;
      JsonDeserializer<JsonParser.Feature> jsonDeserializer0 = (JsonDeserializer<JsonParser.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2536, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("(y;Sp#La' icQoCJ", "(y;Sp#La' icQoCJ");
      Class<JsonNode> class0 = JsonNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 68);
      coreXMLDeserializers_Std0.getValueType();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
      Class<InputStream> class1 = InputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Nulls nulls0 = Nulls.SKIP;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 68, (Object) null, propertyMetadata2);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name '(y;Sp#La' icQoCJ'; inject id 'null']", string0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(coreXMLDeserializers_Std0);
      assertEquals(68, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaTypeArray0[0], propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      asExternalTypeDeserializer0.baseTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals(2, creatorProperty1.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(2, int0);
      
      creatorProperty0.getInjectableValueId();
      assertEquals(2, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaTypeArray0[0], propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class0);
      asExternalTypeDeserializer0.baseTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, typeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      assertEquals(0, creatorProperty2.getCreatorIndex());
      
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty3.getAnnotation(class3);
      creatorProperty1.getCreatorIndex();
      creatorProperty3.withName(propertyName0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class1 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, (String) null, true, javaTypeArray0[0]);
      Integer integer0 = new Integer(0);
      propertyMetadata0.withIndex(integer0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, propertyMetadata0, propertyMetadata0);
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      Integer integer1 = Integer.valueOf((-1154));
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2536, integer1, propertyMetadata0);
      JsonDeserializer<LongNode> jsonDeserializer0 = (JsonDeserializer<LongNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      assertEquals(2536, creatorProperty2.getCreatorIndex());
      
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      int int0 = creatorProperty1.getCreatorIndex();
      assertSame(creatorProperty1, settableBeanProperty0);
      assertEquals(2536, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-5), propertyMetadata0, propertyMetadata0);
      Random.setNextRandom(655);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-5), settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, referenceType0);
      ReferenceType.upgradeFrom(referenceType0, referenceType1);
      JavaType javaType0 = referenceType1.withContentType(javaTypeArray0[0]);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, javaType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, simpleType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType1, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      Class<Module> class2 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), valueInstantiator_Base0, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getCreatorIndex();
      settableBeanProperty0.isIgnorable();
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1840), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      referenceType1.withContentType(mapType0);
      Class<Integer> class1 = Integer.class;
      SimpleType.constructUnsafe(class1);
      Class<String> class2 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "h.6!L", true, referenceType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class3 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      asExternalTypeDeserializer0.baseTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(1017);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 432, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      assertEquals(432, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, referenceType0);
      ReferenceType.upgradeFrom(referenceType0, referenceType1);
      JavaType javaType0 = referenceType1.withContentType(javaTypeArray0[0]);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, javaType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, simpleType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType1, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      Class<Module> class2 = Module.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), valueInstantiator_Base0, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<JsonNode> jsonDeserializer1 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer1);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals((-1840), settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(",zd", ",zd");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(referenceType1, javaTypeArray0[0]);
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      Class<Integer> class3 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 5);
      Class<Module> class4 = Module.class;
      classArray0[0] = class4;
      Class<Module> class5 = Module.class;
      classArray0[1] = class5;
      Class<Module> class6 = Module.class;
      classArray0[2] = class6;
      Class<Module> class7 = Module.class;
      classArray0[3] = class7;
      Class<Module> class8 = Module.class;
      classArray0[4] = class8;
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1840), settableBeanProperty0.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-1840), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      JavaType javaType0 = referenceType1.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "h.6!L", true, referenceType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType1, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = (AsExternalTypeDeserializer)asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      Class<Integer> class3 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      asExternalTypeDeserializer1.baseTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asExternalTypeDeserializer1, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.getMember();
      creatorProperty0.getAnnotation(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature1);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl1.copy();
      try { 
        creatorProperty0.deserializeAndSet(readerBasedJsonParser0, defaultDeserializationContext_Impl2, jsonFactory1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 1891, "Property '%s' (type %s) has no injectable value id configured", propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      referenceType1.containedTypeOrUnknown(1891);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1891, settableBeanProperty0.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(1891, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(referenceType1, javaTypeArray0[0]);
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      Class<Integer> class3 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1840), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-1840), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1840), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("h6!Lm");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "h6!Lm", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = (AsExternalTypeDeserializer)asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      asExternalTypeDeserializer1.baseTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asExternalTypeDeserializer1, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.getMember();
      creatorProperty0.getAnnotation(class3);
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withSimpleName("Property '%s' (type %s) has no injectable value id configured");
      creatorProperty0.getInjectableValueId();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = (AsExternalTypeDeserializer)asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      asExternalTypeDeserializer1.baseTypeName();
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asExternalTypeDeserializer1, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.getMember();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(referenceType1, javaTypeArray0[0]);
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      Class<Integer> class3 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      String string0 = creatorProperty0.toString();
      assertEquals((-1840), creatorProperty0.getCreatorIndex());
      assertEquals("[creator property, name ''; inject id 'class java.lang.String']", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Integer> class3 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class4 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class4);
      Class<JsonParser.Feature> class5 = JsonParser.Feature.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class3, (Annotation) null, class5, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, propertyName0, asExternalTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 3176, class5, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(3176, creatorProperty2.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getInjectableValueId();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      Class<Annotation> class5 = Annotation.class;
      settableBeanProperty0.getAnnotation(class5);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals((-1840), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<LongNode> jsonDeserializer0 = (JsonDeserializer<LongNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getAnnotation(class3);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.getMember();
      try { 
        creatorProperty0.setAndReturn(class0, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("Property '%s' (type %s) has no injectable value id configured");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType0 = referenceType2.withContentType(mapType0);
      Class<String> class1 = String.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) simpleType0);
      Class<JsonParser.Feature> class2 = JsonParser.Feature.class;
      referenceType0.findTypeParameters(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "Property '%s' (type %s) has no injectable value id configured", true, referenceType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType2, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, referenceType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Std1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class3, (Annotation) null);
      Class<Integer> class4 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class4);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, typeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1840), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getCreatorIndex();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertTrue(creatorProperty0.isIgnorable());
  }
}
