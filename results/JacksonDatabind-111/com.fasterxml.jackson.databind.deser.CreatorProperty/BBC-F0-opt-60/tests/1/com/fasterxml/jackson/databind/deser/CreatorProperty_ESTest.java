/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:05:14 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty1._ignorable = false;
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 59964, (Object) null, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-374), annotationMap0, propertyMetadata0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name '#temporary-name'; inject id '[null]']", string0);
      
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-374), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      FromStringDeserializer.findDeserializer(class0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-374), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(22, 22);
      TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 99, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._propertyIndex = 22;
      JsonDeserializer<JsonTypeInfo.As> jsonDeserializer1 = (JsonDeserializer<JsonTypeInfo.As>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(99, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      typeFactory0.constructArrayType((JavaType) arrayType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, (TypeResolutionContext) null, annotationMap0, (-843));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-203), valueInstantiator_Base0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertEquals((-203), creatorProperty0.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2458), class0, propertyMetadata0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      assertEquals((-2458), creatorProperty1.getCreatorIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      ArrayType arrayType1 = typeFactory0.constructArrayType(class1);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 52, arrayType1, propertyMetadata1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-2458), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      annotationMap0.annotations();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, arrayType0, propertyMetadata0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      try { 
        creatorProperty0.set((Object) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      PropertyName.construct("", "");
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 179, propertyName0, propertyMetadata0);
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap1, annotationMap1);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 22, 22);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap2, (AnnotatedParameter) null, 179, byteArrayInputStream0, propertyMetadata0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, classNameIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, arrayType0, propertyMetadata0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      try { 
        creatorProperty0.deserializeAndSet(jsonParser1, defaultDeserializationContext_Impl1, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      ArrayType arrayType1 = typeFactory0.constructArrayType((JavaType) arrayType0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, arrayType1, propertyMetadata0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyMetadata1, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(2, int0);
      
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName1);
      creatorProperty0.setFallbackSetter(settableBeanProperty1);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty0.withName((PropertyName) null);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.isIgnorable();
      assertEquals(2, creatorProperty0.getCreatorIndex());
      
      // Undeclared exception!
      try { 
        settableBeanProperty2.set(typeFactory0, propertyMetadata1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyMetadata1, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName1);
      creatorProperty0.setFallbackSetter(settableBeanProperty1);
      settableBeanProperty0.withName((PropertyName) null);
      creatorProperty0.isIgnorable();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NamedType namedType0 = new NamedType(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, namedType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 540);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '@';
      charArray0[2] = 'E';
      charArray0[3] = ':';
      charArray0[4] = 'V';
      charArray0[5] = 'Z';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1793, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      try { 
        creatorProperty0.deserializeSetAndReturn(readerBasedJsonParser0, defaultDeserializationContext_Impl0, stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1877, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(1877, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1030, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1._ignorable = true;
      JsonDeserializer<POJONode> jsonDeserializer1 = (JsonDeserializer<POJONode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1030, creatorProperty1.getCreatorIndex());
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertTrue(settableBeanProperty0.isIgnorable());
      
      creatorProperty0.getMember();
      assertEquals(1030, creatorProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertTrue(settableBeanProperty1.isIgnorable());
      assertEquals(1030, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyMetadata1, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName1);
      creatorProperty0.setFallbackSetter(settableBeanProperty1);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty0.withName((PropertyName) null);
      creatorProperty0.isIgnorable();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, (ObjectIdInfo) null);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName1);
      // Undeclared exception!
      try { 
        settableBeanProperty2.setAndReturn(typeFactory0, objectIdReferenceProperty1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, (TypeResolutionContext) null, annotationMap0, (-843));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-203), valueInstantiator_Base0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-203), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "+dgcDil:9QYFB5[.", false, mapLikeType0, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, (TypeResolutionContext) null, annotationMap0, 0);
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, asPropertyTypeDeserializer1, annotationMap0, annotatedParameter1, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = PropertyName.NO_NAME;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "(", false, (JavaType) null, jsonTypeInfo_As0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asPropertyTypeDeserializer0, (BeanProperty) null);
      Integer integer0 = new Integer((-1696));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1333), integer0, propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withNullProvider(jsonDeserializer1);
      assertEquals((-1333), creatorProperty2.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2893, typeFactory0, propertyMetadata0);
      creatorProperty0._propertyIndex = 2893;
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2893, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.assignIndex(2);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(2, settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "");
      JavaType javaType0 = TypeFactory.unknownType();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, "8+^0iaDcZUca[uxSjz", false, javaType0);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withDefaultValue("8+^0iaDcZUca[uxSjz");
      Object object1 = new Object();
      classNameIdResolver0.idFromValue(object1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      propertyName0.withNamespace("java.lang.Object");
      creatorProperty2.getAnnotation(class1);
      creatorProperty2._propertyIndex = 0;
      Random.setNextRandom((-1834));
      creatorProperty2.withName(propertyName0);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory1);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, classNameIdResolver0, ">m7sTJ%JVT", true, arrayType0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<POJONode> jsonDeserializer0 = (JsonDeserializer<POJONode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, propertyName0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty3 = new ObjectIdReferenceProperty(objectIdReferenceProperty2, objectIdInfo0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(objectIdReferenceProperty3);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer1 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer2 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer2);
      assertEquals(2, creatorProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotSame(settableBeanProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Object object0 = new Object();
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, "a_sJ", propertyMetadata0);
      annotationMap0.toString();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.numberNode(0.0F);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      arrayNode0.traverse();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.markAsIgnorable();
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty1.setObjectIdInfo(objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty1.toString();
      boolean boolean0 = settableBeanProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Object object0 = new Object();
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, "a_sJ", propertyMetadata0);
      annotationMap0.toString();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      arrayNode0.traverse();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.markAsIgnorable();
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty1.setObjectIdInfo(objectIdInfo0);
      creatorProperty0.withName(propertyName0);
      String string0 = creatorProperty1.toString();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals("[creator property, name ''; inject id 'a_sJ']", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      annotationMap0.toString();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("[creator property, name ''; inject id 'null']");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectReader1, charsToNameCanonicalizer1, (char[]) null, 2, (-2130), true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1107, (byte)17);
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, deserializationContext0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, object0, propertyMetadata0);
      annotationMap0.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, (byte) (-127));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 126);
      typeFactory0.withCache(lRUMap0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<Annotation> class1 = Annotation.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class2 = Annotation.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3183), annotationMap0, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      arrayType0.withStaticTyping();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1030, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<POJONode> jsonDeserializer1 = (JsonDeserializer<POJONode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals(1030, creatorProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      Class<Annotation> class1 = Annotation.class;
      settableBeanProperty0.getAnnotation(class1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1030, creatorProperty1.getCreatorIndex());
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      JsonDeserializer<Object> jsonDeserializer2 = settableBeanProperty0._valueDeserializer;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer2, jsonDeserializer2);
      settableBeanProperty0.withNullProvider(jsonDeserializer2);
      creatorProperty1.setFallbackSetter(creatorProperty2);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      try { 
        creatorProperty1.setAndReturn((Object) null, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      valueInstantiator_Base0.getWithArgsCreator();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap1, 1286);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap1, annotatedParameter0, 5142, (Object) null, propertyMetadata0);
      Object object0 = new Object();
      try { 
        creatorProperty0.set(object0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-264));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-264), byteArrayInputStream0, propertyMetadata0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory1);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, creatorProperty0, (String) null);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = asExistingPropertyTypeSerializer0.forProperty(creatorProperty0);
      JsonTypeInfo.As jsonTypeInfo_As0 = asPropertyTypeSerializer0.getTypeInclusion();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext0, jsonTypeInfo_As0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      arrayType0.withTypeHandler(objectIdGenerators_StringIdGenerator0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Object object0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, annotationMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(2, int0);
      
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(2, creatorProperty0.getCreatorIndex());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(22, 22);
      TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 99, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<JsonTypeInfo.As> jsonDeserializer1 = (JsonDeserializer<JsonTypeInfo.As>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertEquals(99, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(32, 32);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap.merge(annotationMap0, annotationMap0);
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 32, arrayType0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(32, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(22, 22);
      TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 99, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<JsonTypeInfo.As> jsonDeserializer1 = (JsonDeserializer<JsonTypeInfo.As>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertEquals(99, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      arrayType0.withTypeHandler(objectIdGenerators_StringIdGenerator0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      creatorProperty0.toString();
      creatorProperty0.getCreatorIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty0.getCreatorIndex();
      int int0 = new Integer(2);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
      
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(2, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1030, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<POJONode> jsonDeserializer1 = (JsonDeserializer<POJONode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      Class<Annotation> class1 = Annotation.class;
      Integer integer0 = new Integer(1030);
      propertyMetadata1.withIndex(integer0);
      settableBeanProperty0.getAnnotation(class1);
      settableBeanProperty0.getInjectableValueId();
      creatorProperty1.markAsIgnorable();
      assertTrue(creatorProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, jsonTypeInfo_As0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "\"_~Yxi");
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      try { 
        creatorProperty0.inject(deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1030, object0, propertyMetadata1);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<POJONode> jsonDeserializer1 = (JsonDeserializer<POJONode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      Class<Annotation> class1 = Annotation.class;
      settableBeanProperty0.getAnnotation(class1);
      Object object1 = settableBeanProperty0.getInjectableValueId();
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1030, creatorProperty1.getCreatorIndex());
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1461), object1, propertyMetadata1);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals((-1461), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 0);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      TypeFactory.rawClass(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<InputStream> class1 = InputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3613), typeFactory0, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-3613), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata1);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      try { 
        creatorProperty0.setAndReturn((Object) null, jsonTypeInfo_As0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName2 = new PropertyName("");
      PropertyMetadata propertyMetadata2 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2999, lRUMap0, propertyMetadata2);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(2999, settableBeanProperty1.getCreatorIndex());
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      PropertyMetadata.construct((Boolean) null, "Cv~yQ$fUJB4?Rj/]3#", integer0, ">w97{");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2893, annotationMap0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2893, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName2 = new PropertyName("");
      PropertyMetadata propertyMetadata2 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2999, lRUMap0, propertyMetadata2);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      arrayType0.getTypeName();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata1);
      propertyName1.withSimpleName((String) null);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.withName(propertyName1);
      creatorProperty0.getInjectableValueId();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DefaultDeserializationContext.Impl) null, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      
      settableBeanProperty0.getMember();
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = null;
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Module> class1 = Module.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      int int0 = 0;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      try { 
        creatorProperty0.set(typeFactory1, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<String> class1 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      try { 
        creatorProperty0.set((Object) null, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }
}
