/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:13:34 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.URL;
import java.time.chrono.IsoEra;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      ObjectNode objectNode1 = objectNode0.put("JSON", (short) (-3537));
      ObjectNode objectNode2 = objectNode1.put("ZT+>;cU48g|{%\"b", "ZT+>;cU48g|{%\"b");
      JsonNode jsonNode0 = objectNode2.set("JSON", objectNode0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2045, jsonNode0, propertyMetadata0);
      // Undeclared exception!
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findPropertyIndex((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0._propertyIndex = 0;
      creatorProperty1.getAnnotation(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty0.withName((PropertyName) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer1);
      // Undeclared exception!
      try { 
        creatorProperty2.inject(defaultDeserializationContext_Impl0, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      ObjectNode objectNode1 = objectNode0.put("JSON", (short) (-3537));
      ObjectNode objectNode2 = objectNode1.put("ZT+>;cU48g|{%\"b", "ZT+>;cU48g|{%\"b");
      JsonNode jsonNode0 = objectNode2.set("6b~/s{jOOs=Y", objectNode0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2045, jsonNode0, propertyMetadata0);
      // Undeclared exception!
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K'PnMRmj//dyq");
      System.setCurrentTimeMillis((-403L));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "%SAuW0_Tnyz7", false, (JavaType) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(beanProperty_Bogus0);
      Class<InputStream> class0 = InputStream.class;
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, (AnnotationMap) null, 0);
      Class<Annotation> class1 = Annotation.class;
      annotatedParameter0.getAnnotation(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      SimpleModule simpleModule0 = new SimpleModule();
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer((-3766));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "%SAuW0_Tnyz7", integer0, "K'PnMRmj//dyq");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, typeDeserializer0, annotationCollector_OneAnnotation0, annotatedParameter0, 0, simpleModule0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      AnnotatedMember annotatedMember0 = creatorProperty1.getMember();
      assertNotNull(annotatedMember0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 46, (Object) null, propertyMetadata0);
      JsonDeserializer<PlaceholderForType> jsonDeserializer0 = (JsonDeserializer<PlaceholderForType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonDeserializer<FloatNode> jsonDeserializer1 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<?> jsonDeserializer2 = defaultDeserializationContext_Impl0.handlePrimaryContextualization(jsonDeserializer1, (BeanProperty) null, (JavaType) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer2);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory2 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer2, jsonDeserializer2);
      creatorProperty2.withValueDeserializer(jsonDeserializer2);
      Integer integer0 = new Integer(359);
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4267, (Object) null, propertyMetadata1);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-18), (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty2.inject((DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Nulls nulls1 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1._objectIdInfo = null;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.markAsIgnorable();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      creatorProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-790), propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty1);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, "j2l=", propertyMetadata0);
      JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      propertyMetadata0.withDefaultValue("j2l=");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1._propertyIndex = 2740;
      creatorProperty1.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getMember();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        creatorProperty2.setAndReturn(class0, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1202), annotationMap0, propertyMetadata0);
      Class<ObjectReader>[] classArray0 = (Class<ObjectReader>[]) Array.newInstance(Class.class, 7);
      Class<ObjectReader> class0 = ObjectReader.class;
      classArray0[0] = class0;
      Class<ObjectReader> class1 = ObjectReader.class;
      classArray0[1] = class1;
      Class<ObjectReader> class2 = ObjectReader.class;
      classArray0[2] = class2;
      Class<ObjectReader> class3 = ObjectReader.class;
      classArray0[3] = class3;
      Class<ObjectReader> class4 = ObjectReader.class;
      classArray0[4] = class4;
      Class<ObjectReader> class5 = ObjectReader.class;
      classArray0[5] = class5;
      Class<ObjectReader> class6 = ObjectReader.class;
      classArray0[6] = class6;
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertEquals((-1202), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1403), (Object) null, propertyMetadata0);
      Class<NamedType>[] classArray0 = (Class<NamedType>[]) Array.newInstance(Class.class, 6);
      Class<NamedType> class0 = NamedType.class;
      classArray0[0] = class0;
      Class<NamedType> class1 = NamedType.class;
      classArray0[1] = class1;
      Class<NamedType> class2 = NamedType.class;
      classArray0[2] = class2;
      Class<NamedType> class3 = NamedType.class;
      classArray0[3] = class3;
      Class<NamedType> class4 = NamedType.class;
      classArray0[4] = class4;
      Class<NamedType> class5 = NamedType.class;
      classArray0[5] = class5;
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1403), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals((-1403), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1954, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.markAsIgnorable();
      creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      Object object0 = new Object();
      CreatorProperty creatorProperty3 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1954, (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty3.getAnnotation(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier2 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory1.withDeserializerModifier(beanDeserializerModifier2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, deserializerFactory1);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 12, (Object) null, propertyMetadata0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, (DeserializerFactory) null);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl2, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '@JsonUnwrapped' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findPropertyIndex((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0._propertyIndex = 0;
      creatorProperty1.getAnnotation(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer1);
      // Undeclared exception!
      try { 
        creatorProperty2.inject(defaultDeserializationContext_Impl0, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(685L);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, 0);
      NamedType namedType0 = new NamedType(class0, ":?");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, (String) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, namedType0, propertyMetadata1);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 65536);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 65536, annotatedParameter0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(65536, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-121), propertyMetadata0, propertyMetadata0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0._propertyIndex = 1;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-121), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-121), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      int int0 = 1755;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1755, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      try { 
        settableBeanProperty0.set(simpleType0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-121), annotationMap0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      assertTrue(creatorProperty0._fallbackSetter.hasValueDeserializer());
      assertEquals((-121), settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-121), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator1 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-96), objectIdGenerators_StringIdGenerator1, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Integer integer0 = new Integer((-96));
      propertyMetadata0.withIndex(integer0);
      Integer integer1 = new Integer((-96));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer1);
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver1.newForDeserialization(valueNode0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl2, objectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-121), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 7, integer0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(7, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 7, integer0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl1, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver1, (RootNameLookup) null, configOverrides0);
      deserializationConfig0.withNoProblemHandlers();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      SimpleModule simpleModule0 = new SimpleModule();
      Boolean boolean0 = new Boolean("No fallback setter/field defined for creator property '");
      Integer integer0 = new Integer((-1975));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "Fn", integer0, "No fallback setter/field defined for creator property '");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2085), simpleModule0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.fixAccess(deserializationConfig0);
      creatorProperty0.fixAccess(deserializationConfig0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertEquals((-2085), creatorProperty1.getCreatorIndex());
      assertEquals((-2085), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
      Class<String> class1 = String.class;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withView(class1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      DeserializationConfig deserializationConfig3 = deserializationConfig2.withHandler(deserializationProblemHandler0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationConfig deserializationConfig4 = deserializationConfig3.without(deserializationFeature0, deserializationFeatureArray0);
      creatorProperty2.fixAccess(deserializationConfig4);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, "j2l=", propertyMetadata0);
      JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      propertyMetadata0.withDefaultValue("j2l=");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      Class<Annotation> class1 = Annotation.class;
      settableBeanProperty0.getAnnotation(class1);
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory.defaultInstance();
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer(16384);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, "j2l=", propertyMetadata0);
      JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      propertyMetadata0.withDefaultValue("j2l=");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getMember();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        creatorProperty2.setAndReturn(class0, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      virtualAnnotatedMember0.fixAccess(false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "2", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, typeFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1._objectIdInfo = null;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.markAsIgnorable();
      virtualAnnotatedMember0.isPublic();
      Class<Annotation> class2 = Annotation.class;
      typeResolutionContext_Basic0.resolveType(collectionLikeType0);
      creatorProperty2.getAnnotation(class2);
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withNullProvider(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(0, creatorProperty3.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = new PropertyName("", "");
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      int int0 = 24;
      Integer integer0 = new Integer(24);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SET;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2825, nulls0, propertyMetadata1);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Long long0 = new Long(24);
      ValueNode valueNode0 = arrayNode0.numberNode(long0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, valueNode0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MockURL.openStream((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, "j2l=", propertyMetadata0);
      JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>> jsonDeserializer0 = (JsonDeserializer<Class<ObjectIdGenerators.StringIdGenerator>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      assertEquals(1, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1._objectIdInfo = null;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.markAsIgnorable();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(0, creatorProperty2.getCreatorIndex());
      
      Class<Annotation> class3 = Annotation.class;
      creatorProperty1.getAnnotation(class3);
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = new PropertyName("");
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(21);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), "", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<IsoEra> jsonDeserializer0 = (JsonDeserializer<IsoEra>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      creatorProperty1.getCreatorIndex();
      creatorProperty1.getMember();
      creatorProperty1.getAnnotation(class1);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'R';
      charArray0[2] = '.';
      charArray0[3] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, (-1), pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 33, (-1), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("", "");
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1254, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals(1254, int0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(1254, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 950, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty0.withName((PropertyName) null);
      creatorProperty3.isIgnorable();
      try { 
        creatorProperty1.setAndReturn((Object) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("", "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4153, "", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(4153, creatorProperty2.getCreatorIndex());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory1);
      creatorProperty1._propertyIndex = 946;
      creatorProperty1.withName(propertyName0);
      assertEquals(4153, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      String string0 = "";
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("", "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4153, "", propertyMetadata0);
      Nulls nulls0 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      creatorProperty1.withName((PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      try { 
        creatorProperty2.set(collectionLikeType0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      virtualAnnotatedMember0.withAnnotations(annotationMap0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      PropertyName.construct("");
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      Object object0 = creatorProperty2.getInjectableValueId();
      assertNotNull(object0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("", "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4153, "", propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      JsonDeserializer<IsoEra> jsonDeserializer1 = (JsonDeserializer<IsoEra>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, jsonDeserializer1, jsonDeserializer1);
      creatorProperty2.getMember();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(4153, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        creatorProperty2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 961, annotationMap0, propertyMetadata1);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(961, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "", javaType0);
      virtualAnnotatedMember0.fixAccess(true);
      Integer integer1 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 0);
      Class<IsoEra> class2 = IsoEra.class;
      ObjectIdGenerator<Integer> objectIdGenerator0 = objectIdGenerators_IntSequenceGenerator0.forScope(class2);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 0, objectIdGenerator0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      virtualAnnotatedMember0.fixAccess(true);
      Integer integer0 = new Integer(3);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(3);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getInjectableValueId();
      assertEquals(3, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 950, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getMember();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getContextAnnotation(class2);
      try { 
        creatorProperty2.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 950, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(950, creatorProperty2.getCreatorIndex());
      
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty0.withName((PropertyName) null);
      assertEquals(950, creatorProperty3.getCreatorIndex());
      
      creatorProperty3.isIgnorable();
      try { 
        creatorProperty2.setAndReturn(collectionLikeType0, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = null;
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), integer0, propertyMetadata0);
      Integer integer1 = new Integer((-589));
      try { 
        creatorProperty0.setAndReturn(integer1, integer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, javaType0);
      Integer integer1 = new Integer(950);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4151, integer1, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      IsoEra isoEra0 = IsoEra.BCE;
      try { 
        creatorProperty2.setAndReturn(isoEra0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), "/1T5", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(isoEra0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      collectionLikeType0.toCanonical();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 950, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      creatorProperty2.getInjectableValueId();
      try { 
        creatorProperty2.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(3);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getInjectableValueId();
      assertEquals(3, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "0~c3}YuZ2", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      simpleType0.findTypeParameters(class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.markAsIgnorable();
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.getMember();
      // Undeclared exception!
      try { 
        creatorProperty0.set("0~c3}YuZ2", nulls1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("", "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4153, "", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.withName(propertyName0);
      assertEquals(4153, creatorProperty2.getCreatorIndex());
      
      creatorProperty0.getMember();
      assertEquals(4153, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      asArrayTypeDeserializer0.baseTypeName();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 950, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(950, creatorProperty2.getCreatorIndex());
      
      creatorProperty1.withName((PropertyName) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      assertEquals(950, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "`", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization(annotated0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "2", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      creatorProperty0.withName((PropertyName) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.AS_EMPTY;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3604), simpleType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3604), annotationMap0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "0~c3}YuZ2", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      simpleType0.findTypeParameters(class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        creatorProperty0.set((Object) null, nulls1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(annotated0);
      JavaType javaType0 = typeFactory0.constructType((Type) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, javaType0);
      annotationIntrospector0.hasRequiredMarker(virtualAnnotatedMember0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, annotated0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(0, creatorProperty2.getCreatorIndex());
      
      Nulls nulls2 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls2, nulls1);
      valueInstantiator_Base0.getDefaultCreator();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      CreatorProperty creatorProperty3 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 2375, typeResolutionContext_Basic0, propertyMetadata1);
      assertEquals(2375, creatorProperty3.getCreatorIndex());
      
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      assertEquals(0, creatorProperty4.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1._objectIdInfo = null;
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization(annotated0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "2", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1181), (Object) null, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty2);
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id '-1']", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      assertEquals(0, creatorProperty2.getCreatorIndex());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1._objectIdInfo = null;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.markAsIgnorable();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      try { 
        creatorProperty0.set(integer0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization(annotated0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "2", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.setObjectIdInfo((ObjectIdInfo) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.getCreatorIndex();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertNotSame(creatorProperty3, creatorProperty2);
      assertEquals(0, creatorProperty3.getCreatorIndex());
      assertTrue(creatorProperty3.hasValueDeserializer());
      
      int int0 = creatorProperty3.getCreatorIndex();
      assertNotSame(creatorProperty3, creatorProperty2);
      assertTrue(creatorProperty3.hasValueDeserializer());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      asArrayTypeDeserializer0.baseTypeName();
      Integer integer0 = new Integer(950);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 950, integer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(annotated0);
      JavaType javaType0 = typeFactory0.constructType((Type) simpleType0);
      CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, javaType0);
      annotationIntrospector0.hasRequiredMarker(virtualAnnotatedMember0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, annotated0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<FloatNode> jsonDeserializer0 = (JsonDeserializer<FloatNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer1 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer((-1));
      annotationMap0.toString();
      annotationMap0.toString();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      FloatNode floatNode0 = new FloatNode(0L);
      simpleType0.withTypeHandler(floatNode0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, (PropertyName) null);
      DeserializationContext deserializationContext0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(192);
      // Undeclared exception!
      try { 
        creatorProperty2.inject((DeserializationContext) null, placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertTrue(creatorProperty3.hasValueDeserializer());
      assertEquals(0, creatorProperty3.getCreatorIndex());
      assertNotSame(creatorProperty3, creatorProperty2);
      
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PropertyName propertyName0 = null;
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1755, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.markAsIgnorable();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = new PropertyName("", "");
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(24);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      javaType0.getSuperClass();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SET;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2825, nulls0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty1.getMember();
      assertEquals(2825, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.getMember();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata1.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2517), asArrayTypeDeserializer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertEquals((-2517), creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals((-2517), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.AS_EMPTY;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-535), (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<JsonNode> jsonDeserializer1 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, jsonDeserializer1, jsonDeserializer1);
      assertEquals((-535), creatorProperty2.getCreatorIndex());
      assertEquals((-535), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("", "");
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2362), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      collectionLikeType0.isThrowable();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JsonNode> class0 = JsonNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 108, "/1T5", (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.set(class1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization(annotated0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, classNameIdResolver0, "2", false, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls1, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      IsoEra isoEra0 = IsoEra.BCE;
      CreatorProperty creatorProperty2 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 63, isoEra0, propertyMetadata1);
      try { 
        creatorProperty2.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getContextAnnotation(class2);
      AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      // Undeclared exception!
      try { 
        creatorProperty2.set((Object) null, nulls1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember0.fixAccess(false);
      annotationIntrospector0.findNameForDeserialization(annotated0);
      JavaType javaType0 = typeFactory0.constructType((Type) simpleType0);
      CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, javaType0);
      annotationIntrospector0.hasRequiredMarker(virtualAnnotatedMember0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer1 = new Integer(1722);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls1, nulls0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, simpleObjectIdResolver0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, javaType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, collectionLikeType0);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "", true, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      Object object0 = new Object();
      try { 
        creatorProperty0.set(object0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      VirtualAnnotatedMember virtualAnnotatedMember1 = (VirtualAnnotatedMember)virtualAnnotatedMember0.withAnnotations(annotationMap0);
      virtualAnnotatedMember1.fixAccess(true);
      annotationIntrospector0.findNameForDeserialization(virtualAnnotatedMember1);
      SimpleType simpleType1 = (SimpleType)typeFactory0.constructType((Type) class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType1, (TypeIdResolver) null, "", true, collectionLikeType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.SKIP;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType1, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[7];
  }
}
