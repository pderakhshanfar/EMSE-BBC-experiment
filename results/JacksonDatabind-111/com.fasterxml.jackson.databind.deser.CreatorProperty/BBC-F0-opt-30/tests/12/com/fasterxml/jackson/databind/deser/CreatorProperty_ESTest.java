/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 10:53:04 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      propertyName0.toString();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2), jsonInclude_Include0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(0);
      creatorProperty0._ignorable = false;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertEquals((-2), settableBeanProperty1.getCreatorIndex());
      
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-2), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, javaType0, propertyMetadata1);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      DeserializationContext deserializationContext0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-61), annotationMap0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2), jsonInclude_Include0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(0);
      creatorProperty0._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.isIgnorable());
      assertEquals((-2), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2), jsonInclude_Include0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(0);
      creatorProperty0._ignorable = false;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-2), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-19), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      Object object0 = new Object();
      try { 
        creatorProperty0.setAndReturn(object0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withDescription("']");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      try { 
        creatorProperty0.setAndReturn((Object) null, jsonInclude_Include0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0._ignorable = true;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      PropertyName propertyName1 = new PropertyName("l=msp");
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, javaType0, propertyName1, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      assertEquals((-1), creatorProperty2.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer0);
      assertTrue(settableBeanProperty0.isIgnorable());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(1002L);
      PropertyName propertyName0 = new PropertyName("~0", "~0");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      propertyName0.withSimpleName("~0");
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "~0", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], typeResolutionContext_Basic0, annotationMap0, 2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<SequenceInputStream> jsonDeserializer1 = (JsonDeserializer<SequenceInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      settableBeanProperty1._propertyIndex = 2;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<MapType> jsonDeserializer2 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<?> jsonDeserializer3 = defaultDeserializationContext_Impl0.handlePrimaryContextualization(jsonDeserializer2, creatorProperty1, collectionLikeType0);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withNullProvider(jsonDeserializer3);
      assertTrue(settableBeanProperty2.hasValueDeserializer());
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      try { 
        creatorProperty0.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = Integer.valueOf(0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "[_Xe:3\"G[hpP", integer0, "#~tC");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-8), object0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.markAsIgnorable();
      Object object1 = new Object();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(object1, jsonInclude_Include0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.AS_EMPTY;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1279), javaType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1279), propertyMetadata0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-1279), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      Class<JavaType> class1 = JavaType.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations1 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class2);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      MapType mapType1 = mapType0.withKeyValueHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withKeyType(mapType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations1, (AnnotatedParameter) null, 1322, mapType2, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = null;
      try {
        beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDeserializerBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      javaType0.containedTypeOrUnknown(738);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      try { 
        creatorProperty0.setAndReturn((Object) null, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<InputStream> class0 = InputStream.class;
      Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 26, (Object) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 28, propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = 28;
      PropertyName propertyName1 = propertyName0.withNamespace("UMuTgM_");
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(28, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 28, propertyMetadata0, propertyMetadata0);
      creatorProperty0.assignIndex(28);
      JsonDeserializer<JsonInclude.Include> jsonDeserializer0 = (JsonDeserializer<JsonInclude.Include>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(28, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-1980L));
      System.setCurrentTimeMillis((-1980L));
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 0, javaType0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty2._viewMatcher = viewMatcher0;
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      Object object0 = new Object();
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withNullProvider(jsonDeserializer1);
      assertEquals(0, creatorProperty2.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      referenceType0.withContentType(simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)36);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Integer integer0 = new Integer((byte)0);
      Integer integer1 = Integer.getInteger("8$ I.?w", integer0);
      try { 
        creatorProperty0.set(sequenceInputStream0, integer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "rWLA^HE", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName1 = PropertyName.NO_NAME;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-494), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Object object1 = new Object();
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-1980L));
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-957), javaType0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-1980L));
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-957), javaType0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 0, propertyMetadata1, propertyMetadata1);
      Class<SettableBeanProperty>[] classArray0 = (Class<SettableBeanProperty>[]) Array.newInstance(Class.class, 1);
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      classArray0[0] = class2;
      creatorProperty1.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      assertEquals((-957), creatorProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withName(propertyName0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-1980L));
      System.setCurrentTimeMillis((-1980L));
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-957), javaType0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      Object object0 = new Object();
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withNullProvider(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-957), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-1965L));
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, (ValueInstantiator) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-953), (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(1002L);
      PropertyName propertyName0 = new PropertyName("~0", "~0");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      propertyName0.withSimpleName("~0");
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "~0", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], typeResolutionContext_Basic0, annotationMap0, 2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<SequenceInputStream> jsonDeserializer1 = (JsonDeserializer<SequenceInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<MapType> jsonDeserializer2 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<?> jsonDeserializer3 = defaultDeserializationContext_Impl0.handlePrimaryContextualization(jsonDeserializer2, creatorProperty1, collectionLikeType0);
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withNullProvider(jsonDeserializer3);
      assertTrue(settableBeanProperty2.hasValueDeserializer());
      assertEquals(2, settableBeanProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, javaType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Std0.getAnnotation(class0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = new PropertyName("w", "w");
      PropertyMetadata propertyMetadata2 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, propertyMetadata0, propertyMetadata2);
      DeserializationConfig deserializationConfig0 = null;
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.getCreatorIndex();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = (JavaType) collectionLikeType0;
      javaTypeArray0[5] = (JavaType) mapLikeType0;
      javaTypeArray0[6] = (JavaType) referenceType0;
      TypeBindings.createIfNeeded(class1, javaTypeArray0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      // Undeclared exception!
      try { 
        stdSubtypeResolver0.collectAndResolveSubtypesByClass((MapperConfig<?>) null, (AnnotatedMember) null, javaTypeArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-1980L));
      System.setCurrentTimeMillis((-1980L));
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-957), javaType0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertEquals((-957), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, collectionLikeType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      PropertyName propertyName2 = new PropertyName("", "w");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName2, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1251), beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.isIgnorable();
      Class<Annotation> class4 = Annotation.class;
      creatorProperty1.getAnnotation(class4);
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
      
      Class<Annotation> class5 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class5);
      // Undeclared exception!
      try { 
        creatorProperty1.set((Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(1002L);
      PropertyName propertyName0 = new PropertyName("~0", "~0");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      propertyName0.withSimpleName("~0");
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "~0", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], typeResolutionContext_Basic0, annotationMap0, 2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2, typeBindings0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<SequenceInputStream> jsonDeserializer1 = (JsonDeserializer<SequenceInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      settableBeanProperty0.withValueDeserializer(jsonDeserializer1);
      String string0 = creatorProperty1.toString();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals("[creator property, name '~0'; inject id '<>']", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, javaType0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeBindings.createIfNeeded(class0, javaType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1265), object0, propertyMetadata1);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.getMember();
      creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, valueInstantiator_Base0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      creatorProperty0.getCreatorIndex();
      settableBeanProperty0.isIgnorable();
      assertEquals((-1251), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, collectionLikeType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      PropertyName propertyName2 = new PropertyName("", "w");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName2, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1251), beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getAnnotation(class3);
      System.setCurrentTimeMillis((-1251));
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1251), settableBeanProperty0.getCreatorIndex());
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Annotations annotations0 = null;
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2101, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      creatorProperty0._fallbackSetter = settableBeanProperty0;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~0");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "~0", true, javaTypeArray0[0]);
      mapLikeType0.toCanonical();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], typeResolutionContext_Basic0, annotationMap0, 0);
      collectionLikeType0.equals((Object) null);
      AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 0, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getCreatorIndex();
      AnnotatedMember annotatedMember0 = settableBeanProperty0.getMember();
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertNotNull(annotatedMember0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1265), object0, propertyMetadata1);
      creatorProperty0.getAnnotation(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1265), settableBeanProperty1.getCreatorIndex());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      PropertyName propertyName0 = PropertyName.construct("F{(:;CStd", "F{(:;CStd");
      Class<MapType> class0 = MapType.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      Class<String> class2 = String.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 23, (Object) null, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.withName(propertyName0);
      creatorProperty1.withName(propertyName0);
      creatorProperty2.isIgnorable();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationConfig deserializationConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)0;
      jsonFactory1.createParser(byteArray0);
      LinkedHashMap<String, Object> linkedHashMap0 = null;
      try {
        linkedHashMap0 = new LinkedHashMap<String, Object>(1536, (byte)0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis(1002L);
      PropertyName propertyName0 = new PropertyName("~0", "~0");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "~0", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], typeResolutionContext_Basic0, annotationMap0, 2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2, typeBindings0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(2, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~0");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, classNameIdResolver0, "~0", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaTypeArray0[0], typeResolutionContext_Basic0, annotationMap0, 0);
      collectionLikeType0.equals((Object) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride(annotatedParameter0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, placeholderForType0, propertyName0, (AnnotatedMember) null, propertyMetadata1);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, collectionLikeType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionLikeType0, propertyName1, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 0, class2, propertyMetadata1);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      creatorProperty0.isIgnorable();
      try { 
        creatorProperty0.set(annotationMap0, classNameIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '~0'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("@");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "@", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      PropertyName propertyName2 = propertyName0.internSimpleName();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, javaType0, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), object0, propertyMetadata1);
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis((-188L));
      PropertyName propertyName0 = new PropertyName("|6nmzC5APS", "READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapType> class0 = MapType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "|6nmzC5APS", true, arrayType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[1]);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType0, propertyName1, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class2);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      propertyName0.withSimpleName("R(e#n!");
      creatorProperty0.getCreatorIndex();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", false, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      Nulls nulls0 = Nulls.SET;
      propertyMetadata0.withNulls(nulls0, nulls0);
      PropertyName propertyName2 = propertyName0.internSimpleName();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName2);
      creatorProperty2.isIgnorable();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty1.getAnnotation(class3);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getAnnotation(class3);
      Integer integer0 = new Integer(1339);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      Class<Annotation> class4 = Annotation.class;
      creatorProperty0.getAnnotation(class4);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      System.setCurrentTimeMillis((-1485L));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class4);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue(referenceType0);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      JsonParser jsonParser0 = objectReader1.treeAsTokens(valueNode0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, beanProperty_Std0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      PropertyName propertyName2 = propertyName0.internSimpleName();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, javaType0, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), object0, propertyMetadata1);
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-1251), creatorProperty0.getCreatorIndex());
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      try { 
        creatorProperty0.set(bigIntegerNode0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      ReferenceType.construct((Class<?>) class0, typeBindings1, (JavaType) mapLikeType0, (JavaType[]) null, (JavaType) mapLikeType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      creatorProperty0.withName(propertyName1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      creatorProperty0.getInjectableValueId();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext0, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getCreatorIndex();
      settableBeanProperty0.isIgnorable();
      assertEquals((-1251), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, collectionLikeType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      PropertyName propertyName2 = new PropertyName("", "w");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName2, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1251), beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getAnnotation(class3);
      System.setCurrentTimeMillis((-1251));
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName2);
      assertEquals((-1251), settableBeanProperty0.getCreatorIndex());
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, collectionLikeType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      BeanProperty.Std beanProperty_Std2 = new BeanProperty.Std(beanProperty_Std1, javaType0);
      BeanProperty.Std beanProperty_Std3 = new BeanProperty.Std(beanProperty_Std1, collectionLikeType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std3.getAnnotation(class3);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "w", true, collectionLikeType0, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Std3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asPropertyTypeDeserializer1, annotationMap1, (AnnotatedParameter) null, (-904), javaType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      Class<Annotation> class4 = Annotation.class;
      creatorProperty1.getAnnotation(class4);
      Object object0 = creatorProperty1.getInjectableValueId();
      assertEquals((-904), creatorProperty1.getCreatorIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType1);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType1);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class0, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType1, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, simpleType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType1);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      System.setCurrentTimeMillis((-1485L));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class3);
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with((ContextAttributes) contextAttributes_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue(referenceType0);
      POJONode pOJONode0 = (POJONode)jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader1.treeAsTokens(pOJONode0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      try { 
        creatorProperty1.deserializeSetAndReturn(treeTraversingParser0, defaultDeserializationContext_Impl1, beanProperty_Std0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(referenceType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, collectionLikeType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      BeanProperty.Std beanProperty_Std2 = new BeanProperty.Std(beanProperty_Std1, javaType0);
      BeanProperty.Std beanProperty_Std3 = new BeanProperty.Std(beanProperty_Std1, collectionLikeType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std3.getAnnotation(class3);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "w", true, collectionLikeType0, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Std3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asPropertyTypeDeserializer1, annotationMap1, (AnnotatedParameter) null, (-904), javaType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      Class<Annotation> class4 = Annotation.class;
      creatorProperty1.getAnnotation(class4);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getAnnotation(class3);
      try { 
        creatorProperty0.setAndReturn((Object) null, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
      
      Class<Annotation> class4 = Annotation.class;
      creatorProperty0.getAnnotation(class4);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1251), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      System.setCurrentTimeMillis((-1485L));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class4);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      RawValue rawValue0 = new RawValue(referenceType0);
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      JsonParser jsonParser0 = objectReader1.treeAsTokens(valueNode0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, beanProperty_Std0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'w'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(jsonInclude_Include0);
      AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<SequenceInputStream> class2 = SequenceInputStream.class;
      classNameIdResolver0.idFromValueAndType(class1, class2);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, mapLikeType1, propertyName1, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName2 = propertyName1.withSimpleName("']");
      javaType0.equals(referenceType0);
      System.setCurrentTimeMillis((-1251));
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType1, classNameIdResolver0, "w", false, mapLikeType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2034, mapLikeType1, propertyMetadata0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getMember();
      assertEquals(2034, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std1.getAnnotation(class2);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), object0, propertyMetadata1);
      creatorProperty0.getAnnotation(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertEquals((-1251), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      propertyName0.withSimpleName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      propertyName0.withNamespace((String) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      creatorProperty1.toString();
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      propertyName0.withSimpleName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name 'w'; inject id 'null']", string0);
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getAnnotation(class3);
      assertEquals((-1251), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("w");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, mapLikeType0, (JavaType[]) null);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "w", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, simpleType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getAnnotation(class3);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-1251), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name 'w'; inject id 'null']", string0);
      assertEquals((-1251), creatorProperty1.getCreatorIndex());
  }
}
