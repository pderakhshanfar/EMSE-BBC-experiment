/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 20:09:10 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.File;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.chrono.JapaneseEra;
import java.time.temporal.ChronoField;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", (float) 2594);
      Float float0 = new Float((double) 2594);
      ObjectNode objectNode2 = objectNode1.put("", float0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2594, objectNode2, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      objectNode0.toString();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNode jsonNode0 = objectNode1.replace("", objectNode2);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      // Undeclared exception!
      creatorProperty0.inject(defaultDeserializationContext_Impl0, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<String> class0 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      Class<DayOfWeek> class1 = DayOfWeek.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2665));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, resolvedRecursiveType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class3);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(1919);
      Version version0 = new Version(1919, 1000000000, 1919, (String) null, (String) null, (String) null);
      SimpleModule simpleModule0 = new SimpleModule((String) null, version0);
      FloatNode floatNode0 = new FloatNode((-42.0F));
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, (TypeResolutionContext) null, annotationMap0, 0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, 0, arrayType0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      // Undeclared exception!
      try { 
        creatorProperty2.setAndReturn(dayOfWeek0, valueInstantiator_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<String> class0 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      Class<DayOfWeek> class1 = DayOfWeek.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2665));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, resolvedRecursiveType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class3);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-2665));
      Integer integer0 = new Integer(1919);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, 1919, integer0, propertyMetadata0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule((String) null, version0);
      creatorProperty0.getMember();
      try { 
        creatorProperty0.setAndReturn(simpleModule0, annotationIntrospector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", (float) 2621);
      Float float0 = new Float((double) 2621);
      ObjectNode objectNode2 = objectNode1.put("", float0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2621, objectNode2, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNode jsonNode0 = objectNode1.replace("", objectNode2);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, jsonNode0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(1935);
      Integer integer1 = new Integer((-14));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-14), object0, propertyMetadata0);
      creatorProperty0._propertyIndex = 905;
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer(1935);
      Integer integer1 = new Integer((-14));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-14), object0, propertyMetadata0);
      creatorProperty0._propertyIndex = 905;
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1712));
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter1, (-4851), typeResolutionContext_Basic0, propertyMetadata0);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals((-4851), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class1 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withContentTypeHandler("");
      Long long0 = new Long(0L);
      MapType mapType2 = mapType1.withValueHandler(long0);
      PropertyName propertyName0 = PropertyName.construct("Lf/+&Flmc", "");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType1, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType2, classNameIdResolver0, "zu1", true, mapType2);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      valueInstantiator_Base0.getIncompleteParameter();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType2, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1000000, asWrapperTypeDeserializer0, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(1000000, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      Class<DayOfWeek>[] classArray0 = (Class<DayOfWeek>[]) Array.newInstance(Class.class, 8);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      classArray0[0] = class0;
      Class<DayOfWeek> class1 = DayOfWeek.class;
      classArray0[1] = class1;
      Class<DayOfWeek> class2 = DayOfWeek.class;
      classArray0[2] = class2;
      Class<DayOfWeek> class3 = DayOfWeek.class;
      classArray0[3] = class3;
      Class<DayOfWeek> class4 = DayOfWeek.class;
      classArray0[4] = class4;
      Class<DayOfWeek> class5 = DayOfWeek.class;
      classArray0[5] = class5;
      Class<DayOfWeek> class6 = DayOfWeek.class;
      classArray0[6] = class6;
      Class<DayOfWeek> class7 = DayOfWeek.class;
      classArray0[7] = class7;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      Class<Annotation> class8 = Annotation.class;
      creatorProperty0.getAnnotation(class8);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals(2, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      annotationMap0.toString();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1545), propertyName0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1658, propertyMetadata0, propertyMetadata0);
      JsonParser jsonParser0 = null;
      JsonDeserializer<ChronoField> jsonDeserializer0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<JsonNode> jsonDeserializer0 = (JsonDeserializer<JsonNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-88L));
      System.setCurrentTimeMillis((-88L));
      System.setCurrentTimeMillis((-88L));
      PropertyName propertyName0 = PropertyName.construct("NH9y_");
      Class<JavaType> class0 = JavaType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "NH9y_", true, resolvedRecursiveType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class1 = Annotation.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1330, class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName0);
      assertEquals(1330, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      Class<DayOfWeek>[] classArray0 = (Class<DayOfWeek>[]) Array.newInstance(Class.class, 8);
      Class<DayOfWeek> class0 = DayOfWeek.class;
      classArray0[0] = class0;
      Class<DayOfWeek> class1 = DayOfWeek.class;
      classArray0[1] = class1;
      Class<DayOfWeek> class2 = DayOfWeek.class;
      classArray0[2] = class2;
      Class<DayOfWeek> class3 = DayOfWeek.class;
      classArray0[3] = class3;
      Class<DayOfWeek> class4 = DayOfWeek.class;
      classArray0[4] = class4;
      Class<DayOfWeek> class5 = DayOfWeek.class;
      classArray0[5] = class5;
      Class<DayOfWeek> class6 = DayOfWeek.class;
      classArray0[6] = class6;
      Class<DayOfWeek> class7 = DayOfWeek.class;
      classArray0[7] = class7;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      Class<Annotation> class8 = Annotation.class;
      creatorProperty0.getAnnotation(class8);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-356L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-356L));
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName((String) null, "");
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Long.getLong("Cannot deserialize value of type %s from number %s: %s");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      // Undeclared exception!
      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-584), (Object) null, propertyMetadata0);
      creatorProperty0._ignorable = true;
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.isIgnorable();
      creatorProperty0.isIgnorable();
      assertEquals((-584), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.getDefaultMergeable();
      propertyMetadata0.withRequired((Boolean) null);
      creatorProperty0.getAnnotation(class0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("@z}6p", false);
      ObjectNode objectNode2 = objectNode1.put("", 0L);
      jsonNodeFactory0.textNode("");
      ObjectNode objectNode3 = objectNode2.put((String) null, (short) (-1453));
      Short short0 = new Short((short) (-1453));
      ObjectNode objectNode4 = objectNode3.put("L0R';pk", short0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3001, objectNode4, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      // Undeclared exception!
      try { 
        creatorProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-836), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer(1935);
      Integer integer1 = new Integer((-14));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-14), object0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withName(propertyName0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, deserializerFactory0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer(1935);
      Integer integer1 = new Integer((-14));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-14), object0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 338, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("sOn)t(;{");
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals("sOn)t(;{", settableBeanProperty0.getName());
      assertEquals(338, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(338, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile1);
      AnnotationMap.merge(annotationMap0, annotationMap0);
      Boolean boolean0 = Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-828));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-828), (Object) null, propertyMetadata0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.getCreatorIndex();
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-828), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile1);
      Boolean boolean0 = Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-828));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-828), (Object) null, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("b; fpXtbu", "JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      creatorProperty0.fixAccess((DeserializationConfig) null);
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      try { 
        settableBeanProperty0.deserializeAndSet(filteringParserDelegate0, deserializationContext0, objectMapper1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 46, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.valueOf("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-828));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-828), (Object) null, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("b; fpXtbu", "JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      try { 
        settableBeanProperty0.deserializeAndSet(filteringParserDelegate0, deserializationContext0, objectMapper1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-806));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-806), (Object) null, propertyMetadata0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      try { 
        creatorProperty1.deserializeAndSet(filteringParserDelegate0, deserializationContext0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<String> class0 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      Class<DayOfWeek> class1 = DayOfWeek.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2665));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, resolvedRecursiveType0);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std1.getContextAnnotation(class3);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-2665));
      Integer integer0 = new Integer(1919);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, 1919, integer0, propertyMetadata0);
      Version version0 = new Version(1919, 1000000000, 1919, (String) null, (String) null, (String) null);
      SimpleModule simpleModule0 = new SimpleModule((String) null, version0);
      try { 
        creatorProperty0.setAndReturn(simpleModule0, annotationIntrospector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      String string0 = "Cannot deserialize value of type %s from number %s: %s";
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(creatorProperty1);
      try { 
        creatorProperty1.setAndReturn(class0, objectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-844));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-844), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      try { 
        creatorProperty0.setAndReturn(object0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1049), "Cannot deserialize value of type %s from number %s: %s", propertyMetadata0);
      Object object0 = new Object();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      PropertyName propertyName1 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("Builder class %s does not have build method (name: '%s')");
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), boolean0, propertyMetadata1);
      creatorProperty2.setFallbackSetter(settableBeanProperty0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        creatorProperty2.set((Object) null, integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-844));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-844), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer1 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer2 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer(jsonDeserializer2);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-836), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      creatorProperty0._ignorable = false;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("Cannot deserialize value of type %s from number %s: %s");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      try { 
        settableBeanProperty0.set((Object) null, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'Cannot deserialize value of type %s from number %s: %s'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName2, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), propertyName1, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider(jsonDeserializer0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Type parameter #%d/%d differs; can not specialize %s with %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), "Type parameter #%d/%d differs; can not specialize %s with %s", propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      Boolean boolean1 = new Boolean(true);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean1, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class0 = EnumSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Integer integer1 = new Integer((-836));
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(integer1);
      CollectionType collectionType3 = collectionType2.withTypeHandler((Object) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType3, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-384), propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0.withSimpleName("Cannot deserialize value of type %s from number %s: %s");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      creatorProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName0);
      // Undeclared exception!
      try { 
        creatorProperty2.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      Integer integer0 = new Integer((-836));
      try { 
        creatorProperty0.set(propertyMetadata0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      String string0 = "Cannot deserialize value of type %s from number %s: %s";
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = null;
      CreatorProperty creatorProperty1 = null;
      CreatorProperty creatorProperty2 = null;
      try {
        creatorProperty2 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      creatorProperty0._ignorable = false;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty1.withSimpleName("Cannot deserialize value of type %s from number %s: %s");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      creatorProperty2.withName(propertyName0);
      try { 
        creatorProperty2.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property 'Cannot deserialize value of type %s from number %s: %s' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot deserialize value of type %s from number %s: %s", false, (JavaType) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer1.forProperty((BeanProperty) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-836), annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotNull(object0);
      
      creatorProperty0.isIgnorable();
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      creatorProperty1.visibleInView(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty1.isIgnorable();
      assertEquals((-836), creatorProperty1.getCreatorIndex());
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      simpleObjectIdResolver0.newForDeserialization((Object) null);
      creatorProperty0.getInjectableValueId();
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<DayOfWeek> jsonDeserializer1 = (JsonDeserializer<DayOfWeek>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals((-836), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      creatorProperty0.withName(propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.withSimpleName("Cannot deserialize value of type %s from number %s: %s");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      propertyName2.withNamespace((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName2, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), propertyName1, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      Object object0 = settableBeanProperty0.getInjectableValueId();
      assertNotNull(object0);
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.withNullProvider(jsonDeserializer0);
      try { 
        creatorProperty0.set("a-hB", (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals((-836), settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-844));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-844), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals((-844), creatorProperty1.getCreatorIndex());
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-844), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      Nulls nulls0 = Nulls.SET;
      Nulls nulls1 = Nulls.AS_EMPTY;
      propertyMetadata0.withNulls(nulls0, nulls1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.toString();
      creatorProperty0.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      try { 
        creatorProperty1.setAndReturn("", boolean0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.type.ClassStack");
      Integer integer0 = new Integer((-836));
      Integer integer1 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.type.ClassStack", integer1, "Cannot deserialize value of type %s from number %s: %s");
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals((-836), creatorProperty1.getCreatorIndex());
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      assertEquals((-836), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis((-356L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-356L));
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.toString();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertEquals((-836), creatorProperty2.getCreatorIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty1.getMember();
      assertEquals((-836), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      int int0 = (-918);
      Integer integer0 = new Integer((-918));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "]`", integer0, "}h7$a3g5@=-A]Q`p");
      PropertyName propertyName0 = new PropertyName(" dU}fV+(BnB2s!qM;C", "");
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-918), class0, propertyMetadata0);
      creatorProperty0.getAnnotation(class1);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-918), class1, propertyMetadata0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty2.withSimpleName("Cannot build, 'init()' not yet called");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      creatorProperty0.withName(propertyName0);
      // Undeclared exception!
      try { 
        JapaneseEra.of((-918));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: -918
         //
         verifyException("java.time.chrono.JapaneseEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      try { 
        creatorProperty1.setAndReturn("", boolean0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      simpleObjectIdResolver0.newForDeserialization(boolean0);
      try { 
        creatorProperty1.setAndReturn(integer0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      System.setCurrentTimeMillis((-356L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty0.toString();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      System.setCurrentTimeMillis((-356L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-356L));
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("Cannot deserialize value of type %s from number %s: %s");
      Integer integer0 = new Integer((-836));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Cannot deserialize value of type %s from number %s: %s", integer0, "Cannot deserialize value of type %s from number %s: %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-836), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }
}
