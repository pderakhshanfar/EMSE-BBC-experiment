/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:10:32 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1895, (Object) null, (PropertyMetadata) null);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, ")fOBL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, "J$G7T6>", (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<List<PropertyName>> jsonDeserializer1 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Dk`)", "`Q^8*K}8~AN>lFK{");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<DoubleNode> class1 = DoubleNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "w;(2/\"L-dv", false, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, typeResolutionContext_Basic0, (AnnotationMap) null, (-851));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, jsonDeserializer0, propertyMetadata0);
      JsonDeserializer<DoubleNode> jsonDeserializer1 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-575), stack0, (PropertyMetadata) null);
      JsonDeserializer<JsonFormat.Shape> jsonDeserializer0 = (JsonDeserializer<JsonFormat.Shape>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2506, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Class<String> class0 = String.class;
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "`KOO", true, resolvedRecursiveType0);
      SimpleModule simpleModule0 = new SimpleModule();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, simpleModule0, (PropertyMetadata) null);
      creatorProperty0._propertyIndex = 0;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(2506);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(2506, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals(1, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Dk`)", "`Q^8*K}8~AN>lFK{");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<DoubleNode> class1 = DoubleNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "`Q^8*K}8~AN>lFK{", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-793), object0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals((-793), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, "J$G7T6>", (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1728, propertyName0, (PropertyMetadata) null);
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(1728, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Dk`)", "`Q^8*K}8~AN>lFK{");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<DoubleNode> class1 = DoubleNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "w;(2/\"L-dv", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, "Dk`)", propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty1._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertEquals(2506, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Class<String> class0 = String.class;
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "`KOO", true, resolvedRecursiveType0);
      SimpleModule simpleModule0 = new SimpleModule();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, simpleModule0, (PropertyMetadata) null);
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(2506);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(2506, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Integer integer0 = new Integer((-2222));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 532, integer0, (PropertyMetadata) null);
      creatorProperty0.getMember();
      assertEquals(532, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2390, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      assertEquals(2390, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, "", (PropertyMetadata) null);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 52, "`KOO", propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 23, placeholderForType0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      // Undeclared exception!
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-575), (Object) null, (PropertyMetadata) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-8), (Object) null, (PropertyMetadata) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, "com.fasterxml.jackson.databind.deser.CreatorProperty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1328));
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, simpleType0, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3832, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(propertyName0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1728, propertyName0, (PropertyMetadata) null);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals(1728, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-1757));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, (-1867), (Object) null, (PropertyMetadata) null);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals((-1867), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, "`KOO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1124), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      assertEquals((-1124), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-1124), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(2506, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO", "`KOO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, propertyName0, (PropertyMetadata) null);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2506, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("`KOO", "`KOO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, "`KOO", (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-575), stack0, (PropertyMetadata) null);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-575), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KO2]J");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        creatorProperty0.inject(deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '`KO2]J' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("`KOO", "`KOO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, "`KOO", (PropertyMetadata) null);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name '`KOO'; inject id '`KOO']", string0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("`KOO");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2506, stack0, (PropertyMetadata) null);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertEquals(2506, creatorProperty0.getCreatorIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("Dk`)", "`Q^8*K}8~AN>lFK{");
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<DoubleNode> class1 = DoubleNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "w;(2/\"L-dv", false, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, typeResolutionContext_Basic0, (AnnotationMap) null, (-851));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, jsonDeserializer0, propertyMetadata0);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1895, (Object) null, (PropertyMetadata) null);
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, ")fOBL");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 23, placeholderForType0, (PropertyMetadata) null);
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 23, placeholderForType0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1328));
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, simpleType0, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3832, (Object) null, (PropertyMetadata) null);
      try { 
        creatorProperty0.setAndReturn(propertyName0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }
}
