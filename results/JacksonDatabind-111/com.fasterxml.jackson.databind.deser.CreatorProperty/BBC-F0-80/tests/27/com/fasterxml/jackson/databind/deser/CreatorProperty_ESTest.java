/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 20:12:56 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "'", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-1164), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-2432));
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-2432), (Object) null, propertyMetadata0);
      JsonDeserializer<LongNode> jsonDeserializer0 = (JsonDeserializer<LongNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer1 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-2432), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1258, (Object) null, propertyMetadata0);
      Class<JavaType>[] classArray0 = (Class<JavaType>[]) Array.newInstance(Class.class, 9);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<JsonSerializer<BeanDeserializer>> jsonDeserializer0 = (JsonDeserializer<JsonSerializer<BeanDeserializer>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(1258, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2119);
      Integer integer0 = new Integer((-2432));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2119, integer0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<ClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<ClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(2119, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("E!:W&Fb`");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(86);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.datain.deser.CreatorPropry", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      Integer integer0 = new Integer((-4018));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2122, integer0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals(2122, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2119);
      Integer integer0 = new Integer((-2432));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2119, integer0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("E!:W&Fb`");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2096);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 2096, propertyMetadata0, propertyMetadata0);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 8);
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(2096, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.datain.deser.CreatorPropry", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      Integer integer0 = new Integer((-4022));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2122, integer0, propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(2122, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2119);
      Integer integer0 = new Integer((-2432));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2119, integer0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(2119, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2119);
      Integer integer0 = new Integer((-2432));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2119, integer0, propertyMetadata0);
      creatorProperty0.assignIndex(14);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(2119, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "w?R", true, mapLikeType0, jsonTypeInfo_As0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "K;g1'rW*kHUVV", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2, object0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withName((PropertyName) null);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1258, (Object) null, propertyMetadata0);
      Class<JavaType>[] classArray0 = (Class<JavaType>[]) Array.newInstance(Class.class, 9);
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(1258, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("Es:&Fb`");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 17, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(17, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("Es:&Fb`");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(86);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "w?R", true, mapLikeType0, jsonTypeInfo_As0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "K;g1'rW*kHUVV", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2, object0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      boolean boolean1 = creatorProperty0.isIgnorable();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "w?R", true, mapLikeType0, jsonTypeInfo_As0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "K;g1'rW*kHUVV", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2, object0, propertyMetadata0);
      creatorProperty0.getMember();
      assertEquals(2, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "Property '%s' (type %s) has no injectable value id configured", false, referenceType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, (TypeResolutionContext) null, annotationMap0, 32767);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, annotationMap0, propertyMetadata0);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertEquals(1, creatorProperty0.getCreatorIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "'", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      Integer integer0 = new Integer((-2432));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 0, integer0, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-2432), (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-2432), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      Class<JavaType> class1 = JavaType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 73, mapType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      LongNode longNode0 = new LongNode((-1000));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-1000), longNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn("com.fasterxml.jackson.databind.deser.CreatorProperty", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2, propertyName0, propertyMetadata0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 85, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty0;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, jsonTypeInfo_As0, propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 96, (Object) null, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 50, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      LongNode longNode0 = new LongNode(231L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.set(longNode0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "w?R", true, mapLikeType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "K;g1'rW*kHUVV", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2723, object0, propertyMetadata0);
      creatorProperty0.getAnnotation(class1);
      assertEquals(2723, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-2432), (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      assertEquals((-2432), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 50, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(50, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "'", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("LY", "LY");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2122, asPropertyTypeDeserializer0, propertyMetadata0);
      creatorProperty0.isIgnorable();
      assertEquals(2122, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "w?R", true, mapLikeType0, jsonTypeInfo_As0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "K;g1'rW*kHUVV", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2723, object0, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(2723, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.deser.CreatorProperty", "com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2, propertyName0, propertyMetadata0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'com.fasterxml.jackson.databind.deser.CreatorProperty'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-1349));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1349), (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '@JsonUnwrapped' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      Class<JavaType> class1 = JavaType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 73, mapType0, propertyMetadata0);
      String string0 = creatorProperty0.toString();
      assertEquals(73, creatorProperty0.getCreatorIndex());
      assertEquals("[creator property, name ''; inject id '[map type; class java.util.LinkedHashMap, [map type; class java.util.LinkedHashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [simple type, class com.fasterxml.jackson.databind.JavaType]]']", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", true, (JavaType) null, jsonTypeInfo_As0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, (AnnotationMap) null, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, annotatedParameter0, (-124), (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals((-124), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      Integer integer0 = new Integer((-2432));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2122, integer0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "'", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2122, asPropertyTypeDeserializer0, propertyMetadata0);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertEquals(2122, creatorProperty0.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 85, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, annotationMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 50, (Object) null, propertyMetadata0);
      LongNode longNode0 = new LongNode(231L);
      Object object0 = new Object();
      try { 
        creatorProperty0.set(longNode0, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, 2122);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      LongNode longNode0 = new LongNode((-1000));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-1000), longNode0, propertyMetadata0);
      try { 
        creatorProperty0.setAndReturn("com.fasterxml.jackson.databind.deser.CreatorProperty", (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }
}
