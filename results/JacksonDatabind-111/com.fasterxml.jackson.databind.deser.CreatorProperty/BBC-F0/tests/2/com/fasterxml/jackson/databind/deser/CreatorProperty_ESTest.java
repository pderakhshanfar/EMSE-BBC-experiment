/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 12:48:02 GMT 2020
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-60), (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-60), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-60), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-60), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      creatorProperty1.setFallbackSetter(creatorProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-60), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-60), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      DeserializationContext deserializationContext0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'C';
      charArray0[2] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0, (-60), (-60));
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(3, charArray0.length);
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertArrayEquals(new char[] {'1', 'C', 'H'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet(readerBasedJsonParser0, (DeserializationContext) null, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.FailingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper2 = objectMapper0.enable(deserializationFeature1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getWithArgsCreator();
      assertNull(annotatedWithParams0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      assertNotNull(beanSerializerBuilder0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(beanSerializerBuilder0.hasProperties());
      
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      assertNull(annotatedClass0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(beanSerializerBuilder0.hasProperties());
      
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector1);
      assertNotSame(basicBeanDescription1, basicBeanDescription0);
      assertNotNull(basicBeanDescription1);
      assertNull(basicBeanDescription1.findClassDescription());
      assertFalse(basicBeanDescription1.equals((Object)basicBeanDescription0));
      
      AnnotatedClass annotatedClass1 = basicBeanDescription1.getClassInfo();
      assertNotSame(basicBeanDescription1, basicBeanDescription0);
      assertNull(annotatedClass1);
      assertNull(basicBeanDescription1.findClassDescription());
      assertFalse(basicBeanDescription1.equals((Object)basicBeanDescription0));
      
      PropertyName propertyName1 = PropertyName.construct("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", "");
      assertNotSame(propertyName1, propertyName0);
      assertNotNull(propertyName1);
      assertEquals("", propertyName1.getNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName1.getSimpleName());
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      assertNotNull(typeResolutionContext_Basic0);
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      assertNotNull(annotatedParameter0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals("", annotatedParameter0.getName());
      assertEquals(0, annotatedParameter0.getIndex());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName1, asWrapperTypeDeserializer0, (Annotations) null, annotatedParameter0, 4982, "?Cx@a,r&a3IOz[_Z69", propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals("", propertyName1.getNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName1.getSimpleName());
      assertEquals("", annotatedParameter0.getName());
      assertEquals(0, annotatedParameter0.getIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(4982, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertNotNull(creatorProperty1);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals("", propertyName1.getNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName1.getSimpleName());
      assertEquals("", annotatedParameter0.getName());
      assertEquals(0, annotatedParameter0.getIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(4982, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals(4982, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(4982, creatorProperty2.getCreatorIndex());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals("", propertyName1.getNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName1.getSimpleName());
      assertEquals("", annotatedParameter0.getName());
      assertEquals(0, annotatedParameter0.getIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(4982, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals(4982, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      AnnotatedParameter annotatedParameter1 = (AnnotatedParameter)creatorProperty2.getMember();
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertSame(annotatedParameter1, annotatedParameter0);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertSame(annotatedParameter0, annotatedParameter1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotNull(annotatedParameter1);
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(4982, creatorProperty2.getCreatorIndex());
      assertEquals(0, annotatedParameter1.getIndex());
      assertEquals("", annotatedParameter1.getName());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals("", propertyName1.getNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName1.getSimpleName());
      assertEquals("", annotatedParameter0.getName());
      assertEquals(0, annotatedParameter0.getIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(4982, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals(4982, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 96, (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(96, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      Class<TypeIdResolver>[] classArray0 = (Class<TypeIdResolver>[]) Array.newInstance(Class.class, 8);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      classArray0[0] = class0;
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      classArray0[1] = class1;
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      classArray0[2] = class2;
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      classArray0[3] = class3;
      Class<TypeIdResolver> class4 = TypeIdResolver.class;
      classArray0[4] = class4;
      Class<TypeIdResolver> class5 = TypeIdResolver.class;
      classArray0[5] = class5;
      Class<TypeIdResolver> class6 = TypeIdResolver.class;
      classArray0[6] = class6;
      Class<TypeIdResolver> class7 = TypeIdResolver.class;
      classArray0[7] = class7;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      assertNotNull(viewMatcher0);
      assertEquals(8, classArray0.length);
      
      creatorProperty0._viewMatcher = viewMatcher0;
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(96, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      Class<Annotation> class8 = Annotation.class;
      Annotation annotation0 = creatorProperty0.getAnnotation(class8);
      assertNull(annotation0);
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(96, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(96, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals(96, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.hasValueTypeDeserializer());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "", false, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("NhuhK%*IGc", "NhuhK%*IGc");
      assertNotNull(propertyName0);
      assertEquals("NhuhK%*IGc", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("NhuhK%*IGc", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals("NhuhK%*IGc", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("NhuhK%*IGc", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals("NhuhK%*IGc", beanProperty_Std0.getName());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, object0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("NhuhK%*IGc", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("NhuhK%*IGc", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("NhuhK%*IGc", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("NhuhK%*IGc", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("NhuhK%*IGc", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("NhuhK%*IGc", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertEquals("NhuhK%*IGc", creatorProperty2.getName());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.isRequired());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasViews());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("NhuhK%*IGc", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("NhuhK%*IGc", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("NhuhK%*IGc", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("NhuhK%*IGc", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("NhuhK%*IGc", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        creatorProperty0.set(mapType0, sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'NhuhK%*IGc'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      
      boolean boolean0 = mapType0.isTypeOrSuperTypeOf(class0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, propertyName0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      creatorProperty2.setFallbackSetter(creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      assertNotNull(objectIdInfo0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty2, objectIdInfo0);
      assertNotNull(objectIdReferenceProperty0);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, (PropertyName) null);
      assertNotNull(objectIdReferenceProperty1);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      JsonDeserializer<JsonFormat.Feature> jsonDeserializer0 = (JsonDeserializer<JsonFormat.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotNull(settableBeanProperty0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(726, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty2));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = objectIdReferenceProperty1.getAnnotation(class2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(objectIdReferenceProperty0, objectIdReferenceProperty1);
      assertNotSame(objectIdReferenceProperty1, objectIdReferenceProperty0);
      assertNull(annotation0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(objectIdReferenceProperty0.equals((Object)objectIdReferenceProperty1));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotNull(annotationMap1);
      assertEquals(1, annotationMap1.size());
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        creatorProperty2.set(creatorProperty0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      int int0 = 0;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      
      JsonParser jsonParser0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      
      DeserializationContext deserializationContext0 = null;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      assertNotNull(viewMatcher0);
      
      creatorProperty0._viewMatcher = viewMatcher0;
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      int int1 = 814;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.instantiateBean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-152), collectionType0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-152), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      assertNotNull(dOMDeserializer_NodeDeserializer0);
      assertEquals(AccessPattern.CONSTANT, dOMDeserializer_NodeDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, dOMDeserializer_NodeDeserializer0.getNullAccessPattern());
      assertFalse(dOMDeserializer_NodeDeserializer0.isCachable());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-152), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(AccessPattern.CONSTANT, dOMDeserializer_NodeDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, dOMDeserializer_NodeDeserializer0.getNullAccessPattern());
      assertFalse(dOMDeserializer_NodeDeserializer0.isCachable());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals((-152), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-152), collectionType0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-152), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-152), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-152), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = creatorProperty0.getAnnotation(class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNull(annotation0);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-152), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-63), object0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-63), creatorProperty0.getCreatorIndex());
      
      DeserializationContext deserializationContext0 = null;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class1);
      assertNotNull(mapLikeType0);
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      assertEquals(JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, jsonFormat_Feature0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(jsonFormat_Feature0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotNull(mapLikeType1);
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isConcrete());
      assertTrue(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isInterface());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isArrayType());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      
      javaTypeArray0[1] = (JavaType) mapLikeType1;
      JavaType javaType0 = collectionType0.refine(class2, (TypeBindings) null, mapLikeType0, javaTypeArray0);
      assertNotSame(javaType0, collectionType0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotNull(javaType0);
      assertEquals(2, javaTypeArray0.length);
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isConcrete());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(javaType0.equals((Object)collectionType0));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-63), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-63), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(collectionType0.equals((Object)javaType0));
      
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-43), (-43));
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals((-43), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-43), byteArrayInputStream0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.markAsIgnorable();
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertTrue(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertEquals(1, byteArray0.length);
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertEquals((-43), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertTrue(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNull(annotatedMember0);
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertTrue(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertTrue(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, "lvUzYxBA-", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("lvUzYxBA-", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), propertyMetadata0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("lvUzYxBA-", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectIdInfo objectIdInfo0 = basicBeanDescription0.getObjectIdInfo();
      assertNull(objectIdInfo0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      assertNotNull(objectIdReferenceProperty0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("lvUzYxBA-", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      
      JsonDeserializer<SequenceInputStream> jsonDeserializer0 = (JsonDeserializer<SequenceInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      assertNotNull(objectIdReferenceProperty1);
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertTrue(objectIdReferenceProperty1.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertEquals("@JsonUnwrapped", objectIdReferenceProperty1.getName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("lvUzYxBA-", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      creatorProperty0._fallbackSetter = (SettableBeanProperty) objectIdReferenceProperty1;
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertTrue(objectIdReferenceProperty1.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertEquals("@JsonUnwrapped", objectIdReferenceProperty1.getName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertFalse(creatorProperty0._fallbackSetter.isVirtual());
      assertEquals("@JsonUnwrapped", creatorProperty0._fallbackSetter.getName());
      assertFalse(creatorProperty0._fallbackSetter.isIgnorable());
      assertFalse(creatorProperty0._fallbackSetter.isRequired());
      assertNull(creatorProperty0._fallbackSetter.getManagedReferenceName());
      assertTrue(creatorProperty0._fallbackSetter.hasValueDeserializer());
      assertFalse(creatorProperty0._fallbackSetter.hasViews());
      assertEquals((-1), creatorProperty0._fallbackSetter.getPropertyIndex());
      assertTrue(creatorProperty0._fallbackSetter.hasValueTypeDeserializer());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("lvUzYxBA-", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyName0.isEmpty());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, typeFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      
      TypeIdResolver typeIdResolver0 = null;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.getRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 34, classNameIdResolver0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals(0, annotationMap0.size());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals(34, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      
      JsonParser jsonParser0 = null;
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals(0, annotationMap0.size());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals(34, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals(34, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      byte[] byteArray0 = new byte[0];
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      assertNotNull(binaryNode0);
      assertEquals(0, byteArray0.length);
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isBigInteger());
      assertNull(binaryNode0.textValue());
      assertEquals(0, binaryNode0.size());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isArray());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isDouble());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, binaryNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "rg78khe7\t,3_g.!_j", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals("rg78khe7\t,3_g.!_j", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<SequenceInputStream> class2 = SequenceInputStream.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals("rg78khe7\t,3_g.!_j", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals("rg78khe7\t,3_g.!_j", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.isRequired());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals("rg78khe7\t,3_g.!_j", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.isRequired());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.isRequired());
      assertEquals("", creatorProperty1.getName());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals("rg78khe7\t,3_g.!_j", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      try { 
        creatorProperty1.setAndReturn("']", integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      
      boolean boolean0 = mapType0.isTypeOrSuperTypeOf(class0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, propertyName0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      creatorProperty2.setFallbackSetter(creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        creatorProperty2.set(creatorProperty0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "3Z3I#[Y", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("3Z3I#[Y", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), asWrapperTypeDeserializer0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("3Z3I#[Y", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("3Z3I#[Y", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("3Z3I#[Y", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        creatorProperty0.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Class<Map> class1 = Map.class;
      Class<ClassNameIdResolver> class2 = ClassNameIdResolver.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
      assertNotNull(mapType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, ">vDs8P", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(">vDs8P", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(1502);
      assertNotNull(integer0);
      assertEquals(1502, (int)integer0);
      
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, ">vDs8P", integer0, ">vDs8P");
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotNull(propertyMetadata1);
      assertEquals(">vDs8P", propertyMetadata1.getDescription());
      assertEquals(">vDs8P", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(1502, (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1329, "']", propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(">vDs8P", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(1329, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      
      creatorProperty0._propertyIndex = 1329;
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(">vDs8P", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(1329, creatorProperty0.getPropertyIndex());
      assertEquals(1329, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      JsonDeserializer<JsonFormat.Feature> jsonDeserializer0 = (JsonDeserializer<JsonFormat.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotNull(settableBeanProperty0);
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals(1329, settableBeanProperty0.getPropertyIndex());
      assertEquals(1329, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(">vDs8P", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(1329, creatorProperty0.getPropertyIndex());
      assertEquals(1329, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      String string0 = annotationMap0.toString();
      assertNotNull(string0);
      assertEquals(0, annotationMap0.size());
      assertEquals("[null]", string0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-43), (-43));
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals((-43), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-43), byteArrayInputStream0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.markAsIgnorable();
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertEquals(1, byteArray0.length);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.isIgnorable());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertTrue(settableBeanProperty0.isRequired());
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertEquals((-43), settableBeanProperty0.getCreatorIndex());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNull(annotatedMember0);
      assertEquals(1, byteArray0.length);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty1, creatorProperty0);
      assertNotNull(settableBeanProperty1);
      assertEquals(1, byteArray0.length);
      assertFalse(settableBeanProperty1.hasViews());
      assertNull(settableBeanProperty1.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertTrue(settableBeanProperty1.isIgnorable());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty1.hasValueDeserializer());
      assertFalse(settableBeanProperty1.isVirtual());
      assertEquals("@JsonUnwrapped", settableBeanProperty1.getName());
      assertEquals((-43), settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.isRequired());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-43), byteArrayInputStream0.available());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty1.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory methodVto deserializ from Number value (%s)", true, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertEquals("no double/Double-argument cnstructor/factory methodVto deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-43), (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertEquals("no double/Double-argument cnstructor/factory methodVto deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(0, annotationMap0.size());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '@JsonUnwrapped' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", true, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-43), (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      assertNotNull(propertyMetadata_MergeInfo0);
      assertTrue(propertyMetadata_MergeInfo0.fromDefaults);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertTrue(propertyMetadata_MergeInfo0.fromDefaults);
      
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotNull(settableBeanProperty0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertEquals((-43), settableBeanProperty0.getCreatorIndex());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, settableBeanProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotNull(settableBeanProperty1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertEquals((-43), settableBeanProperty0.getCreatorIndex());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", settableBeanProperty1.getName());
      assertEquals((-43), settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertFalse(settableBeanProperty1.hasViews());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertFalse(settableBeanProperty1.isVirtual());
      assertNull(settableBeanProperty1.getManagedReferenceName());
      assertFalse(settableBeanProperty1.isIgnorable());
      assertTrue(settableBeanProperty1.isRequired());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-43), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)settableBeanProperty0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "F", false, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertEquals("F", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      assertNotNull(propertyName0);
      assertEquals("#temporary-name", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-5), (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertEquals("F", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("#temporary-name", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-5), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty0.getName());
      
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      assertEquals(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED, jsonFormat_Feature0);
      
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertNull(propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1834), asWrapperTypeDeserializer0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1834), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      String string0 = asWrapperTypeDeserializer0.toString();
      assertNotNull(string0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("[com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer; base-type:[reference type, class java.util.Map<java.util.Map<java.util.Map<java.lang.Object,java.lang.Object>,java.lang.Object>><[map type; class java.util.Map, [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [simple type, class java.lang.Object]]>]; id-resolver: null]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      assertNotNull(viewMatcher0);
      assertEquals(0, classArray0.length);
      
      creatorProperty1._viewMatcher = viewMatcher0;
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasViews());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1834), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals((-1834), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasViews());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1834), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      try { 
        creatorProperty0.deserializeSetAndReturn(readerBasedJsonParser0, deserializationContext0, charsToNameCanonicalizer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      JsonParser jsonParser0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, typeFactory0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(1, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, (PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("\"%iX;g*");
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("\"%iX;g*", propertyName0.getSimpleName());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      PropertyName propertyName1 = PropertyName.construct("\"%iX;g*", "\"%iX;g*");
      assertNotSame(propertyName1, propertyName0);
      assertNotNull(propertyName1);
      assertTrue(propertyName1.hasSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("\"%iX;g*", propertyName1.getSimpleName());
      assertEquals("\"%iX;g*", propertyName1.getNamespace());
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      Class<Annotation> class0 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class1);
      assertSame(class1, class0);
      assertNull(annotation0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      assertNotNull(annotationCollector_OneAnnotation0);
      assertEquals(1, annotationCollector_OneAnnotation0.size());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.CreatorProperty");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2123, (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("\"%iX;g*", propertyName0.getSimpleName());
      assertEquals(1, annotationCollector_OneAnnotation0.size());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(2123, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("\"%iX;g*", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyName0.equals((Object)propertyName1));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("\"%iX;g*", propertyName0.getSimpleName());
      assertEquals(1, annotationCollector_OneAnnotation0.size());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(2123, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("\"%iX;g*", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(2123, creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("\"%iX;g*", creatorProperty1.getName());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<JsonFormat.Feature> jsonDeserializer0 = (JsonDeserializer<JsonFormat.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      assertNotNull(creatorProperty2);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("\"%iX;g*", propertyName0.getSimpleName());
      assertEquals(1, annotationCollector_OneAnnotation0.size());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(2123, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("\"%iX;g*", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(2123, creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("\"%iX;g*", creatorProperty1.getName());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueTypeDeserializer());
      assertEquals("\"%iX;g*", creatorProperty2.getName());
      assertEquals(2123, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isRequired());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertNotSame(propertyName0, propertyName1);
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("\"%iX;g*", propertyName0.getSimpleName());
      assertEquals(1, annotationCollector_OneAnnotation0.size());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertEquals(2123, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("\"%iX;g*", creatorProperty0.getName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(2123, creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("\"%iX;g*", creatorProperty1.getName());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals(2123, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals("\"%iX;g*", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty2));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      System.setCurrentTimeMillis(2123);
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        creatorProperty2._throwAsIOE(sQLException0, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      
      boolean boolean0 = mapType0.isTypeOrSuperTypeOf(class0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, propertyName0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      creatorProperty2.setFallbackSetter(creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      assertNotNull(objectIdInfo0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty2, objectIdInfo0);
      assertNotNull(objectIdReferenceProperty0);
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, (PropertyName) null);
      assertNotNull(objectIdReferenceProperty1);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      creatorProperty2.fixAccess((DeserializationConfig) null);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)");
      assertNotNull(propertyName0);
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName0.getSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      AnnotationMap annotationMap1 = new AnnotationMap();
      assertNotNull(annotationMap1);
      assertEquals(0, annotationMap1.size());
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      
      Class<ClassNameIdResolver> class2 = ClassNameIdResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, (-5), defaultDeserializationContext_Impl0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-5), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap1.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-5), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap1.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C zW|u$ya$f");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-1799L));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      assertNotNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      assertNotNull(arrayType0);
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotNull(arrayType1);
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.equals((Object)arrayType0));
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      assertNotNull(propertyMetadata0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, integer0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertNotNull(creatorProperty1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(0, creatorProperty1.getCreatorIndex());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      creatorProperty1.fixAccess((DeserializationConfig) null);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(0, creatorProperty1.getCreatorIndex());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "r2", true, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("r2", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, integer0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("r2", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(1, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      PropertyName propertyName1 = annotationIntrospector0.findNameForDeserialization((Annotated) null);
      assertNull(propertyName1);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("r2", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals(0, annotationMap0.size());
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals(1, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals(1, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      // Undeclared exception!
      try { 
        creatorProperty1.set((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<String> class1 = String.class;
      Class<ClassNameIdResolver> class2 = ClassNameIdResolver.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      assertNotNull(mapType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      
      PropertyName propertyName1 = PropertyName.NO_NAME;
      assertNotSame(propertyName1, propertyName0);
      assertNotNull(propertyName1);
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasSimpleName());
      assertTrue(propertyName1.isEmpty());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      assertNotNull(creatorProperty1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasSimpleName());
      assertTrue(propertyName1.isEmpty());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertEquals(0, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasSimpleName());
      assertTrue(propertyName1.isEmpty());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertEquals(0, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNull(object0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withName((PropertyName) null);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertNotNull(settableBeanProperty1);
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty1.hasValueDeserializer());
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      assertFalse(settableBeanProperty1.isVirtual());
      assertNull(settableBeanProperty1.getManagedReferenceName());
      assertFalse(settableBeanProperty1.isIgnorable());
      assertFalse(settableBeanProperty1.isRequired());
      assertFalse(settableBeanProperty1.hasViews());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasSimpleName());
      assertTrue(propertyName1.isEmpty());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertEquals(0, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)settableBeanProperty0));
      
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(boolean0);
      
      Class<Annotation> class3 = Annotation.class;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, sequenceInputStream0, propertyMetadata0);
      assertNotNull(creatorProperty2);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertEquals(0, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.isRequired());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(propertyName0.equals((Object)propertyName1));
      
      Annotation annotation0 = creatorProperty2.getAnnotation(class3);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(creatorProperty2, settableBeanProperty1);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNull(annotation0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertEquals(0, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.isRequired());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      // Undeclared exception!
      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      PropertyName propertyName1 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      assertNotSame(propertyName1, propertyName0);
      assertNotNull(propertyName1);
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, (PropertyName) null, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1846), (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertNotNull(creatorProperty1);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals((-1846), creatorProperty2.getCreatorIndex());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      
      JsonDeserializer<ObjectIdGenerators.UUIDGenerator> jsonDeserializer1 = (JsonDeserializer<ObjectIdGenerators.UUIDGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1846), settableBeanProperty0.getCreatorIndex());
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty2));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      Object object0 = creatorProperty2.getInjectableValueId();
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNull(object0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals((-1846), creatorProperty2.getCreatorIndex());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty2.withName(propertyName1);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty1);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, settableBeanProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty1, creatorProperty1);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty1, creatorProperty2);
      assertNotNull(settableBeanProperty1);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertFalse(settableBeanProperty1.hasViews());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty1.isRequired());
      assertFalse(settableBeanProperty1.isIgnorable());
      assertEquals((-1846), settableBeanProperty1.getCreatorIndex());
      assertFalse(settableBeanProperty1.isVirtual());
      assertNull(settableBeanProperty1.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertEquals("#temporary-name", settableBeanProperty1.getName());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals((-1846), creatorProperty2.getCreatorIndex());
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty1.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty2));
      
      boolean boolean0 = creatorProperty1.isIgnorable();
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty1);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(boolean0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = creatorProperty1.getAnnotation(class2);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty1);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNull(annotation0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertTrue(propertyName1.hasSimpleName());
      assertEquals("#temporary-name", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyName1.getNamespace());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper2 = objectMapper0.enable(deserializationFeature1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getWithArgsCreator();
      assertNull(annotatedWithParams0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, (TypeResolutionContext) null, (AnnotationMap) null, 0);
      assertNotNull(annotatedParameter0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, mapType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotNull(referenceType1);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAbstract());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isInterface());
      assertTrue(referenceType1.equals((Object)referenceType0));
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType1);
      assertNotNull(asWrapperTypeDeserializer0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAbstract());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isInterface());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      Integer integer0 = new Integer(264);
      assertNotNull(integer0);
      assertEquals(264, (int)integer0);
      
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct((Boolean) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", integer0, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)");
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotNull(propertyMetadata1);
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyMetadata1.getDescription());
      assertEquals(264, (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType1, (PropertyName) null, (AnnotatedMember) null, propertyMetadata1);
      assertNotNull(beanProperty_Std0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAbstract());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isInterface());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyMetadata1.getDescription());
      assertEquals(264, (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals("@JsonUnwrapped", beanProperty_Std0.getName());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotNull(typeDeserializer0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAbstract());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isInterface());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyMetadata1.getDescription());
      assertEquals(264, (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals("@JsonUnwrapped", beanProperty_Std0.getName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", typeDeserializer0.getPropertyName());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotNull(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      PropertyName propertyName1 = annotationIntrospector0.findWrapperName((Annotated) null);
      assertNull(propertyName1);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 264, (Object) null, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAbstract());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isInterface());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(264, creatorProperty0.getCreatorIndex());
      assertEquals(0, annotationMap0.size());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, valueInstantiator_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), object0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, false);
      assertNotNull(iOContext0);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotNull(settableBeanProperty0);
      assertEquals((-1846), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3079), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals((-3079), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals((-3591), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals((-3591), readerBasedJsonParser1.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotNull(jsonParserSequence0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals((-3591), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals((-3591), readerBasedJsonParser1.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals((-3591), jsonParserSequence0.getFeatureMask());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        creatorProperty0.deserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, bufferRecycler0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2, typeFactory0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals(2, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isAbstract());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("@JsonUnwrapped", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals(2, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotNull(objectMapper2);
      assertEquals(1, jsonGenerator_FeatureArray0.length);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotNull(deserializationContext0);
      assertEquals(1, jsonGenerator_FeatureArray0.length);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, deserializationContext0, referenceType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "VTrkUDclr-Tv1\u0005\"z(W", false, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyName propertyName0 = PropertyName.construct("VTrkUDclr-Tv1\u0005\"z(W", "VTrkUDclr-Tv1\u0005\"z(W");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getSimpleName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotNull(jsonFactory4);
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4);
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 57343, jsonGenerator_Feature0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(57343, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, annotationMap0.size());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getSimpleName());
      
      Class<String> class2 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-1694));
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      assertNotNull(creatorProperty1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(57343, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, annotationMap0.size());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(57343, creatorProperty1.getCreatorIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getSimpleName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(57343, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, annotationMap0.size());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(57343, creatorProperty1.getCreatorIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty2.getName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals(57343, creatorProperty2.getCreatorIndex());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getSimpleName());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withNullProvider(coreXMLDeserializers_Std0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(57343, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(0, annotationMap0.size());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(57343, creatorProperty1.getCreatorIndex());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty1.getName());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", creatorProperty2.getName());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.hasViews());
      assertEquals(57343, creatorProperty2.getCreatorIndex());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", propertyName0.getSimpleName());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals(57343, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("VTrkUDclr-Tv1\u0005\"z(W", settableBeanProperty0.getName());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty2));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotNull(deserializationContext0);
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      try { 
        creatorProperty1.deserializeSetAndReturn(readerBasedJsonParser0, deserializationContext0, objectMapper1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'VTrkUDclr-Tv1\u0005\"z(W'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<Map> class2 = Map.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertSame(class2, class0);
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1834), asWrapperTypeDeserializer0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertEquals((-1834), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, asWrapperTypeDeserializer0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      String string0 = asWrapperTypeDeserializer0.toString();
      assertSame(class0, class2);
      assertNotNull(string0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("[com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer; base-type:[reference type, class java.util.Map<java.util.Map<java.util.Map<java.lang.Object,java.lang.Object>,java.lang.Object>><[map type; class java.util.Map, [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [simple type, class java.lang.Object]]>]; id-resolver: null]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 500, (Reader) null, objectMapper1, charsToNameCanonicalizer1);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(500, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(deserializationContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer0);
      assertSame(class0, class2);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(0, annotationMap0.size());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals((-1834), settableBeanProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1834), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertEquals((-1834), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      try { 
        creatorProperty1.deserializeSetAndReturn(readerBasedJsonParser0, deserializationContext0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      
      boolean boolean0 = mapType0.isTypeOrSuperTypeOf(class0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      assertNotNull(objectIdInfo0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      
      JsonDeserializer<JsonFormat.Feature> jsonDeserializer0 = (JsonDeserializer<JsonFormat.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class2 = Annotation.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, class2, (PropertyMetadata) null);
      assertNotNull(creatorProperty0);
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals(0, annotationMap0.size());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals(0, annotationMap0.size());
      assertEquals(726, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap0, (-1651));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1651), annotatedParameter0.getIndex());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 3008, annotationMap0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1651), annotatedParameter0.getIndex());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals(3008, creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = creatorProperty0.getAnnotation(class1);
      assertNull(annotation0);
      assertEquals(0, annotationMap0.size());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1651), annotatedParameter0.getIndex());
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals(3008, creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      
      Random.setNextRandom((-540));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      
      boolean boolean0 = mapType0.isTypeOrSuperTypeOf(class0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, propertyName0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      assertNotNull(objectIdInfo0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      assertNotNull(objectIdReferenceProperty0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, (PropertyName) null);
      assertNotNull(objectIdReferenceProperty1);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = objectIdReferenceProperty1.getAnnotation(class2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(objectIdReferenceProperty0, objectIdReferenceProperty1);
      assertNotSame(objectIdReferenceProperty1, objectIdReferenceProperty0);
      assertNull(annotation0);
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(objectIdReferenceProperty0.equals((Object)objectIdReferenceProperty1));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotNull(annotationMap1);
      assertEquals(1, annotationMap1.size());
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        creatorProperty1.set(creatorProperty0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      
      boolean boolean0 = mapType0.isTypeOrSuperTypeOf(class0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertTrue(boolean0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      
      List<JavaType> list0 = mapType0.getInterfaces();
      assertNotNull(list0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, propertyName0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      assertNotNull(objectIdInfo0);
      assertFalse(objectIdInfo0.getAlwaysAsId());
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty2, objectIdInfo0);
      assertNotNull(objectIdReferenceProperty0);
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, (PropertyName) null);
      assertNotNull(objectIdReferenceProperty1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      JsonDeserializer<JsonFormat.Feature> jsonDeserializer0 = (JsonDeserializer<JsonFormat.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals(726, settableBeanProperty0.getCreatorIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty2));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = objectIdReferenceProperty1.getAnnotation(class2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(objectIdReferenceProperty0, objectIdReferenceProperty1);
      assertNotSame(objectIdReferenceProperty1, objectIdReferenceProperty0);
      assertNull(annotation0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isConcrete());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals(0, annotationMap0.size());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty0.getName());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(726, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals(726, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty2.isVirtual());
      assertEquals(726, creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isRequired());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty2.getName());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertFalse(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertFalse(objectIdReferenceProperty1.isRequired());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(objectIdReferenceProperty0.equals((Object)objectIdReferenceProperty1));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotNull(annotationMap1);
      assertEquals(1, annotationMap1.size());
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        creatorProperty2.set(creatorProperty0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotNull(typeDeserializer0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<InputStream> jsonDeserializer2 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer2);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty1);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, settableBeanProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertNotNull(settableBeanProperty1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty1.isRequired());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty1.getName());
      assertFalse(settableBeanProperty1.hasViews());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty1.getCreatorIndex());
      assertFalse(settableBeanProperty1.isVirtual());
      assertNull(settableBeanProperty1.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertFalse(settableBeanProperty1.isIgnorable());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)settableBeanProperty0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "<:/", true, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("<:/", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyName propertyName0 = new PropertyName("VV26BQ14;=O9l%y", "V*>|rt.nS\"~1Y");
      assertNotNull(propertyName0);
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals("VV26BQ14;=O9l%y", beanProperty_Std0.getName());
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotNull(typeDeserializer0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("<:/", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals("VV26BQ14;=O9l%y", beanProperty_Std0.getName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("<:/", typeDeserializer0.getPropertyName());
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      
      PropertyName propertyName1 = propertyName0.internSimpleName();
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotNull(propertyName1);
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertEquals("V*>|rt.nS\"~1Y", propertyName1.getNamespace());
      assertEquals("VV26BQ14;=O9l%y", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.equals((Object)propertyName0));
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName1, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1988, referenceType0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("<:/", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertEquals(0, annotationMap0.size());
      assertEquals("V*>|rt.nS\"~1Y", propertyName1.getNamespace());
      assertEquals("VV26BQ14;=O9l%y", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VV26BQ14;=O9l%y", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(1988, creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertTrue(propertyName0.equals((Object)propertyName1));
      assertTrue(propertyName1.equals((Object)propertyName0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      assertNotNull(creatorProperty1);
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("<:/", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertEquals(0, annotationMap0.size());
      assertEquals("V*>|rt.nS\"~1Y", propertyName1.getNamespace());
      assertEquals("VV26BQ14;=O9l%y", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VV26BQ14;=O9l%y", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(1988, creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("VV26BQ14;=O9l%y", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals(1988, creatorProperty1.getCreatorIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertTrue(propertyName0.equals((Object)propertyName1));
      assertTrue(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotNull(settableBeanProperty0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("VV26BQ14;=O9l%y", settableBeanProperty0.getName());
      assertEquals(1988, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertTrue(settableBeanProperty0.isRequired());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("<:/", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertEquals(0, annotationMap0.size());
      assertEquals("V*>|rt.nS\"~1Y", propertyName1.getNamespace());
      assertEquals("VV26BQ14;=O9l%y", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VV26BQ14;=O9l%y", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(1988, creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertTrue(propertyName0.equals((Object)propertyName1));
      assertTrue(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName1);
      assertNotSame(settableBeanProperty1, creatorProperty1);
      assertNotSame(settableBeanProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, settableBeanProperty1);
      assertNotNull(settableBeanProperty1);
      assertEquals(1988, settableBeanProperty1.getCreatorIndex());
      assertFalse(settableBeanProperty1.hasValueDeserializer());
      assertFalse(settableBeanProperty1.isVirtual());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty1.hasViews());
      assertNull(settableBeanProperty1.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertEquals("VV26BQ14;=O9l%y", settableBeanProperty1.getName());
      assertFalse(settableBeanProperty1.isIgnorable());
      assertTrue(settableBeanProperty1.isRequired());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("<:/", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("VV26BQ14;=O9l%y", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("V*>|rt.nS\"~1Y", propertyName0.getNamespace());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertEquals(0, annotationMap0.size());
      assertEquals("V*>|rt.nS\"~1Y", propertyName1.getNamespace());
      assertEquals("VV26BQ14;=O9l%y", propertyName1.getSimpleName());
      assertFalse(propertyName1.isEmpty());
      assertTrue(propertyName1.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("VV26BQ14;=O9l%y", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals(1988, creatorProperty0.getCreatorIndex());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty1.equals((Object)settableBeanProperty0));
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertTrue(propertyName0.equals((Object)propertyName1));
      assertTrue(propertyName1.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, (String) null, false, mapType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName1 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 83, beanProperty_Bogus0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals(83, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = creatorProperty0.getAnnotation(class2);
      assertNull(annotation0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals(83, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals(83, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertEquals(0, annotationMap0.size());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals(83, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      Class<Annotation> class3 = Annotation.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class4, (List<JavaType>) stack0);
      assertNotNull(typeBindings0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("~a'G%D^n`2");
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotNull(typeBindings1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) mapType0;
      javaTypeArray0[1] = (JavaType) mapType0;
      javaTypeArray0[2] = (JavaType) mapType0;
      javaTypeArray0[3] = (JavaType) mapType0;
      javaTypeArray0[4] = (JavaType) mapType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class3, typeBindings1, (JavaType) mapType0, javaTypeArray0, javaTypeArray0[3]);
      assertSame(class3, class2);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotNull(collectionLikeType0);
      assertEquals(5, javaTypeArray0.length);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isAbstract());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[1]);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertNotNull(collectionLikeType1);
      assertEquals(5, javaTypeArray0.length);
      assertFalse(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isConcrete());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isEnumType());
      assertEquals(2, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertTrue(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.equals((Object)collectionLikeType0));
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(collectionLikeType1, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 14, objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(14, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      
      String string0 = propertyName0.toString();
      assertNotNull(string0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", string0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = creatorProperty0.getAnnotation(class2);
      assertNull(annotation0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(14, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      
      String string1 = creatorProperty0.toString();
      assertNotNull(string1);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(14, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(string1.equals((Object)string0));
      
      try { 
        creatorProperty0.set(referenceType0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isConcrete());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      
      JavaType javaType0 = typeFactory0.constructGeneralizedType(simpleType0, class0);
      assertSame(simpleType0, javaType0);
      assertSame(javaType0, simpleType0);
      assertNotNull(javaType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isConcrete());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isJavaLangObject());
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(propertyName0);
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotNull(typeDeserializer0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertNull(annotatedParameter0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotNull(settableBeanProperty0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = settableBeanProperty0.toString();
      assertNotSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotNull(string0);
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getNamespace());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", typeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(asWrapperTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asWrapperTypeDeserializer0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      
      try { 
        creatorProperty1.set((Object) null, valueInstantiator_Base0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      Object object1 = new Object();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      propertyName0.toString();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, asWrapperTypeDeserializer0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Value jsonInclude_Value0 = configOverrides0.getDefaultInclusion();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1846), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      Object object0 = creatorProperty1.getInjectableValueId();
      assertNotNull(object0);
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals((-1846), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      
      creatorProperty0.isIgnorable();
      assertEquals((-1846), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.isIgnorable();
      assertEquals((-1846), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, typeFactory0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Map> class1 = Map.class;
      Class<Object> class2 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      propertyName0.withNamespace("no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl1, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument cnstructor/factory method to deserializ from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-43), (-43));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-43), byteArrayInputStream0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      propertyMetadata0.withDefaultValue("no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.markAsIgnorable();
      try { 
        settableBeanProperty0.setAndReturn(typeFactory0, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, typeFactory0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BuilderBasedDeserializer builderBasedDeserializer0 = null;
      try {
        builderBasedDeserializer0 = new BuilderBasedDeserializer((BuilderBasedDeserializer) null, nameTransformer_Chained0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      int int0 = 0;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      asWrapperTypeDeserializer0.baseTypeName();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.getCreatorIndex();
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      try { 
        settableBeanProperty0.setAndReturn(typeFactory0, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotNull(object0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", settableBeanProperty0.getName());
      assertEquals((-1846), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", true, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Map> class2 = Map.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1834), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      asWrapperTypeDeserializer0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, deserializationContext0, charsToNameCanonicalizer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, asWrapperTypeDeserializer0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 500, (Reader) null, objectMapper1, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, deserializationContext0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 726, propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      try { 
        creatorProperty2.set(creatorProperty0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      try { 
        creatorProperty1.set(object0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", false, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, typeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), asWrapperTypeDeserializer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer0);
      try { 
        settableBeanProperty0.setAndReturn(typeFactory0, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'no double/Double-argument constructor/factory method to deserialize from Number value (%s)'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 76, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(76, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2367, 738);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler((Object) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, "", true, mapType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 2367, object0, propertyMetadata0);
      creatorProperty0.getMember();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        jsonFactory0.createParser(byteArray0, 738, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 738
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "no double/Double-argument constructor/factory method to deserialize from Number value (%s)", true, referenceType0);
      PropertyName propertyName0 = new PropertyName("no double/Double-argument constructor/factory method to deserialize from Number value (%s)", "no double/Double-argument constructor/factory method to deserialize from Number value (%s)");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1846), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      AnnotationMap.merge(annotationMap0, annotationMap0);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      try { 
        creatorProperty0.setAndReturn(valueInstantiator_Base0, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-4621));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4621), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DefaultDeserializationContext.Impl) null, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
