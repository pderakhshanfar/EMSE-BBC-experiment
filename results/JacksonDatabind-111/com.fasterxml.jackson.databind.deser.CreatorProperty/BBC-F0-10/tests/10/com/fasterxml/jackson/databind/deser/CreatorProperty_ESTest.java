/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:02:27 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.Enumeration;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(773);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 773, class0, propertyMetadata0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 4);
      Class<SimpleModule> class1 = SimpleModule.class;
      classArray0[3] = class1;
      Class<SimpleModule> class2 = SimpleModule.class;
      classArray0[1] = class2;
      Class<SimpleModule> class3 = SimpleModule.class;
      classArray0[2] = class3;
      creatorProperty0._propertyIndex = 0;
      Class<SimpleModule> class4 = SimpleModule.class;
      classArray0[3] = class4;
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class5 = Annotation.class;
      creatorProperty0.getAnnotation(class5);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(773, settableBeanProperty0.getCreatorIndex());
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = settableBeanProperty1._valueDeserializer;
      SettableBeanProperty settableBeanProperty2 = settableBeanProperty1.withNullProvider(jsonDeserializer1);
      assertTrue(settableBeanProperty2.hasValueDeserializer());
      assertEquals(773, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(773);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 773, class0, propertyMetadata0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 4);
      Class<SimpleModule> class1 = SimpleModule.class;
      classArray0[0] = class1;
      Class<SimpleModule> class2 = SimpleModule.class;
      classArray0[1] = class2;
      Class<SimpleModule> class3 = SimpleModule.class;
      classArray0[2] = class3;
      creatorProperty0._propertyIndex = 0;
      Class<SimpleModule> class4 = SimpleModule.class;
      classArray0[3] = class4;
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class5 = Annotation.class;
      creatorProperty0.getAnnotation(class5);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(773, settableBeanProperty0.getCreatorIndex());
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(773, settableBeanProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(820);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "8>R$-kjc_0YE#$");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 820, placeholderForType0, propertyMetadata0);
      creatorProperty0.assignIndex(820);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(820, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(820, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(68);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3295), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(68);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName1 = propertyName0.withNamespace("^^KGXS\"NHlDVi:");
      PropertyName.construct("^^KGXS\"NHlDVi:");
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 806);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, 1309, (Object) null, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      creatorProperty0.getMember();
      // Undeclared exception!
      try { 
        ObjectMapper.DefaultTyping.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(68);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3295), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(68);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-3295), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(68);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 68);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, (-2005), "uV6&26pt", propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-2005), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(68);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "']", true, placeholderForType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty(settableBeanProperty0);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, typeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1711, propertyName0, propertyMetadata0);
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertEquals(1711, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(785);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, placeholderForType0, propertyMetadata0);
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 7);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      classArray0[0] = class0;
      Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
      classArray0[1] = class1;
      Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
      classArray0[2] = class2;
      Class<ObjectMapper.DefaultTyping> class3 = ObjectMapper.DefaultTyping.class;
      classArray0[3] = class3;
      Class<ObjectMapper.DefaultTyping> class4 = ObjectMapper.DefaultTyping.class;
      classArray0[4] = class4;
      classArray0[5] = class2;
      Class<ObjectMapper.DefaultTyping> class5 = ObjectMapper.DefaultTyping.class;
      classArray0[6] = class5;
      Integer integer0 = new Integer(1242);
      propertyMetadata0.withIndex(integer0);
      creatorProperty0.setViews(classArray0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(785);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, placeholderForType0, propertyMetadata0);
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 7);
      Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
      classArray0[0] = class1;
      Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
      classArray0[1] = class2;
      Class<ObjectMapper.DefaultTyping> class3 = ObjectMapper.DefaultTyping.class;
      classArray0[2] = class3;
      Class<ObjectMapper.DefaultTyping> class4 = ObjectMapper.DefaultTyping.class;
      classArray0[3] = class4;
      Class<ObjectMapper.DefaultTyping> class5 = ObjectMapper.DefaultTyping.class;
      classArray0[4] = class5;
      Class<ObjectMapper.DefaultTyping> class6 = ObjectMapper.DefaultTyping.class;
      classArray0[5] = class6;
      Class<ObjectMapper.DefaultTyping> class7 = ObjectMapper.DefaultTyping.class;
      classArray0[6] = class7;
      Integer integer0 = new Integer(1242);
      propertyMetadata0.withIndex(integer0);
      creatorProperty0.setViews(classArray0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getAnnotation(class0);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 806;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 806, class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class1 = Annotation.class;
      settableBeanProperty0.getAnnotation(class1);
      try { 
        creatorProperty0.set(settableBeanProperty0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeFactory.defaultInstance();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<DoubleNode> jsonDeserializer1 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((-1123), 0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonDeserializer<Object> jsonDeserializer2 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer2);
      assertEquals((-1), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 806, placeholderForType0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(806, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName1 = propertyName0.withNamespace("^^KGXS\"NHlDVi:");
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 806);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, 1309, (Object) null, propertyMetadata0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        ObjectMapper.DefaultTyping.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(773);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 773, class0, propertyMetadata0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 4);
      Class<SimpleModule> class1 = SimpleModule.class;
      classArray0[0] = class1;
      Class<SimpleModule> class2 = SimpleModule.class;
      classArray0[1] = class2;
      Class<SimpleModule> class3 = SimpleModule.class;
      classArray0[2] = class3;
      Class<SimpleModule> class4 = SimpleModule.class;
      classArray0[3] = class4;
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class5 = Annotation.class;
      creatorProperty0.getAnnotation(class5);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals(773, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 806, propertyName0, propertyMetadata0);
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      Class<String> class2 = String.class;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, (TypeIdResolver) null, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter", true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter", integer0, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter");
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1738));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), doubleNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Integer.getInteger("com.fasterxml.jackson.databnd.ser.AnyGetteVWriter");
      Class<Annotation> class3 = Annotation.class;
      creatorProperty1.getAnnotation(class3);
      Object object0 = new Object();
      creatorProperty0.isIgnorable();
      creatorProperty0.getCreatorIndex();
      creatorProperty1.markAsIgnorable();
      assertTrue(creatorProperty1.isIgnorable());
      
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 806, simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      Integer integer0 = new Integer(1);
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      annotationMap0.annotations();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(811);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 811, (Object) null, propertyMetadata0);
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 936, creatorProperty1, propertyMetadata0);
      PropertyName propertyName1 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      creatorProperty2.withName(propertyName1);
      creatorProperty2.getMember();
      assertEquals(811, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      PropertyName propertyName0 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 806, (Object) null, propertyMetadata0);
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.setFallbackSetter(creatorProperty1);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      assertEquals(806, creatorProperty2.getCreatorIndex());
      
      JsonDeserializer<SequenceInputStream> jsonDeserializer1 = (JsonDeserializer<SequenceInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, jsonDeserializer1, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty3.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base1.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus1.getMetadata();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, collectionType0, propertyName1, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      Nulls nulls1 = Nulls.DEFAULT;
      propertyMetadata1.withNulls(nulls0, nulls1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      Integer integer0 = new Integer(2285);
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      creatorProperty2.isIgnorable();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      PropertyName propertyName0 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 806, (Object) null, propertyMetadata0);
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.setFallbackSetter(creatorProperty1);
      Class<Annotation> class1 = Annotation.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, propertyName0);
      // Undeclared exception!
      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, creatorProperty3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      Class<Object> class1 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(placeholderForType0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType2, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, "", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      Integer integer0 = new Integer(0);
      try { 
        creatorProperty0.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      Integer integer0 = new Integer((-1));
      try { 
        creatorProperty0.setAndReturn("", (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), typeFactory0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Object object0 = new Object();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      Integer integer0 = new Integer((-853));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty0.set(propertyMetadata0, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      PropertyName propertyName0 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 806, (Object) null, propertyMetadata0);
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertEquals(806, creatorProperty2.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader0);
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2164), valueInstantiator_Base1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-2164), settableBeanProperty0.getCreatorIndex());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-2164), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      
      Integer integer0 = new Integer((-853));
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-1), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader.getSystemClassLoader();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      Integer integer0 = new Integer((-549));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      Integer integer1 = new Integer((-1));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      FloatNode floatNode0 = FloatNode.valueOf((-1.4258481F));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader.getSystemClassLoader();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      Integer integer0 = new Integer((-549));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), integer0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      Integer integer1 = new Integer((-1));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      Integer integer0 = new Integer(1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0.set(integer0, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      Boolean boolean0 = new Boolean("");
      Integer.getInteger("Mv'e>D");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", (Integer) null, "Mv'e>D");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 44, defaultDeserializationContext0, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<FM8IoJv\"");
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      PropertyName propertyName0 = new PropertyName("default", "<FM8IoJv\"");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Object> class0 = Object.class;
      collectionLikeType0.isTypeOrSubTypeOf(class0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2087);
      Class<SimpleModule> class1 = SimpleModule.class;
      AnnotationMap.merge(annotationMap0, annotationMap1);
      placeholderForType0.findSuperType(class1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "<FM8IoJv\"", integer0, "thM1");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, 0, annotationMap1, propertyMetadata0);
      propertyMetadata0.withDefaultValue("default");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 1);
      Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
      classArray0[0] = class2;
      creatorProperty2.setViews(classArray0);
      creatorProperty2.getCreatorIndex();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        creatorProperty1.set("9^as+CCb", objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'default'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      Annotations annotations0 = null;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        creatorProperty1.inject((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Nulls nulls0 = Nulls.FAIL;
      propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, settableBeanProperty0, propertyMetadata0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      typeFactory0.constructSpecializedType(collectionType0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty1.getMember();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory1);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDefaultValue("");
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 33, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      creatorProperty1.isIgnorable();
      creatorProperty0.isIgnorable();
      creatorProperty1.getMember();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty1.findInjectableValue(defaultDeserializationContext_Impl1, collectionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      PropertyName propertyName0 = PropertyName.construct("not a valid representation, problem: (%s) %s");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(806);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 806, (Object) null, propertyMetadata0);
      assertEquals(806, creatorProperty0.getCreatorIndex());
      
      Integer integer0 = new Integer(224);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, placeholderForType0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeFactory.defaultInstance();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      creatorProperty1.withName(propertyName0);
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-1), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, (AnnotationIntrospector) null);
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class1 = Object.class;
      typeBindings0.asKey(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("[loEZw");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "_~!LRC", integer0, (String) null);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nKX^8e");
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1738), (Object) null, propertyMetadata0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class1, (-1738));
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1738), objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, (PropertyName) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.withName((PropertyName) null);
      creatorProperty1.isIgnorable();
      creatorProperty3.getMember();
      assertEquals((-1738), creatorProperty2.getCreatorIndex());
      assertEquals((-1738), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, (AnnotationIntrospector) null);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class1 = Object.class;
      typeBindings0.asKey(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName1 = PropertyName.construct("[loEZw", "Trying to re-set self reference; old value = ");
      Boolean boolean0 = new Boolean("[loEZw");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "_~!LRC", integer0, (String) null);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nKX^8e");
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1738), (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Integer.getInteger("Hmj/jY;xr8");
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      Object object2 = new Object();
      creatorProperty0.isIgnorable();
      creatorProperty1.getCreatorIndex();
      creatorProperty1.markAsIgnorable();
      assertTrue(creatorProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, (AnnotationIntrospector) null);
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class1 = Object.class;
      typeBindings0.asKey(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("[loEZw");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "_~!LRC", integer0, (String) null);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nKX^8e");
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1738), (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertEquals((-1738), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      DoubleNode.valueOf((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1337, (Object) null, propertyMetadata0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      Class<String> class2 = String.class;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, (TypeIdResolver) null, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter", true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter", integer0, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter");
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1738));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), doubleNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Integer.getInteger("com.fasterxml.jackson.databnd.ser.AnyGetteVWriter");
      Class<Annotation> class3 = Annotation.class;
      creatorProperty1.getAnnotation(class3);
      Object object0 = new Object();
      creatorProperty0.isIgnorable();
      creatorProperty0.getCreatorIndex();
      creatorProperty1.markAsIgnorable();
      creatorProperty1.withName((PropertyName) null);
      assertTrue(creatorProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      Class<String> class2 = String.class;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, (TypeIdResolver) null, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter", true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter", integer0, "com.fasterxml.jackson.databnd.ser.AnyGetteVWriter");
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1738));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), doubleNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Integer.getInteger("com.fasterxml.jackson.databnd.ser.AnyGetteVWriter");
      Class<Annotation> class3 = Annotation.class;
      creatorProperty1.getAnnotation(class3);
      Object object0 = new Object();
      creatorProperty0.isIgnorable();
      creatorProperty0.getCreatorIndex();
      creatorProperty1.markAsIgnorable();
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getInjectableValueId();
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, (AnnotationIntrospector) null);
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class1 = Object.class;
      typeBindings0.asKey(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName.construct("[loEZw", "Trying to re-set self reference; old value = ");
      Boolean boolean0 = new Boolean("[loEZw");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "_~!LRC", integer0, (String) null);
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nKX^8e");
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1738), (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      JsonParser jsonParser0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      creatorProperty0.setFallbackSetter(creatorProperty1);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      Class<Object> class1 = Object.class;
      typeBindings0.asKey(class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, collectionLikeType0, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
      try { 
        creatorProperty2.deserializeAndSet((JsonParser) null, defaultDeserializationContext0, "com.fasterxml.jackson.databind.ser.AnyGetterWriter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionType0);
      valueInstantiator_Base0.getIncompleteParameter();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4251, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", false, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      collectionLikeType0.withContentType(mapType0);
      Integer integer0 = new Integer((-1738));
      mapType0.isThrowable();
      annotationIntrospector0.isTypeId((AnnotatedMember) null);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", integer0, "");
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1738), object0, propertyMetadata0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      try { 
        creatorProperty0.set(class1, class2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      Class<Object> class3 = Object.class;
      typeBindings0.asKey(class3);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1825), object0, propertyMetadata0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getInjectableValueId();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn((Object) null, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.ser.AnyGetterWriter");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaTypeArray0[2], (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", true, javaTypeArray0[1]);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asPropertyTypeDeserializer1, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty2.getAnnotation(class3);
      assertEquals(0, creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      mapType0.isThrowable();
      annotationIntrospector0.isTypeId((AnnotatedMember) null);
      Integer integer1 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "cMh6zzZ`Q%T,v", integer1, "cMh6zzZ`Q%T,v");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[2], (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1206), (Object) null, propertyMetadata0);
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      try { 
        creatorProperty0.setAndReturn(propertyMetadata0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      Class<Object> class3 = Object.class;
      typeBindings0.asKey(class3);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1825), object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn((Object) null, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      annotationIntrospector1.findNameForSerialization((Annotated) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) collectionLikeType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.ser.AnyGetterWriter", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1738));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1738), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(annotationIntrospector0, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }
}
