/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:19:16 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.IOException;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2281), jsonTypeInfo_Id0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      creatorProperty0.set("", booleanNode0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.construct("Invalid configuration: values of type %s cannot be merged", "not a valid representation, problem: (%s) %s");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-987), (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|%}H", (String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2286), jsonTypeInfo_Id0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<BooleanNode> jsonDeserializer1 = (JsonDeserializer<BooleanNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals((-2286), creatorProperty1.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|%}H", (String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2286), jsonTypeInfo_Id0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("[creator property, name '");
      assertEquals((-2286), settableBeanProperty0.getCreatorIndex());
      assertEquals("[creator property, name '", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2281), jsonTypeInfo_Id0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2028), (Object) null, propertyMetadata0);
      creatorProperty0._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertEquals((-2028), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|%}H", (String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2286), jsonTypeInfo_Id0, propertyMetadata0);
      Class<JsonTypeInfo.Id>[] classArray0 = (Class<JsonTypeInfo.Id>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<BooleanNode> jsonDeserializer0 = (JsonDeserializer<BooleanNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-2286), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3163, classNameIdResolver0, propertyMetadata0);
      creatorProperty0._propertyIndex = 3163;
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(3163, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2028), (Object) null, propertyMetadata0);
      creatorProperty0._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-2028), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("v");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3596), propertyName0, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer0);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertEquals((-3596), creatorProperty1.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 248, annotationMap0, propertyMetadata0);
      creatorProperty0._propertyIndex = 248;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(248, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4915), annotationMap0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4915), annotationMap0, propertyMetadata0);
      Class<SequenceInputStream>[] classArray0 = (Class<SequenceInputStream>[]) Array.newInstance(Class.class, 9);
      creatorProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-4915), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|%}H", (String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2286), jsonTypeInfo_Id0, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertEquals((-2286), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|%}H", (String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2851, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 996;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(2851, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      creatorProperty0.getMember();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("", "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "T", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 5112, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(5112, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, resolvedRecursiveType0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      // Undeclared exception!
      try { 
        settableBeanProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      JsonFactory jsonFactory0 = new JsonFactory();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(jsonFactory0, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2282), simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      // Undeclared exception!
      try { 
        creatorProperty0.set(simpleObjectIdResolver0, booleanNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("so-9YWx6(*3n ", "com.fasterxml.jackson.core.io.IOContext");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "", true, placeholderForType0);
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "Problem accessing property '", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Problem accessing property '", false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        creatorProperty0.deserializeAndSet(readerBasedJsonParser0, deserializationContext0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'int' as a subtype of [recursive type; UNRESOLVED: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4915), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3163, classNameIdResolver0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(3163, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 90);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      Integer integer0 = new Integer(90);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "(4k", integer0, "(4k");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 90, object0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(90, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|%}H", (String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2286), jsonTypeInfo_Id0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, "|%}H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-926), "", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertEquals((-926), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals((-926), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("q&L(DUrKT]R!{");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2583, annotationMap0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(2583, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Integer> class0 = Integer.class;
      NamedType namedType0 = new NamedType(class0, "&b+cc,hy{");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 162, namedType0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertSame(settableBeanProperty0, creatorProperty0);
      assertEquals(162, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4915), annotationMap0, propertyMetadata0);
      creatorProperty0.isIgnorable();
      assertEquals((-4915), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2281), jsonTypeInfo_Id0, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-2281), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1728, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, "com.fasterxml.jackson.databind.deser.CreatorProperty");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1728, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, "com.fasterxml.jackson.databind.deser.CreatorProperty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1658), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3163, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.toString();
      assertEquals(3163, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3163, classNameIdResolver0, propertyMetadata0);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotNull(object0);
      assertEquals(3163, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4915), annotationMap0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, (AnnotationMap) null, 0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, 0, simpleModule0, (PropertyMetadata) null);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertEquals(0, creatorProperty0.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3163, classNameIdResolver0, propertyMetadata0);
      try { 
        creatorProperty0.set(asArrayTypeDeserializer0, asArrayTypeDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4907), annotationMap0, propertyMetadata0);
      try { 
        creatorProperty0.setAndReturn(propertyName0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }
}
