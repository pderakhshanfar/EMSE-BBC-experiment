/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:48:53 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      Class<JavaType> class0 = JavaType.class;
      placeholderForType0.findSuperType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct((String) null);
      Integer integer1 = new Integer((-624));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer1, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1600, "4Yo/LP'#\"`", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      propertyName1.withSimpleName("']");
      creatorProperty1._propertyIndex = 1600;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertEquals(1600, creatorProperty2.getCreatorIndex());
      
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName2);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty3.getAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      Object object0 = settableBeanProperty0.getInjectableValueId();
      assertNotNull(object0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(1600, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.getMember();
      creatorProperty0.isIgnorable();
      assertEquals(1600, creatorProperty0.getCreatorIndex());
      
      FromStringDeserializer.findDeserializer(class2);
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals(1600, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("eX$}wh]&gfK", "eX$}wh]&gfK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eX$}wh]&gfK");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      Class<InputStream>[] classArray0 = (Class<InputStream>[]) Array.newInstance(Class.class, 6);
      Class<InputStream> class0 = InputStream.class;
      creatorProperty0.assignIndex(0);
      classArray0[0] = class0;
      Class<InputStream> class1 = InputStream.class;
      classArray0[1] = class1;
      Class<InputStream> class2 = InputStream.class;
      classArray0[2] = class2;
      Class<InputStream> class3 = InputStream.class;
      classArray0[3] = class3;
      Class<InputStream> class4 = InputStream.class;
      classArray0[4] = class4;
      Class<InputStream> class5 = InputStream.class;
      classArray0[5] = class5;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals((-624), settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals((-624), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JavaType javaType0 = null;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("CT.>x3x.:KIXhRM\"9%");
      int int0 = (-143);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 240, (Object) null, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.set(creatorProperty0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
          Class<MatchStrength> class0 = MatchStrength.class;
          AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
          Boolean boolean0 = Boolean.FALSE;
          Integer integer0 = new Integer(256);
          PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
          CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
          JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
          CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
          CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
          creatorProperty2.fixAccess((DeserializationConfig) null);
          JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
          SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
          settableBeanProperty0._propertyIndex = 534;
          settableBeanProperty0.withName(propertyName0);
          creatorProperty1.setFallbackSetter(settableBeanProperty0);
          creatorProperty0.setFallbackSetter(creatorProperty2);
          JsonFactory jsonFactory0 = new JsonFactory();
          ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
          JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
          jsonFactory1.copy();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor248.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<MatchStrength> class0 = MatchStrength.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, (JavaType) null);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, typeResolutionContext_Basic0, annotationMap0, 0);
      Class<Annotation> class2 = Annotation.class;
      annotatedParameter0.getAnnotation(class2);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.deser.CreatorProperty", integer0, "com.fasterxml.jackson.databind.deser.CreatorProperty");
      Boolean boolean1 = Boolean.valueOf(true);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean1);
      Nulls nulls0 = Nulls.SET;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, annotatedParameter0, 1, class1, propertyMetadata2);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNotNull(annotatedMember0);
      assertEquals(1, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[creator property, name '");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0._ignorable = true;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      PropertyName.construct("[creator property, name '", "");
      creatorProperty2.getMember();
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
      creatorProperty1.toString();
      creatorProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
          Class<MatchStrength> class0 = MatchStrength.class;
          AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
          Boolean boolean0 = Boolean.FALSE;
          Integer integer0 = new Integer(256);
          PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
          CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
          JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
          CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
          CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
          creatorProperty2.fixAccess((DeserializationConfig) null);
          JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
          SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
          settableBeanProperty0.markAsIgnorable();
          settableBeanProperty0.withName(propertyName0);
          creatorProperty1.setFallbackSetter(settableBeanProperty0);
          creatorProperty0.setFallbackSetter(creatorProperty2);
          JsonFactory jsonFactory0 = new JsonFactory();
          ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
          JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
          jsonFactory1.copy();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor248.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-71));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-71), (Object) null, propertyMetadata0);
      propertyName0.toString();
      creatorProperty0.getMember();
      creatorProperty0.withName(propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      ObjectMapper objectMapper2 = objectMapper1.addHandler((DeserializationProblemHandler) null);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      try { 
        creatorProperty0.findInjectableValue(deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[creator property, name '");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "$Gg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace("Internal error: unknown key type ");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = beanDeserializerFactory0.mapAbstractType((DeserializationConfig) null, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType1, classNameIdResolver0, "N.cCS&uXD|]SrXMU|", true, javaType0);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2284));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Internal error: unknown key type ", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType1, propertyName1, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<MatchStrength> jsonDeserializer0 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1326));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1763, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty2.setFallbackSetter(creatorProperty1);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      propertyMetadata0.withDescription("o8@4]21 y");
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Object object0 = new Object();
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-127));
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2965, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.fixAccess((DeserializationConfig) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      // Undeclared exception!
      try { 
        rootNameLookup0.findRootName((JavaType) placeholderForType0, (MapperConfig<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.RootNameLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2488), (Object) null, propertyMetadata0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      propertyName0.withSimpleName("Property '%s' (type %s) has no injectable value id configured");
      creatorProperty0.markAsIgnorable();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.isIgnorable();
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2488), (Object) null, propertyMetadata0);
      propertyName0.withSimpleName("Property '%s' (type %s) has no injectable value id configured");
      creatorProperty0.markAsIgnorable();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 9);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      classArray0[0] = class1;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      classArray0[1] = class2;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      classArray0[2] = class3;
      Class<ObjectIdResolver> class4 = ObjectIdResolver.class;
      classArray0[3] = class4;
      Class<ObjectIdResolver> class5 = ObjectIdResolver.class;
      classArray0[4] = class5;
      Class<ObjectIdResolver> class6 = ObjectIdResolver.class;
      classArray0[5] = class6;
      Class<ObjectIdResolver> class7 = ObjectIdResolver.class;
      classArray0[6] = class7;
      Class<ObjectIdResolver> class8 = ObjectIdResolver.class;
      classArray0[7] = class8;
      Class<ObjectIdResolver> class9 = ObjectIdResolver.class;
      classArray0[8] = class9;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      settableBeanProperty0._viewMatcher = viewMatcher0;
      settableBeanProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      JsonDeserializer<String> jsonDeserializer2 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty0, jsonDeserializer2, jsonDeserializer2);
      creatorProperty1.toString();
      System.setCurrentTimeMillis(256);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, propertyName0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty2, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty6 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-128), simpleObjectIdResolver0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, (DeserializationContext) null, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2449));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2449), propertyName0, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-2449), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 8000, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findRootName((AnnotatedClass) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0, jsonTypeInfo_As0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      AnnotatedMethod annotatedMethod0 = beanDeserializerBuilder0._buildMethod;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, annotationMap0, (-9999));
      Class<DoubleNode> class0 = DoubleNode.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jackson.core.JsonEncoding", javaType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, annotatedField0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, typeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.toString();
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
      
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.CreatorProperty");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      Class<MatchStrength> class0 = MatchStrength.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot call getValue() on constructor parameter of ");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.CreatorProperty", false, resolvedRecursiveType0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, typeResolutionContext_Basic0, annotationMap0, 0);
      Class<Annotation> class2 = Annotation.class;
      annotatedParameter0.getAnnotation(class2);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.deser.CreatorProperty", integer0, "com.fasterxml.jackson.databind.deser.CreatorProperty");
      Boolean boolean1 = Boolean.valueOf(true);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean1);
      Nulls nulls0 = Nulls.SET;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      Integer integer1 = new Integer(1);
      propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, resolvedRecursiveType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, annotatedParameter0, 1, class1, propertyMetadata2);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNotNull(annotatedMember0);
      
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      assertEquals(1, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2449));
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2449), (Object) null, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.getInjectableValueId();
      assertEquals((-624), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("eX$}wh]&gfK", "eX$}wh]&gfK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eX$}wh]&gfK");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      Class<InputStream>[] classArray0 = (Class<InputStream>[]) Array.newInstance(Class.class, 6);
      Class<InputStream> class0 = InputStream.class;
      classArray0[0] = class0;
      Class<InputStream> class1 = InputStream.class;
      classArray0[1] = class1;
      Class<InputStream> class2 = InputStream.class;
      classArray0[2] = class2;
      Class<InputStream> class3 = InputStream.class;
      classArray0[3] = class3;
      Class<InputStream> class4 = InputStream.class;
      classArray0[4] = class4;
      Class<InputStream> class5 = InputStream.class;
      classArray0[5] = class5;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.getCreatorIndex();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals((-624), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findRootName((AnnotatedClass) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, (String) null, true, javaType0, jsonTypeInfo_As0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      AnnotatedMethod annotatedMethod0 = beanDeserializerBuilder0._buildMethod;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, annotationMap0, (-9999));
      Class<DoubleNode> class0 = DoubleNode.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jackson.core.JsonEncoding", javaType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, annotatedField0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getAnnotation(class1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, typeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'null']", string0);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Integer integer0 = new Integer(256);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      System.setCurrentTimeMillis(256);
      Boolean boolean0 = Boolean.valueOf("JSON");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "JSON", integer0, "");
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, jsonFactory1, propertyMetadata2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer1);
      assertEquals(256, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.toString();
      creatorProperty1.getCreatorIndex();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl1, jsonFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2488), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Deserializers.Base deserializers_Base1 = new Deserializers.Base();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl1);
      BeanDeserializerBuilder beanDeserializerBuilder1 = new BeanDeserializerBuilder(beanDeserializerBuilder0);
      DeserializationConfig deserializationConfig0 = beanDeserializerBuilder1._config;
      deserializers_Base1.findEnumDeserializer(class0, (DeserializationConfig) null, (BeanDescription) null);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl2.copy();
      try { 
        creatorProperty0.inject(defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '#temporary-name' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      String string0 = "";
      PropertyName.construct("com.fasterxmljackson.core.type.ReolvedType");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName propertyName0 = PropertyName.construct("ALLOW_UNQUOTED_FIELD_NAMES");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = PropertyName.construct("4");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), placeholderForType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("iH+BBA-BTTH#[$O|");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("iH+BBA-BTTH#[$O|");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct("yjMg^FG");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<InputStream> class0 = InputStream.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName2, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, (-238), beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName2);
      creatorProperty2.toString();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty3.getAnnotation(class2);
      Class<Annotation> class3 = Annotation.class;
      Object object0 = new Object();
      try { 
        creatorProperty3.setAndReturn(class3, "4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'iH+BBA-BTTH#[$O|'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("iH+BBA-BTTH#[$O|");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("iH+BBA-BTTH#[$O|");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory1 = new JsonFactory();
      jsonFactory1.copy();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty1.toString();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty3.setAndReturn((Object) null, propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct((String) null);
      Integer integer1 = new Integer((-624));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer1, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1600, "4Yo/LP'#\"`", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      propertyName1.toString();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName2);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty3.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      JsonDeserializer<Annotation> jsonDeserializer2 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer2);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals(1600, settableBeanProperty0.getCreatorIndex());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        settableBeanProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct((String) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer0, "4Yo/LP'#\"`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1600, "4Yo/LP'#\"`", propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = null;
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, propertyName0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty2, propertyName0);
      creatorProperty1.getCreatorIndex();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      creatorProperty2.withNullProvider(jsonDeserializer1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty5.inject(defaultDeserializationContext_Impl2, fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("~&4)v,P$");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer1 = new Integer(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3624), integer1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName2 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName2);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty4 = new CreatorProperty(propertyName2, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-559), (Object) null, propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty4.findInjectableValue((DeserializationContext) null, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), (Object) null, propertyMetadata0);
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AnnotationMap annotationMap1 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      annotationMap0.get(class0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      Class<JavaType> class0 = JavaType.class;
      placeholderForType0.findSuperType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct((String) null);
      Integer integer1 = new Integer((-624));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer1, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1600, "4Yo/LP'#\"`", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName2);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty3.getAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      Object object0 = settableBeanProperty0.getInjectableValueId();
      assertEquals(1600, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotNull(object0);
      
      creatorProperty0.getMember();
      creatorProperty0.isIgnorable();
      assertEquals(1600, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'; inject id '");
      creatorProperty0.fixAccess((DeserializationConfig) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals((-624), creatorProperty1.getCreatorIndex());
      
      creatorProperty0.getCreatorIndex();
      creatorProperty0.isIgnorable();
      assertEquals((-624), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withDefaultValue("Cannot override _nullSerializer: had a %s, trying to set to %s");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 961, (Object) null, propertyMetadata0);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(961);
      PropertyMetadata.construct(boolean0, "Cannot override _nullSerializer: had a %s, trying to set to %s", integer0, (String) null);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0._managedReferenceName = "";
      Integer integer1 = new Integer(0);
      propertyName0.withNamespace("Cannot override _nullSerializer: had a %s, trying to set to %s");
      propertyMetadata0.withIndex(integer1);
      JsonDeserializer<MatchStrength> jsonDeserializer0 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("}Z945,%Bkr6", "}Z945,%Bkr6");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      AnnotationMap annotationMap1 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      annotationMap1.get(class0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, propertyName0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty2, propertyName0);
      creatorProperty1.getCreatorIndex();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty5.inject(defaultDeserializationContext_Impl2, fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, propertyName0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty2, propertyName0);
      assertEquals(256, creatorProperty2.getCreatorIndex());
      
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      JavaType javaType0 = null;
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      creatorProperty2.setFallbackSetter(creatorProperty1);
      creatorProperty2.setFallbackSetter(creatorProperty3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, propertyName0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty5.toString();
      creatorProperty0.getCreatorIndex();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      try { 
        creatorProperty3.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl1, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty2.withName(propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, propertyName0);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty2, (JsonDeserializer<?>) null, (NullValueProvider) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      try { 
        creatorProperty1.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName.construct("com.fasterxmljackson.core.type.ReolvedType");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName propertyName0 = PropertyName.construct("ALLOW_UNQUOTED_FIELD_NAMES");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = PropertyName.construct("4");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), placeholderForType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct("Mp:Tn)Ns'En{Ht");
      Integer integer1 = new Integer((-624));
      AnnotationMap annotationMap1 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap1, (AnnotatedParameter) null, (-1012), "~&4)v,P$", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<MatchStrength> jsonDeserializer0 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName3 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName3);
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty5 = new CreatorProperty(creatorProperty4, propertyName0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty5.getAnnotation(class0);
      CreatorProperty creatorProperty6 = (CreatorProperty)creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        creatorProperty6.findInjectableValue((DeserializationContext) null, creatorProperty3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis((-3096L));
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyName propertyName0 = PropertyName.construct("|+`&a`-!@$Nv,@", "|+`&a`-!@$Nv,@");
      ObjectIdGenerator<MockFileInputStream> objectIdGenerator0 = (ObjectIdGenerator<MockFileInputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyName propertyName1 = objectIdReader0.propertyName;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "|+`&a`-!@$Nv,@", false, javaType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType0, propertyName0, asExternalTypeDeserializer1, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      PropertyName propertyName2 = objectIdReader0.propertyName.withNamespace("n%;n");
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName2);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      assertNotSame(settableBeanProperty1, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals(2, creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      settableBeanProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      JsonDeserializer<String> jsonDeserializer2 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty0, jsonDeserializer2, jsonDeserializer2);
      creatorProperty1.toString();
      System.setCurrentTimeMillis(256);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName.construct("~&4)v,P$");
      int int0 = (-624);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName0 = PropertyName.construct("");
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName propertyName1 = PropertyName.construct("4");
      Class<Module> class0 = Module.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 24, typeBindings0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getMember();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct((String) null);
      Integer integer1 = new Integer((-624));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer1, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1600, "4Yo/LP'#\"`", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName2);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty3.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      Object object0 = settableBeanProperty0.getInjectableValueId();
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertNotNull(object0);
      assertEquals(1600, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.getMember();
      assertEquals(1600, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-624), int0);
      
      creatorProperty0.getInjectableValueId();
      assertEquals((-624), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "~&4)v,P$";
      PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      int int0 = (-7);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-7));
      PropertyName propertyName0 = PropertyName.construct("");
      TypeDeserializer typeDeserializer0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-7));
      PropertyName propertyName1 = PropertyName.construct("4");
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<MatchStrength> class0 = MatchStrength.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      String string1 = "";
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      try { 
        creatorProperty1.setAndReturn("4", matchStrength0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '4'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      try { 
        creatorProperty0.setAndReturn(integer0, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '~&4)v,P$'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("~&4)v,P$");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      creatorProperty3.toString();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      Object object0 = new Object();
      try { 
        creatorProperty1.setAndReturn(object0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '4'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      int int0 = 256;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      DeserializationConfig deserializationConfig0 = null;
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      settableBeanProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      JsonDeserializer<String> jsonDeserializer2 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty0, jsonDeserializer2, jsonDeserializer2);
      try { 
        creatorProperty4.set(jsonFactory2, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      settableBeanProperty0.withName(propertyName0);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, true);
      // Undeclared exception!
      try { 
        jsonFactory4.createParser((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~5)v,P$", "~5)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals((-624), int0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-624), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = null;
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.getCreatorIndex();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-630));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-630));
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, matchStrength0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertSame(settableBeanProperty0, creatorProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      creatorProperty3.toString();
      creatorProperty3.getCreatorIndex();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.copy();
      try { 
        creatorProperty2.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, jsonFactory1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName.construct("~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName.construct("com.fasterxmljackson.core.type.ReolvedType");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Integer integer0 = new Integer((-624));
      PropertyName propertyName0 = PropertyName.construct("ALLOW_UNQUOTED_FIELD_NAMES");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = PropertyName.construct("4");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), placeholderForType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      Object object0 = new Object();
      try { 
        creatorProperty2.set(object0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'ALLOW_UNQUOTED_FIELD_NAMES'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<MatchStrength> class0 = MatchStrength.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(256);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 256, mockFileInputStream0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.fixAccess((DeserializationConfig) null);
      JsonDeserializer<MatchStrength> jsonDeserializer1 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.setFallbackSetter(creatorProperty2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, true);
      // Undeclared exception!
      try { 
        jsonFactory4.createParser((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("iH+BBA-BTTH#[$O|");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("iH+BBA-BTTH#[$O|");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-624));
      PropertyName propertyName2 = PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName.construct("4", "iH+BBA-BTTH#[$O|");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory1 = new JsonFactory();
      jsonFactory1.copy();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty1.toString();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.markAsIgnorable();
      creatorProperty1.getAnnotation(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty3.setAndReturn((Object) null, propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct("4");
      propertyName0.withSimpleName("[creator property, name '");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "~&4)v,P$", integer0, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.markAsIgnorable();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      assertTrue(creatorProperty1.isIgnorable());
      assertEquals((-624), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct((String) null);
      Integer integer1 = new Integer((-624));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer1, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1600, "4Yo/LP'#\"`", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<MatchStrength> jsonDeserializer0 = (JsonDeserializer<MatchStrength>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      try { 
        creatorProperty2.set("']", propertyMetadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertEquals((-624), creatorProperty1.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-624), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct("required");
      PropertyName.construct("required", "x0T! DiFCo");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      try { 
        creatorProperty0.set(placeholderForType0, "~&4)v,P$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct("required");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, placeholderForType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      try { 
        creatorProperty0.set(placeholderForType0, "~&4)v,P$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("~&4)v,P$", "~&4)v,P$");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-624));
      PropertyName propertyName1 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      Boolean boolean0 = new Boolean("x0T! DiFCo");
      Integer integer0 = new Integer((-624));
      PropertyName.construct("4");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "~&4)v,P$", integer0, "4Yo/LP'#\"`");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-624), matchStrength0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty2.getAnnotation(class0);
      assertEquals((-624), creatorProperty2.getCreatorIndex());
  }
}
