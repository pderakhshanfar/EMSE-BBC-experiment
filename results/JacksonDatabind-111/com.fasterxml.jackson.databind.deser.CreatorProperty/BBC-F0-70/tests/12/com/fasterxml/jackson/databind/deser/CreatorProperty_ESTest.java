/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:59:29 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.ClientInfoStatus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2399, propertyName0, propertyMetadata0);
      assertEquals(2399, creatorProperty0.getCreatorIndex());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty1.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName.construct((String) null, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyName.construct("");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName.construct((String) null, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 1509;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 1509;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 457);
      coreXMLDeserializers_Std0.getValueType();
      IntNode intNode0 = new IntNode(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 59, intNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1221), propertyName0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1221), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("|m6sHa-Gx!M");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2265));
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      PropertyName propertyName1 = new PropertyName("", "']");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      AnnotatedMember annotatedMember0 = creatorProperty2.getMember();
      assertEquals(0, creatorProperty2.getCreatorIndex());
      assertNotNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1000), propertyMetadata0, propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.UUIDGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.UUIDGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0._propertyIndex = 0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      try { 
        creatorProperty0.set((Object) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<NamedType> class1 = NamedType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = null;
      TypeDeserializer typeDeserializer0 = null;
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1164, objectIdGenerators_UUIDGenerator0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation1 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      int int0 = 0;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0.setAndReturn(jsonParser_Feature0, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<NamedType> class1 = NamedType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1164, objectIdGenerators_UUIDGenerator0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation1 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation1, (AnnotatedParameter) null, 0, annotationCollector_OneAnnotation1, (PropertyMetadata) null);
      try { 
        creatorProperty0.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4834, propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn((Object) null, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1), class0, propertyMetadata0);
      JsonDeserializer<ClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<ClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<JsonSerializer<String>> jsonDeserializer1 = (JsonDeserializer<JsonSerializer<String>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      SettableBeanProperty settableBeanProperty1 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertEquals((-1), settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1403;
      Random.setNextRandom(1403);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1403);
      Random.setNextRandom(1403);
      PropertyName propertyName0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1403);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      NamedType namedType0 = new NamedType(class0);
      placeholderForType0.containedTypeOrUnknown(117);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.TRUE;
      AnnotationMap.merge(annotationMap0, annotationMap0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      Class<JsonSerializer> class1 = JsonSerializer.class;
      placeholderForType0.findSuperType(class1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 117, namedType0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0._fallbackSetter = (SettableBeanProperty) creatorProperty1;
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType1, (TypeResolutionContext) null, annotationMap1, 18);
      AnnotatedParameter annotatedParameter1 = annotatedParameter0.withAnnotations(annotationMap1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter1, 18, (Object) null, (PropertyMetadata) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(18, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 4424, (Object) null, (PropertyMetadata) null);
      Object object0 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 4424, object0, (PropertyMetadata) null);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(4424, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<JsonParser.Feature> jsonDeserializer0 = (JsonDeserializer<JsonParser.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1939), propertyName0, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      try { 
        creatorProperty0.set((Object) null, settableBeanProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<NamedType> class1 = NamedType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1164, objectIdGenerators_UUIDGenerator0, (PropertyMetadata) null);
      Class<Annotation> class2 = Annotation.class;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      creatorProperty0.getAnnotation(class2);
      try { 
        creatorProperty0.set(objectIdGenerators_UUIDGenerator0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, mapType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "h", false, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap1, (AnnotatedParameter) null, 4834, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.setFallbackSetter(creatorProperty3);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty2.getAnnotation(class1);
      IntNode.valueOf(4834);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        creatorProperty1.set(classNameIdResolver0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      valueInstantiator_Base0.getDelegateCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class1 = Annotation.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class2, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 2174);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, (-1988), annotatedParameter0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1988), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-17), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<JsonParser.Feature> jsonDeserializer0 = (JsonDeserializer<JsonParser.Feature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-17), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl1, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2174, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      creatorProperty1.getCreatorIndex();
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, simpleType0, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-2082));
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, "$pj(!*", true, javaType0);
      Class<String> class0 = String.class;
      classNameIdResolver0.idFromValueAndType(fileSystemHandling0, class0);
      Class<String> class1 = String.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class2 = Annotation.class;
      annotationMap0.get(class2);
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class1, (Annotation) null, class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-3733), classNameIdResolver0, (PropertyMetadata) null);
      Class<IntNode>[] classArray0 = (Class<IntNode>[]) Array.newInstance(Class.class, 0);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      annotationMap0.toString();
      JsonDeserializer<IntNode> jsonDeserializer0 = (JsonDeserializer<IntNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<IntNode> jsonDeserializer1 = (JsonDeserializer<IntNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals((-3733), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      assertEquals(455, creatorProperty0.getCreatorIndex());
      
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals(455, creatorProperty0.getCreatorIndex());
      
      creatorProperty0.getValueDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(455, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      PropertyName propertyName1 = new PropertyName(":qFLQHR,~.'", ":qFLQHR,~.'");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName1, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1075, propertyName1, (PropertyMetadata) null);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertEquals(1075, creatorProperty2.getCreatorIndex());
      
      Object object0 = new Object();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 65599, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      Object object0 = new Object();
      Object object1 = new Object();
      Class<InputStream> class1 = InputStream.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class1, (Annotation) null, class0, (Annotation) null);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1104);
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(object0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 1104, integer0, (PropertyMetadata) null);
      assertEquals(1104, creatorProperty0.getCreatorIndex());
      
      Object object2 = new Object();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, simpleType1, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 0, valueInstantiator_Base0, (PropertyMetadata) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonDeserializer<IntNode> jsonDeserializer0 = (JsonDeserializer<IntNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty3.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withTypeHandler("");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1075, beanProperty_Bogus0, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      creatorProperty0.toString();
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(1075, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[creator property, name '");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler("[creator property, name '");
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      SimpleType simpleType2 = simpleType1.withStaticTyping();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType2, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2034, (Object) null, (PropertyMetadata) null);
      TypeFactory.defaultInstance();
      Object object1 = new Object();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      Object object2 = new Object();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(2034, settableBeanProperty0.getCreatorIndex());
      
      creatorProperty0.getInjectableValueId();
      assertNotSame(creatorProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      Integer integer0 = new Integer((-1437));
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer0);
      Boolean boolean0 = Boolean.TRUE;
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1536, (Object) null, propertyMetadata3);
      Object object3 = new Object();
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(1536, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      simpleType0.containedTypeOrUnknown(1104);
      Object object0 = new Object();
      Object object1 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1104, simpleType0, (PropertyMetadata) null);
      Object object2 = new Object();
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis((-1710L));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '{';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        settableBeanProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("[creator property, name '");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withTypeHandler("[creator property, name '");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      JavaType javaType0 = simpleType0.containedTypeOrUnknown(2034);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      TypeFactory.defaultInstance();
      Object object1 = new Object();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      Object object2 = new Object();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl2, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '[creator property, name '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      SimpleType simpleType2 = simpleType1.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType2;
      javaTypeArray0[3] = (JavaType) simpleType1;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      simpleType1.containedTypeOrUnknown(455);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType2, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 35, (Object) null, (PropertyMetadata) null);
      TypeFactory.defaultInstance();
      TypeFactory.rawClass(simpleType1);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType1;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType1);
      valueInstantiator_Base0.getIncompleteParameter();
      simpleType1.containedTypeOrUnknown(452);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[3], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 452, simpleType1, (PropertyMetadata) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory.rawClass(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[3], typeFactory0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[2], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 452, classNameIdResolver0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.withNullProvider((NullValueProvider) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType1;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      JavaType javaType0 = simpleType1.containedTypeOrUnknown(452);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[3], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 452, simpleType1, (PropertyMetadata) null);
      TypeFactory.defaultInstance();
      TypeFactory.rawClass(class1);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty1.getAnnotation(class2);
      // Undeclared exception!
      try { 
        creatorProperty1.findInjectableValue((DeserializationContext) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType1;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      simpleType1.containedTypeOrUnknown(452);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[3], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 452, simpleType1, (PropertyMetadata) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory.rawClass(class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[3], typeFactory0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, javaTypeArray0[2], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 452, classNameIdResolver0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, simpleType0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType1, (TypeBindings) null);
      arrayType0.getBindings();
      simpleType1.withStaticTyping();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, simpleType0, jsonTypeInfo_As0);
      simpleType0.isThrowable();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer1, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      creatorProperty0.isIgnorable();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType2;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      simpleType2.containedTypeOrUnknown(455);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[3], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, simpleType1, (PropertyMetadata) null);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id '[simple type, class com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator]']", string0);
      assertEquals(455, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      simpleType3.containedTypeOrUnknown(455);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[3], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, simpleType1, (PropertyMetadata) null);
      PropertyName propertyName1 = PropertyName.NO_NAME;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(455, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      simpleType2.getGenericSignature(stringBuilder1);
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[3], propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, simpleType1, (PropertyMetadata) null);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNotNull(object0);
      assertEquals(455, creatorProperty0.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(455, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType1, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      simpleType1.withStaticTyping();
      typeBindings0.findBoundType("");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, simpleType0, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base1.getIncompleteParameter();
      int int0 = 455;
      Object object0 = new Object();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType1, propertyName0, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-340), jsonParser_Feature0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      try { 
        creatorProperty1.setAndReturn(creatorProperty0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[27];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType1;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "", false, simpleType2);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      Class<Integer> class1 = Integer.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType1, propertyName0, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, (Object) null, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      Class<Annotation> class3 = Annotation.class;
      creatorProperty0.getAnnotation(class3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl0, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType1;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaTypeArray0[3], (TypeIdResolver) null, "", false, javaTypeArray0[1]);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType2);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      valueInstantiator_Base0.getIncompleteParameter();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType1, typeFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, classNameIdResolver0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "']");
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      // Undeclared exception!
      try { 
        creatorProperty1.inject(deserializationContext0, objectMapper_DefaultTyping0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[16];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType1;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, (JavaType) null, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Class<String> class2 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation1 = new AnnotationCollector.OneAnnotation(class2, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType3);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1391, javaTypeArray0[0], (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("~v)0+GxLU%X2:Gm");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(tokenBuffer0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getSchema();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1391, stringReader0, objectReader0, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl1, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[16];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType1;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, (JavaType) null, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaTypeArray0[2]);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaTypeArray0[1], propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, (Object) null, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getMember();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.isIgnorable());
      
      settableBeanProperty0.withName(propertyName0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName1);
      assertTrue(creatorProperty0.isIgnorable());
      assertEquals(455, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CreatorProperty creatorProperty0 = null;
      String string0 = "";
      PropertyName propertyName0 = PropertyName.construct("");
      PropertyName propertyName1 = propertyName0.withNamespace("~B^h[`+wh1");
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(455, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[16];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType1;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, (JavaType) null, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaTypeArray0[2]);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaTypeArray0[1], propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, (Object) null, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.getMember();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals(455, settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonDeserializer<String> jsonDeserializer0 = null;
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      try { 
        creatorProperty0.setAndReturn((Object) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[16];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType1;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      arrayType0.isReferenceType();
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType2);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      try { 
        creatorProperty0.set(beanProperty_Bogus0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 13, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(13, settableBeanProperty0.getCreatorIndex());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      simpleType0.isTypeOrSubTypeOf(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class2 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      creatorProperty0.getMember();
      assertEquals(455, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, typeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 455, object0, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        creatorProperty0.inject(defaultDeserializationContext_Impl1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(propertyName0);
      SimpleType simpleType2 = simpleType1.withValueHandler(propertyName0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType2, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType1;
      javaTypeArray0[1] = (JavaType) simpleType2;
      SimpleType simpleType3 = simpleType2.withStaticTyping();
      javaTypeArray0[2] = (JavaType) simpleType3;
      javaTypeArray0[3] = (JavaType) simpleType2;
      simpleType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, javaTypeArray0[0], jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      asPropertyTypeDeserializer1.forProperty(beanProperty_Bogus0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Class<Object> class1 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 45, simpleType1, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      assertTrue(creatorProperty0.isIgnorable());
  }
}
