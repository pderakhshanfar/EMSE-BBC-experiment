/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:13:43 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.time.DayOfWeek;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.zone.ZoneRulesException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CreatorProperty_ESTest extends CreatorProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3962, (Object) null, propertyMetadata0);
      creatorProperty0._propertyIndex = 0;
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      try { 
        creatorProperty0.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withName(propertyName0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator1 = new ObjectIdGenerators.StringIdGenerator();
      try { 
        creatorProperty0.set((Object) null, objectIdGenerators_StringIdGenerator1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2289), annotationCollector_OneAnnotation0, propertyMetadata0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      creatorProperty1.assignIndex(471);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals((-2289), settableBeanProperty0.getCreatorIndex());
      
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals((-2289), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      Class<NamedType>[] classArray0 = (Class<NamedType>[]) Array.newInstance(Class.class, 7);
      Class<NamedType> class3 = NamedType.class;
      classArray0[0] = class3;
      Class<NamedType> class4 = NamedType.class;
      classArray0[1] = class4;
      Class<NamedType> class5 = NamedType.class;
      classArray0[2] = class5;
      Class<NamedType> class6 = NamedType.class;
      classArray0[3] = class6;
      Class<NamedType> class7 = NamedType.class;
      classArray0[4] = class7;
      Class<NamedType> class8 = NamedType.class;
      classArray0[5] = class8;
      Class<NamedType> class9 = NamedType.class;
      classArray0[6] = class9;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      
      String string0 = settableBeanProperty0.toString();
      assertEquals("[creator property, name 'oskJJ''; inject id 'oskJJ'']", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1266, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotatedParameter annotatedParameter0 = null;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-9), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-9), (Object) null, propertyMetadata0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      JsonParser jsonParser0 = null;
      DeserializationContext deserializationContext0 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-9), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(243);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-9), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2859), (Object) null, propertyMetadata0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      creatorProperty0.markAsIgnorable();
      Class<PropertyName> class0 = PropertyName.class;
      FromStringDeserializer.findDeserializer(class0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaTypeArray0[0], (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertEquals(0, creatorProperty2.getCreatorIndex());
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
      
      creatorProperty2.withName(propertyName0);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2172), propertyName0, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.assignIndex(2840);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.toString();
      System.setCurrentTimeMillis((-2273L));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Integer integer0 = new Integer(0);
      propertyMetadata0.withIndex(integer0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-819), class0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("Still have %d undecoded bytes, should not call 'feedInput'");
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      try { 
        creatorProperty0.setAndReturn(annotationCollector_OneAnnotation0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'Still have %d undecoded bytes, should not call 'feedInput''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 224, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("Gno00^xJfB|2+C");
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      try { 
        creatorProperty0.setAndReturn((Object) null, propertyMetadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'Gno00^xJfB|2+C'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "^", true, referenceType0, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, resolvedRecursiveType0, (PropertyMetadata) null);
      creatorProperty0._ignorable = true;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.setFallbackSetter(settableBeanProperty0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      creatorProperty0.withName(propertyName0);
      try { 
        creatorProperty1.set(objectIdGenerators_StringIdGenerator0, settableBeanProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[creator property, name '");
      PropertyName propertyName0 = new PropertyName("[creator property, name '");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-801));
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "[creator property, name '", true, placeholderForType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, (-131072));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-801), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      propertyName0.withSimpleName("[creator property, name '");
      propertyName0.internSimpleName();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.getMember();
      String string0 = creatorProperty2.toString();
      assertEquals("[creator property, name '[creator property, name ''; inject id '[creator property, name '']", string0);
      
      AnnotatedMember annotatedMember0 = creatorProperty2.getMember();
      assertEquals((-801), creatorProperty2.getCreatorIndex());
      assertNotNull(annotatedMember0);
      
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals((-801), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2289), (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      Object object0 = new Object();
      try { 
        creatorProperty0.findInjectableValue(defaultDeserializationContext_Impl1, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property '' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Annotation> class1 = Annotation.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDelegateCreator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, (TypeResolutionContext) null, annotationMap1, (-1));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, annotatedParameter0, (-1), beanSerializerBuilder0, propertyMetadata1);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      assertEquals((-1), creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[creator property, name '");
      PropertyName propertyName0 = new PropertyName("[creator property, name '");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-801));
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "[creator property, name '", true, placeholderForType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, (-131072));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-801), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      propertyName0.withSimpleName("[creator property, name '");
      propertyName0.internSimpleName();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      assertEquals((-801), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = new PropertyName("No fallback setter/field defined for creator property '");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3222), (Object) null, propertyMetadata0);
      Class<String> class1 = String.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty1 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-3222), simpleObjectIdResolver0, propertyMetadata0);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.withNullProvider((NullValueProvider) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, deserializationContext0, "No fallback setter/field defined for creator property '");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2636, objectIdGenerators_StringIdGenerator0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 510, (Object) null, propertyMetadata1);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializationContext deserializationContext0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet(jsonParserDelegate0, (DeserializationContext) null, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3), propertyMetadata0, propertyMetadata0);
      Class<InputStream>[] classArray0 = (Class<InputStream>[]) Array.newInstance(Class.class, 7);
      Class<InputStream> class1 = InputStream.class;
      classArray0[0] = class1;
      Class<InputStream> class2 = InputStream.class;
      classArray0[1] = class2;
      Class<InputStream> class3 = InputStream.class;
      classArray0[2] = class3;
      Class<InputStream> class4 = InputStream.class;
      classArray0[3] = class4;
      Class<InputStream> class5 = InputStream.class;
      classArray0[4] = class5;
      Class<InputStream> class6 = InputStream.class;
      classArray0[5] = class6;
      Class<InputStream> class7 = InputStream.class;
      classArray0[6] = class7;
      creatorProperty0.setViews(classArray0);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-3), settableBeanProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      TypeFactory.defaultInstance();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2289), "vq}e}$Hyt/", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.withName((PropertyName) null);
      assertEquals((-2289), creatorProperty2.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2289), annotationCollector_OneAnnotation0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      creatorProperty0.isIgnorable();
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2289), annotationCollector_OneAnnotation0, propertyMetadata0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals((-2289), settableBeanProperty0.getCreatorIndex());
      
      int int0 = creatorProperty1.getCreatorIndex();
      assertEquals((-2289), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2289), annotationCollector_OneAnnotation0, propertyMetadata0);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withName(propertyName0);
      assertEquals((-2289), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "oskJJ'", true, referenceType0, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4986, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      javaType0.equals((Object) null);
      creatorProperty0.toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty1.getAnnotation(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        creatorProperty1.inject(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Property 'oskJJ'' (type com.fasterxml.jackson.databind.deser.CreatorProperty) has no injectable value id configured
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "oskJJ'", true, referenceType0, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4986, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.toString();
      CreatorProperty creatorProperty1 = null;
      try {
        creatorProperty1 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "^", true, referenceType0, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, resolvedRecursiveType0, (PropertyMetadata) null);
      creatorProperty0._ignorable = true;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      try { 
        creatorProperty1.set(objectIdGenerators_StringIdGenerator0, settableBeanProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "^", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("O&i");
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, creatorProperty1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaTypeArray0[0], (TypeIdResolver) null, "^", true, referenceType0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-14), dayOfWeek0, (PropertyMetadata) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("^");
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "^", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      valueInstantiator_Base0.getIncompleteParameter();
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base1.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, asPropertyTypeDeserializer0, propertyMetadata0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty0.getAnnotation(class2);
      NullValueProvider nullValueProvider0 = null;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      Nulls nulls0 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata1);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      try { 
        creatorProperty0.set(asPropertyTypeDeserializer0, resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      propertyName0.withNamespace((String) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1978), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      Boolean boolean0 = Boolean.TRUE;
      propertyMetadata0.withRequired(boolean0);
      Class<Annotation> class2 = Annotation.class;
      creatorProperty2.getAnnotation(class2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      try { 
        creatorProperty0.set(bigIntegerNode0, propertyMetadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, resolvedRecursiveType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<DayOfWeek> class1 = DayOfWeek.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, asPropertyTypeDeserializer0, (PropertyMetadata) null);
      creatorProperty0.withName(propertyName0);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, "oskJJ'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, resolvedRecursiveType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<DayOfWeek> class1 = DayOfWeek.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, resolvedRecursiveType0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ZoneId.of("com.fasterxml.jackson.databind.deser.CreatorProperty");
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: com.fasterxml.jackson.databind.deser.CreatorProperty
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      mapType0.withTypeHandler(bigIntegerNode0);
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.withName((PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, settableBeanProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("host-name");
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<BigIntegerNode>[] classArray0 = (Class<BigIntegerNode>[]) Array.newInstance(Class.class, 9);
      Class<BigIntegerNode> class2 = BigIntegerNode.class;
      classArray0[0] = class2;
      Class<BigIntegerNode> class3 = BigIntegerNode.class;
      classArray0[1] = class3;
      Class<BigIntegerNode> class4 = BigIntegerNode.class;
      classArray0[2] = class4;
      Class<BigIntegerNode> class5 = BigIntegerNode.class;
      classArray0[3] = class5;
      Class<BigIntegerNode> class6 = BigIntegerNode.class;
      classArray0[4] = class6;
      Class<BigIntegerNode> class7 = BigIntegerNode.class;
      classArray0[5] = class7;
      Class<BigIntegerNode> class8 = BigIntegerNode.class;
      classArray0[6] = class8;
      Class<BigIntegerNode> class9 = BigIntegerNode.class;
      classArray0[7] = class9;
      Class<BigIntegerNode> class10 = BigIntegerNode.class;
      classArray0[8] = class10;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<JavaType> jsonDeserializer1 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode.valueOf(bigInteger0);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3109, class0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      int int0 = creatorProperty2.getCreatorIndex();
      assertEquals(3109, int0);
      
      String string0 = creatorProperty1.toString();
      assertEquals("[creator property, name 'oskJJ''; inject id 'class com.fasterxml.jackson.databind.type.ReferenceType']", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      mapType0.withTypeHandler(bigIntegerNode0);
      mapType0.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName0, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 28, valueInstantiator_Base0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      SettableBeanProperty settableBeanProperty1 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(28, creatorProperty1.getCreatorIndex());
      assertNotSame(settableBeanProperty1, creatorProperty1);
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      creatorProperty0.toString();
      assertEquals(28, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("host-name");
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      JsonDeserializer<JavaType> jsonDeserializer1 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      NullValueProvider nullValueProvider0 = null;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getAnnotation(class2);
      // Undeclared exception!
      try { 
        creatorProperty1.set((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      mapType0.withTypeHandler(bigIntegerNode0);
      mapType0.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName0, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 28, valueInstantiator_Base0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals(28, creatorProperty1.getCreatorIndex());
      
      creatorProperty0.fixAccess((DeserializationConfig) null);
      assertEquals(28, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("host-name");
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertEquals("host-name", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      settableBeanProperty0.withName(propertyName0);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      // Undeclared exception!
      try { 
        creatorProperty0.inject((DeserializationContext) null, mapLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 519, propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      DayOfWeek dayOfWeek1 = dayOfWeek0.plus(0);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn((Object) null, dayOfWeek1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "", false, resolvedRecursiveType0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      Class<InputStream> class2 = InputStream.class;
      ValueInstantiator.Base valueInstantiator_Base1 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper0);
      JsonParser jsonParser0 = jsonFactory4.createParser((char[]) null, 0, 0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      Object object0 = new Object();
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser1, (DeserializationContext) null, jsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      assertEquals(0, creatorProperty0.getCreatorIndex());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      mapType1.withStaticTyping();
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = 'Y';
      charArray0[2] = '{';
      charArray0[3] = '<';
      charArray0[4] = 'O';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, (-1774));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      Object object0 = new Object();
      try { 
        settableBeanProperty1.deserializeSetAndReturn(jsonParser1, (DeserializationContext) null, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'oskJJ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      javaType0.isTypeOrSubTypeOf(class0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, (NullValueProvider) null);
      JsonDeserializer<ReferenceType> jsonDeserializer1 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class1 = Integer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = arrayType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = javaType0.getErasedSignature(stringBuilder1);
      javaType0.getErasedSignature(stringBuilder2);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class2);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class3 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class2);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.setFallbackSetter(settableBeanProperty0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name 'oskJJ''; inject id 'oskJJ'']", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType2, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 28, valueInstantiator_Base0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals(28, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 738, propertyName0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0._valueDeserializer;
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "oskJJ'", true, referenceType0, jsonTypeInfo_As0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4986, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.getName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.markAsIgnorable();
      assertTrue(creatorProperty1.isIgnorable());
      
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals(4986, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector1.findRootName((AnnotatedClass) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeDeserializer typeDeserializer0 = null;
      int int0 = (-2764);
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator");
      Integer integer0 = Integer.getInteger("`7}$^3g", 91);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Property '%s' (type %s) has no injectable value id configured", integer0, "");
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2764), "Wv6rE", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      IntNode intNode0 = IntNode.valueOf((-1159));
      BigInteger bigInteger0 = intNode0.bigIntegerValue();
      BigIntegerNode.valueOf(bigInteger0);
      creatorProperty1.markAsIgnorable();
      Class<JavaType> class0 = JavaType.class;
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, javaType0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      mapType0.isReferenceType();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getMember();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector1.findRootName((AnnotatedClass) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator");
      Integer integer0 = Integer.getInteger("`7}$^3g", 91);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Property '%s' (type %s) has no injectable value id configured", integer0, "");
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata2);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.isIgnorable();
      creatorProperty1.getInjectableValueId();
      assertEquals(0, creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      TypeBindings typeBindings0 = null;
      Class<Annotation> class0 = Annotation.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "<rEez0", true, resolvedRecursiveType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2824, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.toString();
      propertyName0.withNamespace("oskJJ'");
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("host-name");
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      TypeIdResolver typeIdResolver0 = null;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, referenceType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.getInjectableValueId();
      creatorProperty0.toString();
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, dayOfWeek0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      try { 
        settableBeanProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'oskJJ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector1.findRootName((AnnotatedClass) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator");
      Integer integer0 = Integer.getInteger("`7}$^3g", 91);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Property '%s' (type %s) has no injectable value id configured", integer0, "");
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2764), "Wv6rE", propertyMetadata1);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      dayOfWeek0.minus(91);
      Object object0 = new Object();
      try { 
        creatorProperty0.setAndReturn("", object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      AnnotatedMember annotatedMember0 = null;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      NullValueProvider nullValueProvider0 = null;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Std0.getAnnotation(class3);
      Object object0 = new Object();
      try { 
        settableBeanProperty0.setAndReturn(javaType0, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'oskJJ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(0, settableBeanProperty0.getCreatorIndex());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name 'oskJJ''; inject id 'oskJJ'']", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      Integer integer0 = new Integer(0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, integer0, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      creatorProperty0.toString();
      BigIntegerNode bigIntegerNode1 = BigIntegerNode.valueOf(bigInteger1);
      // Undeclared exception!
      try { 
        creatorProperty0.findInjectableValue((DeserializationContext) null, bigIntegerNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.CreatorProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("host-name");
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      JavaType javaType0 = referenceType0.refine(class0, (TypeBindings) null, resolvedRecursiveType0, javaTypeArray0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, referenceType0, jsonTypeInfo_As0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getIncompleteParameter();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, dayOfWeek0, (PropertyMetadata) null);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getInjectableValueId();
      assertEquals(0, creatorProperty1.getCreatorIndex());
      
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name 'host-name'; inject id 'TUESDAY']", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      creatorProperty0.getMember();
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector1.findRootName((AnnotatedClass) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator");
      Integer integer0 = Integer.getInteger("`7}$^3g", 91);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Property '%s' (type %s) has no injectable value id configured", integer0, "");
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2764), "Wv6rE", propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.isIgnorable();
      assertEquals((-2764), creatorProperty1.getCreatorIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("oskJJ'");
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      BigInteger bigInteger0 = BigInteger.TEN;
      propertyName0.internSimpleName();
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      MapType mapType1 = mapType0.withTypeHandler(bigIntegerNode0);
      MapType mapType2 = mapType1.withValueHandler(mapType0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      bigInteger0.nextProbablePrime();
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class2);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, "oskJJ'", (PropertyMetadata) null);
      creatorProperty0.getAnnotation(class1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals(0, settableBeanProperty1.getCreatorIndex());
      
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      settableBeanProperty0.isIgnorable();
      assertEquals(0, creatorProperty0.getCreatorIndex());
  }
}
