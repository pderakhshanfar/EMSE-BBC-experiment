/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 08:53:13 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.io.File;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectIdReferenceProperty_ESTest extends ObjectIdReferenceProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yPP]V*ujW", false, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(8);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 8, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 9);
      objectIdReferenceProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, objectIdReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yRP]VMuj]");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yRP]VMuj]", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-16));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-16), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.assignIndex(0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yPP]V*ujW", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(8);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 8, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(917);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2443), (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withNullProvider((NullValueProvider) null);
      assertFalse(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yRP]VMuj]");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yRP]VMuj]", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-16));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-16), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.assignIndex(0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertNotSame(objectIdReferenceProperty0, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yPP]V*ujW", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(8);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 8, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(917);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertEquals("yPP]V*ujW", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "EZQUzeM*Y~\\u2'<?";
      PropertyName propertyName0 = new PropertyName(string0);
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-2292));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), integer0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class2, class3);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<BigIntegerNode>[] classArray0 = (Class<BigIntegerNode>[]) Array.newInstance(Class.class, 5);
      objectIdReferenceProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yRP]VMuj]");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yRP]VMuj]", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-16));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-16), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<MinimalClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<MinimalClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yRP]VMuj]");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yRP]VMuj]", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-16));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-16), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.assignIndex(0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2505, annotationMap0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(2505);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertFalse(settableBeanProperty0.equals((Object)objectIdReferenceProperty0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("ywPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "ywPP]V*ujW", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(12);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 12, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "cO?|n|8yyI)r", true, simpleType0, jsonTypeInfo_As0);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), (Object) null, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals((-2292), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 798, (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.set(propertyName0, objectReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2443), (Object) null, propertyMetadata0);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, objectIdInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPPdV*u", "yPPdV*u");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "=t", false, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-2292));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParserDelegate0, defaultDeserializationContext_Impl0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yPP]V*ujW", false, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleModule simpleModule0 = new SimpleModule("yPP]V*ujW", (Version) null);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, simpleModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-2292));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty");
      File file0 = MockFile.createTempFile("yPP]V*ujW", "JSON", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((ObjectIdReferenceProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((ObjectIdReferenceProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((SettableBeanProperty) null, (ObjectIdInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-2292));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), integer0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class2, class3);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        objectIdReferenceProperty0.set(objectIdGenerators_IntSequenceGenerator0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'yPP]V*ujW'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2443), (Object) null, propertyMetadata0);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      assertFalse(objectIdReferenceProperty1.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW", "yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "=t", false, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-2292));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, creatorProperty0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey", jsonLocation0, readableObjectId0);
      ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring(objectIdReferenceProperty0, unresolvedForwardReference0, objectIdGenerator_IdKey0.scope, (Object) null);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(objectIdReferenceProperty0, unresolvedForwardReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to resolve a forward reference with id [[property 'yPP]V*ujW']] that wasn't previously seen as unresolved.
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty$PropertyReferring", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2443), (Object) null, propertyMetadata0);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.fixAccess((DeserializationConfig) null);
      assertEquals("", objectIdReferenceProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2443), (Object) null, propertyMetadata0);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 100);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, coreXMLDeserializers_Std0, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withValueDeserializer(coreXMLDeserializers_Std0);
      assertSame(settableBeanProperty0, objectIdReferenceProperty1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-2292));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2292), integer0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class2, class3);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Annotation annotation0 = objectIdReferenceProperty0.getAnnotation(class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yPP]V*ujW", false, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      try { 
        objectIdReferenceProperty0.setAndReturn((Object) null, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'yPP]V*ujW'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yPP]V*ujW");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yPP]V*ujW", false, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-23), (Object) null, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.TYPE;
      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("yRP]VMuj]");
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "yRP]VMuj]", true, simpleType0, jsonTypeInfo_As0);
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-16));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-16), integer0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      AnnotatedMember annotatedMember0 = objectIdReferenceProperty0.getMember();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1603), propertyName0, (PropertyMetadata) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, objectIdGenerators_IntSequenceGenerator0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      JsonLocation jsonLocation0 = new JsonLocation(objectIdGenerators_IntSequenceGenerator0, (-1603), (-1603), 3);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "", jsonLocation0, readableObjectId0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring(objectIdReferenceProperty0, unresolvedForwardReference0, class1, "");
      try { 
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(objectIdGenerators_IntSequenceGenerator0, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }
}
