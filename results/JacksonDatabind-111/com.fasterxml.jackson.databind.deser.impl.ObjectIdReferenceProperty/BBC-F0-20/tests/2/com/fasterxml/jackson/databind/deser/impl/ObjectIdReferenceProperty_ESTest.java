/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:13:44 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.temporal.ChronoUnit;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectIdReferenceProperty_ESTest extends ObjectIdReferenceProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1789), (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, class0, propertyMetadata0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      creatorProperty0.setViews(classArray0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, objectIdReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "5p-L'x/Y!K/+lkQN", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "5p-L'x/Y!K/+lkQN", propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, class0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(29);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, objectIdReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "01", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertFalse(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 29, typeFactory0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertNull(settableBeanProperty0.getManagedReferenceName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      PropertyName propertyName0 = new PropertyName("01", "01");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "01", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 0, chronoUnit0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, class0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(29);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, class0, propertyMetadata0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      creatorProperty0.setViews(classArray0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertFalse(settableBeanProperty0.isRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1789), (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withName(propertyName0);
      assertFalse(settableBeanProperty0.isVirtual());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ChronoUnit> class0 = ChronoUnit.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.assignIndex(1);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withName(propertyName0);
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      Class<ShortNode> class2 = ShortNode.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      AnnotatedMember annotatedMember0 = objectIdReferenceProperty0.getMember();
      assertEquals("", annotatedMember0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      Class<ShortNode> class2 = ShortNode.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, (-30));
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-30), chronoUnit0, propertyMetadata0);
      Class<ShortNode> class2 = ShortNode.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals((-30), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.setAndReturn((Object) null, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      Class<ShortNode> class2 = ShortNode.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.set(simpleType0, bufferRecycler0.CHAR_CONCAT_BUFFER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, class0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn((JsonParser) null, deserializationContext0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, "", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, (Object) null, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Integer integer0 = Integer.getInteger("JSON", 29);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParserDelegate0, defaultDeserializationContext_Impl0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "5p-L'x/Y!K/+lkQN", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "5p-L'x/Y!K/+lkQN", propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "01", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      PipedReader pipedReader0 = new PipedReader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, asPropertyTypeDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((ObjectIdReferenceProperty) null, (PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonDeserializer<ObjectIdGenerators.UUIDGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.UUIDGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((ObjectIdReferenceProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = null;
      try {
        objectIdReferenceProperty0 = new ObjectIdReferenceProperty((SettableBeanProperty) null, (ObjectIdInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      try { 
        objectIdReferenceProperty0.setAndReturn((Object) null, chronoUnit0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonLocation jsonLocation0 = jsonParserSequence0.getCurrentLocation();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0, simpleObjectIdResolver0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, (String) null, jsonLocation0, readableObjectId0);
      Class<String> class0 = String.class;
      ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring((ObjectIdReferenceProperty) null, unresolvedForwardReference0, class0, class0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(simpleObjectIdResolver0, unresolvedForwardReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to resolve a forward reference with id [com.fasterxml.jackson.annotation.SimpleObjectIdResolver@1c] that wasn't previously seen as unresolved.
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty$PropertyReferring", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonLocation jsonLocation0 = jsonParser0.getTokenLocation();
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, simpleObjectIdResolver0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON", jsonLocation0, readableObjectId0);
      ObjectIdReferenceProperty.PropertyReferring objectIdReferenceProperty_PropertyReferring0 = new ObjectIdReferenceProperty.PropertyReferring((ObjectIdReferenceProperty) null, unresolvedForwardReference0, objectIdGenerator_IdKey0.scope, class0);
      PropertyName propertyName0 = new PropertyName("", "");
      // Undeclared exception!
      try { 
        objectIdReferenceProperty_PropertyReferring0.handleResolvedForwardReference(simpleObjectIdResolver0, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty$PropertyReferring", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-4221), propertyMetadata0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.fixAccess((DeserializationConfig) null);
      assertFalse(objectIdReferenceProperty0.isRequired());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1010, propertyMetadata0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<BasicBeanDescription> jsonDeserializer0 = (JsonDeserializer<BasicBeanDescription>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, propertyName0);
      JsonDeserializer<Object> jsonDeserializer1 = objectIdReferenceProperty2.getValueDeserializer();
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty1.withValueDeserializer(jsonDeserializer1);
      assertSame(settableBeanProperty0, objectIdReferenceProperty1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("");
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      Class<ShortNode> class2 = ShortNode.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = objectIdReferenceProperty0.getAnnotation(class3);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "01", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      PipedReader pipedReader0 = new PipedReader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      try { 
        objectIdReferenceProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapType0, typeResolutionContext_Basic0, annotationMap0, 1);
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1, chronoUnit0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      try { 
        objectIdReferenceProperty0.set(annotatedParameter0, annotationMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[10];
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "[Propert '", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, simpleType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      int int0 = objectIdReferenceProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-4221), propertyMetadata0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedReader pipedReader0 = new PipedReader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, bufferRecycler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[1], propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 29, class0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      AnnotatedMember annotatedMember0 = objectIdReferenceProperty0.getMember();
      assertNull(annotatedMember0);
  }
}
