/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:09:09 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.impl.SetterlessProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SetterlessProperty_ESTest extends SetterlessProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Module> class1 = Module.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaTypeArray0[2], javaTypeArray0, javaTypeArray0[2]);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(referenceType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class2 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) collectionType0, (JavaType) referenceType0);
      SetterlessProperty setterlessProperty0 = null;
      try {
        setterlessProperty0 = new SetterlessProperty((BeanPropertyDefinition) null, mapType0, (TypeDeserializer) null, (Annotations) null, (AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonDeserializer<JsonDeserializer<JavaType>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<JavaType>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SetterlessProperty setterlessProperty0 = null;
      try {
        setterlessProperty0 = new SetterlessProperty((SetterlessProperty) null, jsonDeserializer0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SetterlessProperty setterlessProperty0 = null;
      try {
        setterlessProperty0 = new SetterlessProperty((SetterlessProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(typeBindings0);
      assertNotNull(objectReader0);
  }
}
