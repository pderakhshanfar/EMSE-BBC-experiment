/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:45:18 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectIdValueProperty_ESTest extends ObjectIdValueProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1798));
      PropertyName propertyName0 = new PropertyName((String) null);
      ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(simpleObjectIdResolver0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.annotation.ObjectIdResolver.class));
      doReturn(simpleObjectIdResolver0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver1);
      propertyName0.withSimpleName("u'`NbGp2rP:&^s");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, objectIdReader0.propertyName);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      objectIdValueProperty1.deserializeWith(jsonParserDelegate0, defaultDeserializationContext0, "");
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, jsonDeserializer1, jsonDeserializer1);
      objectIdValueProperty2.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty2.withName(objectIdReader0.propertyName);
      JsonDeserializer<PlaceholderForType> jsonDeserializer2 = (JsonDeserializer<PlaceholderForType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withValueDeserializer(jsonDeserializer2);
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty0.assignIndex(0);
      Random.setNextRandom(0);
      objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      ObjectIdGenerator<PlaceholderForType> objectIdGenerator0 = (ObjectIdGenerator<PlaceholderForType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, classNameIdResolver0, "", true, collectionType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, beanProperty_Bogus0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer1, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(jsonDeserializer0);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(collectionType0, propertyName0, objectIdGenerator0, jsonDeserializer0, settableBeanProperty0, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      try { 
        objectIdValueProperty0.setAndReturn(class0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      objectIdValueProperty0.assignIndex(1486);
      objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      objectIdValueProperty0.withName(propertyName0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withName(objectIdReader0.propertyName);
      assertFalse(settableBeanProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdGenerator<PropertyName> objectIdGenerator0 = (ObjectIdGenerator<PropertyName>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, ")", false, (JavaType) null);
      Class<Annotation> class0 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(1486);
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(1486);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct(boolean0, "W,U'Tk6Ala@e V/F", integer0, ")");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1486, placeholderForType1, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(")");
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, settableBeanProperty0, objectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      beanProperty_Std0.getContextAnnotation(class1);
      try { 
        objectIdValueProperty0.set((Object) null, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1798));
      PropertyName propertyName0 = new PropertyName("LKUJofsO\"v%kRq+", "");
      ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.annotation.ObjectIdResolver.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, objectIdReader0.propertyName);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      objectIdValueProperty1.deserializeWith(jsonParserDelegate0, defaultDeserializationContext0, "");
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, jsonDeserializer1, jsonDeserializer1);
      objectIdValueProperty2.assignIndex(0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty2.withName(objectIdReader0.propertyName);
      assertFalse(settableBeanProperty0.equals((Object)objectIdValueProperty2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerator<ObjectMapper.DefaultTyping> objectIdGenerator0 = (ObjectIdGenerator<ObjectMapper.DefaultTyping>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty0.assignIndex(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
      assertNotSame(settableBeanProperty0, objectIdValueProperty0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdGenerator<SettableBeanProperty> objectIdGenerator0 = (ObjectIdGenerator<SettableBeanProperty>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.AS_EMPTY;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls1);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      Class<JsonDeserializer<Class<DecimalNode>>>[] classArray0 = (Class<JsonDeserializer<Class<DecimalNode>>>[]) Array.newInstance(Class.class, 0);
      objectIdValueProperty0.setViews(classArray0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      ObjectIdReader.construct((JavaType) null, objectIdReader0.propertyName, objectIdGenerator0, (JsonDeserializer<?>) null, settableBeanProperty0, simpleObjectIdResolver1);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      assertFalse(objectIdValueProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(69);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerator<PropertyName> objectIdGenerator0 = (ObjectIdGenerator<PropertyName>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty0.assignIndex(69);
      objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(69);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerator<DecimalNode> objectIdGenerator0 = null;
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      ObjectIdValueProperty objectIdValueProperty1 = null;
      try {
        objectIdValueProperty1 = new ObjectIdValueProperty((ObjectIdValueProperty) null, (JsonDeserializer<?>) null, (NullValueProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(54);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, objectIdReader0.propertyName);
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("i^Fs5/c`");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      ObjectIdValueProperty objectIdValueProperty3 = new ObjectIdValueProperty(objectIdValueProperty0, objectIdReader0.propertyName);
      try { 
        objectIdValueProperty2.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, objectIdValueProperty3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<Object> objectIdGenerator0 = (ObjectIdGenerator<Object>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonDeserializer<PropertyName> jsonDeserializer1 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader1 = ObjectIdReader.construct(placeholderForType0, (PropertyName) null, objectIdReader0.generator, jsonDeserializer1, (SettableBeanProperty) null, objectIdReader0.resolver);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer2 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<DecimalNode>[] classArray0 = (Class<DecimalNode>[]) Array.newInstance(Class.class, 2);
      Class<DecimalNode> class0 = DecimalNode.class;
      classArray0[0] = class0;
      Class<DecimalNode> class1 = DecimalNode.class;
      classArray0[1] = class1;
      objectIdValueProperty0.setViews(classArray0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, jsonDeserializer2, jsonDeserializer2);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty1.withName((PropertyName) null);
      assertNotSame(objectIdValueProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<Annotation> class0 = Annotation.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, beanProperty_Bogus0);
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'j';
      charArray0[3] = '4';
      charArray0[4] = '\"';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      // Undeclared exception!
      try { 
        objectIdValueProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext0, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<SettableBeanProperty> objectIdGenerator0 = (ObjectIdGenerator<SettableBeanProperty>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<List<PropertyName>> objectIdGenerator1 = (ObjectIdGenerator<List<PropertyName>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerator1, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(0);
      Integer.getInteger("", integer0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      ObjectIdReader objectIdReader1 = new ObjectIdReader(placeholderForType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, settableBeanProperty0, objectIdReader0.resolver);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
      SettableBeanProperty settableBeanProperty1 = objectIdValueProperty0.withName(objectIdReader1.propertyName);
      assertNull(settableBeanProperty1.getManagedReferenceName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1942);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<Object> objectIdGenerator0 = (ObjectIdGenerator<Object>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName0 = PropertyName.construct("=~R1BVdLumo@Dn+t", "=~R1BVdLumo@Dn+t");
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      ObjectIdReader objectIdReader1 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, (JsonDeserializer<?>) null, settableBeanProperty0, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata1);
      assertFalse(objectIdValueProperty1.hasViews());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper_DefaultTyping0, (Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<Annotation> class0 = Annotation.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, beanProperty_Bogus0);
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      objectIdValueProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2370);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper_DefaultTyping0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<Annotation> class0 = Annotation.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, beanProperty_Bogus0);
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'j';
      charArray0[3] = '4';
      charArray0[4] = '\"';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      objectIdValueProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext0, deserializerFactory0);
      objectIdValueProperty1.getAnnotation(class0);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertNull(settableBeanProperty0.getManagedReferenceName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<PropertyName> class0 = PropertyName.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1486);
      ObjectIdGenerator<Integer> objectIdGenerator0 = objectIdGenerators_IntSequenceGenerator0.forScope(class0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2316, mockRandom0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      JsonDeserializer<DecimalNode> jsonDeserializer0 = (JsonDeserializer<DecimalNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.enable(jsonFactory_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonParser jsonParser0 = jsonFactory1.createParser((byte[]) null, 0, 0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper_DefaultTyping0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<Annotation> class0 = Annotation.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, beanProperty_Bogus0);
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '4';
      charArray0[2] = 'j';
      charArray0[3] = 'L';
      charArray0[4] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      objectIdValueProperty1.deserializeAndSet(readerBasedJsonParser0, defaultDeserializationContext0, deserializerFactory0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, (ObjectIdGenerator<?>) null, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'j';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = 'j';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, (PropertyName) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        objectIdValueProperty2.deserializeAndSet(jsonParser0, defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty");
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, jsonDeserializer1, jsonDeserializer1);
      objectIdValueProperty1.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(1486);
      Class<Annotation> class0 = Annotation.class;
      objectIdValueProperty0.getAnnotation(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature1);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext0, objectIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver1);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      Class<Annotation> class0 = Annotation.class;
      objectIdValueProperty0.getAnnotation(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-15));
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      simpleObjectIdResolver1.newForDeserialization(decimalNode0);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper_DefaultTyping0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<InputStream> class0 = InputStream.class;
      Class<Object> class1 = Object.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, beanProperty_Bogus0);
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator1).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      System.setCurrentTimeMillis(1486);
      JsonDeserializer<PropertyName> jsonDeserializer1 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectIdValueProperty objectIdValueProperty0 = null;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-787));
      coreXMLDeserializers_Std0.getObjectIdReader();
      ObjectIdValueProperty objectIdValueProperty2 = null;
      try {
        objectIdValueProperty2 = new ObjectIdValueProperty((ObjectIdReader) null, (PropertyMetadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1469);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus1.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      System.setCurrentTimeMillis(1469);
      Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 8);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      classArray0[0] = class0;
      Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
      classArray0[1] = class1;
      Class<ObjectMapper.DefaultTyping> class2 = ObjectMapper.DefaultTyping.class;
      classArray0[2] = class2;
      Class<ObjectMapper.DefaultTyping> class3 = ObjectMapper.DefaultTyping.class;
      classArray0[3] = class3;
      Class<ObjectMapper.DefaultTyping> class4 = ObjectMapper.DefaultTyping.class;
      classArray0[4] = class4;
      Class<ObjectMapper.DefaultTyping> class5 = ObjectMapper.DefaultTyping.class;
      classArray0[5] = class5;
      Class<ObjectMapper.DefaultTyping> class6 = ObjectMapper.DefaultTyping.class;
      classArray0[6] = class6;
      Class<ObjectMapper.DefaultTyping> class7 = ObjectMapper.DefaultTyping.class;
      classArray0[7] = class7;
      objectIdValueProperty0.setViews(classArray0);
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
      Class<Annotation> class8 = Annotation.class;
      objectIdValueProperty0.getAnnotation(class8);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonFactory1.configure(jsonParser_Feature0, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, beanProperty_Bogus1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      System.setCurrentTimeMillis(1486);
      JsonDeserializer<PropertyName> jsonDeserializer1 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
      Class<Annotation> class0 = Annotation.class;
      settableBeanProperty0.getAnnotation(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(69);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      System.setCurrentTimeMillis(0L);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      File file0 = MockFile.createTempFile("JSON", "im%eli)_");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<DataInputStream> class0 = DataInputStream.class;
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, (ValueInstantiator) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, propertyName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerator<Object> objectIdGenerator2 = (ObjectIdGenerator<Object>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator2, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      System.setCurrentTimeMillis(1486);
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = new Locale("Instances of ");
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      ArrayNode arrayNode0 = objectMapper2.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Instances of ", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1), 0, true);
      objectIdValueProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(69);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.set("", "T");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty");
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, jsonDeserializer1, jsonDeserializer1);
      objectIdValueProperty1.withNullProvider((NullValueProvider) null);
      System.setCurrentTimeMillis(1486);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("com.fasterxml.jackson.databind.deser.mpl.ObjectIdValuePrperty");
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (PropertyName) null);
      objectIdValueProperty1.getInjectableValueId();
      Integer integer0 = new Integer(2515);
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty0, jsonDeserializer1, jsonDeserializer1);
      ObjectIdValueProperty objectIdValueProperty3 = new ObjectIdValueProperty(objectIdValueProperty1, (PropertyName) null);
      ObjectIdValueProperty objectIdValueProperty4 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty4.getMember();
      System.setCurrentTimeMillis(2515);
      JsonDeserializer<PropertyName> jsonDeserializer2 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty4.withValueDeserializer(jsonDeserializer2);
      assertNotSame(settableBeanProperty0, objectIdValueProperty4);
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = objectIdValueProperty1.getAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      System.setCurrentTimeMillis(1486);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertSame(settableBeanProperty0, objectIdValueProperty0);
      
      Class<Annotation> class0 = Annotation.class;
      settableBeanProperty0.getAnnotation(class0);
      assertSame(settableBeanProperty0, objectIdValueProperty0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName("");
      ObjectIdReader objectIdReader1 = ObjectIdReader.construct((JavaType) null, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, settableBeanProperty0, objectIdReader0.resolver);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      // Undeclared exception!
      try { 
        objectIdValueProperty1.setAndReturn(objectIdReader1, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(69);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerators_StringIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.setAndReturn(simpleObjectIdResolver0, propertyName0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("com.fasterxml.jackson.databind.deser.mpl.ObjectIdValuePrperty");
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata1);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (PropertyName) null);
      objectIdValueProperty1.getInjectableValueId();
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty0, jsonDeserializer1, jsonDeserializer1);
      objectIdValueProperty2.withName((PropertyName) null);
      ObjectIdValueProperty objectIdValueProperty3 = new ObjectIdValueProperty(objectIdValueProperty1, (PropertyName) null);
      ObjectIdValueProperty objectIdValueProperty4 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty4.getMember();
      System.setCurrentTimeMillis(2515);
      JsonDeserializer<PropertyName> jsonDeserializer2 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectIdValueProperty4.withValueDeserializer(jsonDeserializer2);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      // Undeclared exception!
      try { 
        objectIdValueProperty2.setAndReturn("com.fasterxml.jackson.databind.deser.mpl.ObjectIdValuePrperty", decimalNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, objectIdValueProperty1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyName propertyName0 = new PropertyName("M", "9~f'!UW|sW{}+");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      propertyName0.internSimpleName();
      objectIdValueProperty0.getInjectableValueId();
      Integer integer0 = new Integer((-65));
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty1.withName(propertyName0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.set("M", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = null;
      try {
        objectIdValueProperty1 = new ObjectIdValueProperty((ObjectIdValueProperty) null, objectIdReader0.propertyName);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(58);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Class<InputStream> class0 = InputStream.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U5,pQ[Odj");
      ObjectIdGenerator<Integer> objectIdGenerator0 = objectIdGenerators_IntSequenceGenerator0.forScope(class0);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, objectIdReader0.propertyName);
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty2.withNullProvider((NullValueProvider) null);
      ObjectIdReader objectIdReader1 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, settableBeanProperty0, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty3 = new ObjectIdValueProperty(objectIdReader1, (PropertyMetadata) null);
      Integer integer0 = new Integer(46);
      // Undeclared exception!
      try { 
        objectIdValueProperty3.set(integer0, objectIdGenerator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName("");
      ObjectIdReader objectIdReader1 = ObjectIdReader.construct((JavaType) null, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, settableBeanProperty0, objectIdReader0.resolver);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      // Undeclared exception!
      try { 
        objectIdValueProperty1.set(objectMapper_DefaultTyping0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyName propertyName0 = new PropertyName("", "9~f'!UW|sW{}+");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty0.getInjectableValueId();
      Integer integer0 = new Integer((-65));
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, jsonDeserializer1, jsonDeserializer1);
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, propertyName0);
      AnnotatedMember annotatedMember0 = objectIdValueProperty2.getMember();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(69);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(objectMapper_DefaultTyping0);
      // Undeclared exception!
      try { 
        objectIdValueProperty1.set(objectIdResolver0, objectMapper_DefaultTyping0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2778);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty0.withName(objectIdReader0.propertyName);
      System.setCurrentTimeMillis(2778);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      AnnotatedMember annotatedMember0 = settableBeanProperty0.getMember();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2778);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      objectIdValueProperty0.withName(objectIdReader0.propertyName);
      System.setCurrentTimeMillis(2778);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withNullProvider((NullValueProvider) null);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      objectIdValueProperty2.withName((PropertyName) null);
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      // Undeclared exception!
      try { 
        objectIdValueProperty1.set(stack0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.newForSerialization(placeholderForType0);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1458);
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, (PropertyName) null, objectIdGenerator0, coreXMLDeserializers_Std0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      // Undeclared exception!
      try { 
        objectIdValueProperty0.set(beanProperty_Bogus0, objectIdGenerator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1486);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<Annotation> objectIdGenerator1 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader((JavaType) null, (PropertyName) null, objectIdGenerator1, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName("");
      ObjectIdReader objectIdReader1 = ObjectIdReader.construct((JavaType) null, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, settableBeanProperty0, objectIdReader0.resolver);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, (PropertyName) null);
      BuilderBasedDeserializer builderBasedDeserializer0 = null;
      try {
        builderBasedDeserializer0 = new BuilderBasedDeserializer((BuilderBasedDeserializer) null, objectIdReader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(69);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(placeholderForType0, propertyName0, (ObjectIdGenerator<?>) null, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);
      ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, propertyName0);
      ObjectIdValueProperty objectIdValueProperty2 = new ObjectIdValueProperty(objectIdValueProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      // Undeclared exception!
      try { 
        objectIdValueProperty2.set((Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Should not call set() on ObjectIdProperty that has no SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyName propertyName0 = new PropertyName("", "9~f'!UW|sW{}+");
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = new ObjectIdReader(javaType0, propertyName0, (ObjectIdGenerator<?>) null, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, (PropertyMetadata) null);
      Class<Object> class0 = Object.class;
      objectIdValueProperty0.getInjectableValueId();
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = null;
      try {
        objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct IdKey for null key
         //
         verifyException("com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey", e);
      }
  }
}
