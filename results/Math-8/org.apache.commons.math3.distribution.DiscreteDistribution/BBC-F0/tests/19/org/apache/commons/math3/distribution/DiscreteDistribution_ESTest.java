/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 10:11:18 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(204.5367793641);
      assertEquals(204.5367793641, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(204.5367793641);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(204.5367793641, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      Pair<String, Double> pair1 = new Pair<String, Double>("M]I", double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList1.add(pair1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList1.contains(pair1));
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList1.size());
      
      boolean boolean2 = linkedList1.add(pair0);
      assertNotSame(pair0, pair1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair0.equals((Object)pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(discreteDistribution0);
      assertEquals(3, linkedList1.size());
      
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(list0);
      assertEquals(3, linkedList1.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String[] stringArray0 = discreteDistribution0.sample(1876);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1876, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(list0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotNull(discreteDistribution1);
      assertEquals(3, linkedList1.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String[] stringArray1 = discreteDistribution1.sample(1876);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1876, stringArray1.length);
      assertNotNull(stringArray1);
      assertEquals(3, linkedList1.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertNotNull(discreteDistribution2);
      assertEquals(3, linkedList1.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      double double2 = discreteDistribution2.probability("");
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertNotSame(discreteDistribution0, discreteDistribution2);
      assertNotSame(discreteDistribution2, discreteDistribution1);
      assertNotSame(discreteDistribution2, discreteDistribution0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution2));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertEquals(0.6666666666666666, double2, 0.01);
      assertEquals(3, linkedList1.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotNull(pair2);
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(pair3.equals((Object)pair2));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotNull(pair3);
      
      boolean boolean3 = linkedList2.add(pair3);
      assertNotSame(pair2, pair3);
      assertNotSame(pair3, pair2);
      assertTrue(linkedList2.contains(pair3));
      assertTrue(pair2.equals((Object)pair3));
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(pair3.equals((Object)pair2));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(1, linkedList2.size());
      
      // Undeclared exception!
      discreteDistribution1.sample(1876);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(3963.1024);
      assertEquals(3963.1024, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      String string0 = discreteDistribution0.sample();
      assertTrue(linkedList0.contains(pair0));
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(2.147483647E9);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.05077669032363308);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.05077669032363308, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList1.size());
      
      double double2 = discreteDistribution0.probability((String) null);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1.0, double2, 0.01);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(2398.7733256);
      assertEquals(2398.7733256, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(";/A]Os", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      String[] stringArray0 = discreteDistribution0.sample(1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(1, linkedList0.size());
      
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(2398.7733256);
      assertEquals(2398.7733256, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList1.size());
      
      String[] stringArray0 = discreteDistribution0.sample(1905);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1905, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(1, linkedList1.size());
      
      String[] stringArray1 = discreteDistribution0.sample(1905);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1905, stringArray1.length);
      assertNotNull(stringArray1);
      assertEquals(1, linkedList1.size());
      
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList3.contains(pair0));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      
      String string0 = discreteDistribution0.sample();
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList3);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList3));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList1.size());
      
      double double1 = discreteDistribution0.probability((String) null);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList3);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList3));
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, linkedList1.size());
      
      LinkedList<Pair<Object, Double>> linkedList4 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList4);
      assertEquals(0, linkedList4.size());
      
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(0.4342944622039795);
      assertEquals(0.4342944622039795, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      Stream<Pair<Byte, Double>> stream0 = linkedList0.parallelStream();
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertNotSame(pair0, pair1);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair1);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Pair<String, Double> pair2 = new Pair<String, Double>("", double0);
      assertNotNull(pair2);
      
      boolean boolean2 = linkedList1.add(pair2);
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList1.size());
      
      List<Pair<String, Double>> list1 = discreteDistribution1.getSamples();
      assertTrue(linkedList1.contains(pair2));
      assertFalse(list1.contains(pair2));
      assertNotNull(list1);
      assertEquals(1, linkedList1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      String string0 = discreteDistribution1.sample();
      assertTrue(linkedList1.contains(pair2));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList1.size());
      
      double double1 = discreteDistribution1.probability("x^0w,rW;q");
      assertTrue(linkedList1.contains(pair2));
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(0.4342944622039795);
      assertEquals(0.4342944622039795, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      Stream<Pair<Byte, Double>> stream0 = linkedList0.parallelStream();
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertNotSame(pair0, pair1);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair1);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Pair<String, Double> pair2 = new Pair<String, Double>("", double0);
      assertNotNull(pair2);
      
      boolean boolean2 = linkedList1.add(pair2);
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList1.size());
      
      List<Pair<String, Double>> list1 = discreteDistribution1.getSamples();
      assertTrue(linkedList1.contains(pair2));
      assertFalse(list1.contains(pair2));
      assertNotNull(list1);
      assertEquals(1, linkedList1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      String string0 = discreteDistribution1.sample();
      assertTrue(linkedList1.contains(pair2));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList1.size());
      
      double double1 = discreteDistribution1.probability("");
      assertTrue(linkedList1.contains(pair2));
      assertEquals(1.0, double1, 0.01);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-4146);
      Well19937a well19937a0 = new Well19937a((-4146));
      assertNotNull(well19937a0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      well19937a0.clear();
      Double double0 = new Double((-4146));
      assertEquals((-4146.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList2.contains(pair1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      boolean boolean0 = linkedList2.add(pair0);
      assertNotSame(pair0, pair1);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      assertTrue(linkedList2.contains(pair1));
      assertTrue(pair0.equals((Object)pair1));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertEquals(1, linkedList2.size());
      
      Stream<Pair<String, Double>> stream0 = linkedList1.parallelStream();
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      assertFalse(linkedList1.contains(pair1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertNotNull(stream0);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,146 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(2398.7733256);
      assertEquals(2398.7733256, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      String string0 = discreteDistribution0.sample();
      assertTrue(linkedList0.contains(pair1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-4146));
      assertNotNull(well19937a0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      well19937a0.clear();
      Double double0 = new Double(2398.7733256);
      assertEquals(2398.7733256, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      discreteDistribution0.reseedRandomGenerator((-4146));
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      String string0 = discreteDistribution0.sample();
      assertTrue(linkedList0.contains(pair0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(3478.9167559846023);
      assertEquals(3478.9167559846023, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertNotSame(pair0, pair1);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Stream<Pair<String, Double>> stream0 = linkedList0.parallelStream();
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(stream0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1392);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-4146));
      assertNotNull(well19937a0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      well19937a0.clear();
      Double double0 = new Double(3478.9167559846023);
      assertEquals(3478.9167559846023, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Pair<String, Double> pair2 = new Pair<String, Double>(pair0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair0);
      assertNotSame(pair0, pair1);
      assertNotSame(pair0, pair2);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      assertTrue(pair0.equals((Object)pair2));
      assertTrue(pair0.equals((Object)pair1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      Stream<Pair<String, Double>> stream0 = linkedList0.parallelStream();
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains(pair0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList1.size());
      
      int int0 = 0;
      try { 
        discreteDistribution0.sample((-865308936));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-865,308,936)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 3398;
      Integer integer0 = new Integer(3398);
      Double double0 = new Double(2.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>((List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2398.7733256);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      String string0 = discreteDistribution0.sample();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short) (-1);
      Long long0 = new Long((short) (-1));
      Float float0 = new Float((float) (short) (-1));
      Pair<Long, Float> pair0 = new Pair<Long, Float>(long0, float0);
      linkedList0.remove((Object) pair0);
      Short short1 = new Short((short) (-1));
      Double double0 = new Double((short) (-1));
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(pair1);
      linkedList0.push(pair2);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0);
      Double double0 = new Double(0.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-4146);
      Well19937a well19937a0 = new Well19937a((-4146));
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      well19937a0.clear();
      Double double0 = new Double(3478.9167559846023);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.parallelStream();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(681L);
      LinkedList<Pair<Pair<Float, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Object>, Double>>();
      DiscreteDistribution<Pair<Float, Object>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Float, Object>>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      DiscreteDistribution<Pair<Byte, Byte>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Byte>>(mersenneTwister0, (List<Pair<Pair<Byte, Byte>, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
