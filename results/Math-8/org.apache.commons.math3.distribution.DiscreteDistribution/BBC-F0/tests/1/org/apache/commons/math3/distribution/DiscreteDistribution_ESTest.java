/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 10:03:44 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.3329153982506692);
      assertEquals(0.3329153982506692, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      linkedList0.addLast(pair1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertNotSame(discreteDistribution0, discreteDistribution1);
      
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertNotSame(discreteDistribution0, discreteDistribution1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair0, pair1);
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray0);
      assertEquals(1664, integerArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      discreteDistribution0.reseedRandomGenerator(1L);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      Integer[] integerArray1 = discreteDistribution0.sample(249);
      assertNotNull(integerArray1);
      assertEquals(249, integerArray1.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      Pair<String, Double> pair2 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair2));
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = linkedList1.add(pair2);
      assertTrue(boolean2);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(1, linkedList1.size());
      
      String string0 = discreteDistribution1.sample();
      assertNull(string0);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair0, pair1);
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray0);
      assertEquals(1664, integerArray0.length);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      
      Double double1 = new Double(0.2569784294009354);
      assertEquals(0.2569784294009354, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Integer integer1 = new Integer(378);
      assertEquals(378, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double1);
      assertNotNull(pair2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(pair2.equals((Object)pair0));
      assertFalse(pair2.equals((Object)pair1));
      
      boolean boolean2 = linkedList0.add(pair1);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains(pair2));
      assertTrue(linkedList0.contains(pair1));
      assertEquals(3, linkedList0.size());
      assertFalse(integer0.equals((Object)integer1));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair0.equals((Object)pair2));
      assertTrue(pair0.equals((Object)pair1));
      assertFalse(pair1.equals((Object)pair2));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(pair0, pair2);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertNotSame(pair1, pair2);
      
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution1);
      assertFalse(linkedList0.contains(pair2));
      assertTrue(linkedList0.contains(pair1));
      assertEquals(3, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      discreteDistribution1.reseedRandomGenerator(378);
      assertFalse(linkedList0.contains(pair2));
      assertTrue(linkedList0.contains(pair1));
      assertEquals(3, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotSame(discreteDistribution1, discreteDistribution0);
      
      Integer[] integerArray1 = discreteDistribution1.sample(2251);
      assertNotNull(integerArray1);
      assertEquals(2251, integerArray1.length);
      assertFalse(linkedList0.contains(pair2));
      assertTrue(linkedList0.contains(pair1));
      assertEquals(3, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertNotSame(integerArray1, integerArray0);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList0.contains(pair2));
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(3, linkedList0.size());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertNotSame(discreteDistribution0, discreteDistribution1);
      
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(list0);
      assertNotNull(discreteDistribution2);
      assertFalse(list0.contains(pair1));
      assertFalse(linkedList0.contains(pair2));
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(3, linkedList0.size());
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      
      // Undeclared exception!
      discreteDistribution1.sample(2251);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Integer integer0 = new Integer(248);
      assertEquals(248, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(248);
      assertEquals(248.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(248);
      assertNotNull(integerArray0);
      assertEquals(248, integerArray0.length);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      
      int int0 = 249;
      int int1 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.8380968704057434);
      //  // Unstable assertion: assertEquals(0.8380968704057434, (double)double0, 0.01);
      //  // Unstable assertion: assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("condition number {1} is too high ", double0);
      //  // Unstable assertion: assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(linkedList0.contains(pair0));
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      //  // Unstable assertion: assertNotNull(discreteDistribution0);
      //  // Unstable assertion: assertTrue(linkedList0.contains(pair0));
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      
      String[] stringArray0 = discreteDistribution0.sample(263);
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(263, stringArray0.length);
      //  // Unstable assertion: assertTrue(linkedList0.contains(pair0));
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      //  // Unstable assertion: assertNotNull(list0);
      //  // Unstable assertion: assertTrue(linkedList0.contains(pair0));
      //  // Unstable assertion: assertFalse(list0.contains(pair0));
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      
      Well44497a well44497a0 = new Well44497a();
      //  // Unstable assertion: assertNotNull(well44497a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      //  // Unstable assertion: assertNotNull(linkedList1);
      //  // Unstable assertion: assertEquals(0, linkedList1.size());
      
      Double double1 = new Double(263);
      //  // Unstable assertion: assertEquals(263.0, (double)double1, 0.01);
      //  // Unstable assertion: assertNotNull(double1);
      //  // Unstable assertion: assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.776255888634515);
      //  // Unstable assertion: assertEquals(0.776255888634515, (double)double2, 0.01);
      //  // Unstable assertion: assertNotNull(double2);
      //  // Unstable assertion: assertNotEquals((double)double2, (double)double0, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(3125.788856);
      //  // Unstable assertion: assertEquals(3125.788856, (double)double3, 0.01);
      //  // Unstable assertion: assertNotNull(double3);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(1.0);
      //  // Unstable assertion: assertEquals(1.0, (double)double4, 0.01);
      //  // Unstable assertion: assertNotNull(double4);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double0, 0.01);
      
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
      //  // Unstable assertion: assertNotNull(pair1);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double4, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double0, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double0, 0.01);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      //  // Unstable assertion: assertNotNull(pair2);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double4, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double0, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double0, 0.01);
      //  // Unstable assertion: assertTrue(pair2.equals((Object)pair1));
      
      boolean boolean1 = linkedList1.add(pair2);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(linkedList1.contains(pair2));
      //  // Unstable assertion: assertEquals(1, linkedList1.size());
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double4, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double3, (double)double0, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double4, (double)double0, 0.01);
      //  // Unstable assertion: assertTrue(pair1.equals((Object)pair2));
      //  // Unstable assertion: assertTrue(pair2.equals((Object)pair1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertNotSame(pair1, pair2);
      //  // Unstable assertion: assertNotSame(pair2, pair1);
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double0);
      //  // Unstable assertion: assertNotNull(pair3);
      //  // Unstable assertion: assertFalse(pair3.equals((Object)pair1));
      //  // Unstable assertion: assertFalse(pair3.equals((Object)pair2));
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double4, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double1, 0.01);
      
      boolean boolean2 = linkedList1.add(pair3);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertTrue(linkedList1.contains(pair2));
      //  // Unstable assertion: assertEquals(2, linkedList1.size());
      //  // Unstable assertion: assertFalse(pair3.equals((Object)pair1));
      //  // Unstable assertion: assertFalse(pair3.equals((Object)pair2));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double2, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double4, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double0, (double)double1, 0.01);
      //  // Unstable assertion: assertNotSame(pair3, pair1);
      //  // Unstable assertion: assertNotSame(pair3, pair2);
      
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      //  // Unstable assertion: assertNotNull(discreteDistribution1);
      //  // Unstable assertion: assertTrue(linkedList1.contains(pair2));
      //  // Unstable assertion: assertEquals(2, linkedList1.size());
      
      Double double5 = discreteDistribution1.sample();
      //  // Unstable assertion: assertEquals(0.8380968704057434, (double)double5, 0.01);
      //  // Unstable assertion: assertNotNull(double5);
      //  // Unstable assertion: assertTrue(linkedList1.contains(pair2));
      //  // Unstable assertion: assertEquals(2, linkedList1.size());
      //  // Unstable assertion: assertNotEquals((double)double5, (double)double4, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double5, (double)double3, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double5, (double)double1, 0.01);
      //  // Unstable assertion: assertNotEquals((double)double5, (double)double2, 0.01);
      
      System.setCurrentTimeMillis(263);
      String[] stringArray1 = discreteDistribution0.sample(263);
      //  // Unstable assertion: assertNotNull(stringArray1);
      //  // Unstable assertion: assertEquals(263, stringArray1.length);
      //  // Unstable assertion: assertTrue(linkedList0.contains(pair0));
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertFalse(stringArray1.equals((Object)stringArray0));
      //  // Unstable assertion: assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.8380968704057434);
      assertEquals(0.8380968704057434, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("condition number {1} is too high ", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      String string0 = discreteDistribution0.sample();
      assertEquals("condition number {1} is too high ", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray0);
      assertEquals(1664, integerArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray1 = discreteDistribution0.sample(249);
      assertNotNull(integerArray1);
      assertEquals(249, integerArray1.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer integer1 = discreteDistribution0.sample();
      assertEquals(1664, (int)integer1);
      assertNotNull(integer1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Double double2 = new Double(249);
      assertEquals(249.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(":rL%e:xK;nI`b|", double2);
      assertNotNull(pair1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      linkedList1.addLast(pair1);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(3.5371542244169364E-8);
      assertEquals(3.5371542244169364E-8, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double3, double0);
      assertNotNull(pair2);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(pair2));
      assertEquals(0, linkedList2.size());
      
      Double double4 = new Double(1664);
      assertEquals(1664.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double4, double2);
      assertNotNull(pair3);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double4, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      boolean boolean1 = linkedList2.add(pair3);
      assertTrue(boolean1);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1, linkedList2.size());
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(boolean1 == boolean0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double4, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotSame(pair3, pair2);
      
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList2);
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1, linkedList2.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray0);
      assertEquals(1664, integerArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray1 = discreteDistribution0.sample(249);
      assertNotNull(integerArray1);
      assertEquals(249, integerArray1.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer integer1 = discreteDistribution0.sample();
      assertEquals(1664, (int)integer1);
      assertNotNull(integer1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Double double2 = new Double(249);
      assertEquals(249.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(":rL%e:xK;nI`b|", double2);
      assertNotNull(pair1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      linkedList1.addLast(pair1);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>(":rL%e:xK;nI`b|", double0);
      assertNotNull(pair2);
      assertFalse(pair2.equals((Object)pair1));
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      linkedList1.addLast(pair2);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(2, linkedList1.size());
      assertFalse(pair2.equals((Object)pair1));
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotSame(pair2, pair1);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(2, linkedList1.size());
      
      double double4 = discreteDistribution1.probability((String) null);
      assertEquals(0.0, double4, 0.01);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(2, linkedList1.size());
      assertNotEquals(double4, double1, 0.01);
      
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      DiscreteDistribution<Short> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Short>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Double double1 = new Double(1664);
      assertEquals(1664.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Integer integer1 = new Integer(1664);
      assertEquals(1664, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-810312760));
      assertEquals((-810312760), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer2, double0);
      assertNotNull(pair1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(pair1.equals((Object)pair0));
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertFalse(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1664);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray0);
      assertEquals(1664, integerArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray1 = discreteDistribution0.sample(249);
      assertNotNull(integerArray1);
      assertEquals(249, integerArray1.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      try { 
        discreteDistribution1.sample((-145));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-145)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 1664;
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray0);
      assertEquals(1664, integerArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray1 = discreteDistribution0.sample(249);
      assertNotNull(integerArray1);
      assertEquals(249, integerArray1.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Double double2 = new Double(249);
      assertEquals(249.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(":rL%e:xK;nI`b|", double2);
      assertNotNull(pair1);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      linkedList1.addLast(pair1);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>(":rL%e:xK;nI`b|", double0);
      assertNotNull(pair2);
      assertFalse(pair2.equals((Object)pair1));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      
      linkedList1.addLast(pair2);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(2, linkedList1.size());
      assertFalse(pair2.equals((Object)pair1));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotSame(pair2, pair1);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(2, linkedList1.size());
      
      double double4 = discreteDistribution1.probability((String) null);
      assertEquals(0.0, double4, 0.01);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(2, linkedList1.size());
      assertNotEquals(double4, double1, 0.01);
      
      Well19937a well19937a0 = new Well19937a(1);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(1664);
      assertEquals(1664, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1664);
      assertEquals(1664.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(2957);
      assertNotNull(integerArray0);
      assertEquals(2957, integerArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer[] integerArray1 = discreteDistribution0.sample(1664);
      assertNotNull(integerArray1);
      assertEquals(1664, integerArray1.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      
      discreteDistribution0.reseedRandomGenerator(1664);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Integer integer1 = new Integer(2109);
      assertEquals(2109, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1664;
      intArray0[1] = 1130;
      intArray0[2] = 2109;
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertNotNull(well19937a0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1664, 1130, 2109, 0}, intArray0);
      
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      assertNotNull(discreteDistribution1);
      assertEquals(4, intArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertArrayEquals(new int[] {1664, 1130, 2109, 0}, intArray0);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertFalse(list0.contains(pair0));
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertNotSame(discreteDistribution0, discreteDistribution1);
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Short short0 = new Short((short) (-1692));
      assertEquals((short) (-1692), (short)short0);
      assertNotNull(short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      DiscreteDistribution<Pair<Float, String>> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Pair<Float, String>>((List<Pair<Pair<Float, String>, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1664);
      Double double0 = new Double(1664);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1664);
      Integer integer1 = new Integer(1664);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer1, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample(1664);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1664;
      Integer integer0 = new Integer(1664);
      Double double0 = new Double(1664);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int1 = 34;
      discreteDistribution0.sample(1664);
      discreteDistribution0.sample(249);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.probability(integer0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(249);
      Pair<String, Double> pair1 = new Pair<String, Double>(":rL%e:xK;nI`b|", double1);
      linkedList1.addLast(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.probability("1");
      Well19937a well19937a0 = new Well19937a(1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = Byte.valueOf((byte)0);
      Double double0 = new Double((-1672.42364));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,672.424 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-1646.3229255896852));
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,646.323 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1664;
      Integer integer0 = new Integer(1664);
      Double double0 = new Double(1664);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int1 = 34;
      discreteDistribution0.sample(1664);
      discreteDistribution0.sample(249);
      discreteDistribution0.reseedRandomGenerator(0L);
      Integer integer1 = new Integer(34);
      discreteDistribution0.probability(integer1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(249);
      Pair<String, Double> pair1 = new Pair<String, Double>(":rL%e:xK;nI`b|", double1);
      linkedList1.addLast(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.probability("1");
      Well19937a well19937a0 = new Well19937a(1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-1535L));
      Double double0 = new Double(0.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)24;
      mersenneTwister0.nextBytes(byteArray0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(mersenneTwister0, (List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      Well19937a well19937a0 = new Well19937a(0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
