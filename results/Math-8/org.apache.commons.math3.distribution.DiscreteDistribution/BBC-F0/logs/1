* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.math3.distribution.DiscreteDistribution
* Starting Client-0
* Connecting to master process on port 2794
* Analyzing classpath: 
  - subjects/buggy-versions/Math-8/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.distribution.DiscreteDistribution
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 245
* Using seed 848548397
* Starting evolution
* Initial Number of Goals in DynaMOSA = 62 / 245
* Search finished after 302s and 58 generations, 38125 statements, best individual has fitness: 33.0
* Minimizing test suite
[MASTER] 10:02:06.391 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 38
* Number of covered goals: 36
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 127
* Number of covered goals: 115
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 14
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Generated 23 tests with total length 529
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:02:58.461 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8561166666666666% of time used, but only 10/23 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 10:03:32.745 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.8380968704057434> but was:<3125.788856>
[MASTER] 10:03:32.753 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

Double double0 = new Double(0.8380968704057434);
assertEquals(0.8380968704057434, (double)double0, 0.01);
assertNotNull(double0);

Pair<String, Double> pair0 = new Pair<String, Double>("condition number {1} is too high ", double0);
assertNotNull(pair0);

boolean boolean0 = linkedList0.add(pair0);
assertTrue(boolean0);
assertTrue(linkedList0.contains(pair0));
assertEquals(1, linkedList0.size());

DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
assertNotNull(discreteDistribution0);
assertTrue(linkedList0.contains(pair0));
assertEquals(1, linkedList0.size());

String[] stringArray0 = discreteDistribution0.sample(263);
assertNotNull(stringArray0);
assertEquals(263, stringArray0.length);
assertTrue(linkedList0.contains(pair0));
assertEquals(1, linkedList0.size());

List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
assertNotNull(list0);
assertTrue(linkedList0.contains(pair0));
assertFalse(list0.contains(pair0));
assertEquals(1, linkedList0.size());
assertEquals(1, list0.size());
assertFalse(list0.isEmpty());

Well44497a well44497a0 = new Well44497a();
assertNotNull(well44497a0);

LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
assertNotNull(linkedList1);
assertEquals(0, linkedList1.size());

Double double1 = new Double(263);
assertEquals(263.0, (double)double1, 0.01);
assertNotNull(double1);
assertNotEquals((double)double1, (double)double0, 0.01);

Double double2 = new Double(0.776255888634515);
assertEquals(0.776255888634515, (double)double2, 0.01);
assertNotNull(double2);
assertNotEquals((double)double2, (double)double0, 0.01);
assertNotEquals((double)double2, (double)double1, 0.01);

Double double3 = new Double(3125.788856);
assertEquals(3125.788856, (double)double3, 0.01);
assertNotNull(double3);
assertNotEquals((double)double3, (double)double1, 0.01);
assertNotEquals((double)double3, (double)double2, 0.01);
assertNotEquals((double)double3, (double)double0, 0.01);

Double double4 = new Double(1.0);
assertEquals(1.0, (double)double4, 0.01);
assertNotNull(double4);
assertNotEquals((double)double4, (double)double1, 0.01);
assertNotEquals((double)double4, (double)double2, 0.01);
assertNotEquals((double)double4, (double)double3, 0.01);
assertNotEquals((double)double4, (double)double0, 0.01);

Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
assertNotNull(pair1);
assertNotEquals((double)double3, (double)double4, 0.01);
assertNotEquals((double)double3, (double)double1, 0.01);
assertNotEquals((double)double3, (double)double2, 0.01);
assertNotEquals((double)double3, (double)double0, 0.01);
assertNotEquals((double)double4, (double)double1, 0.01);
assertNotEquals((double)double4, (double)double2, 0.01);
assertNotEquals((double)double4, (double)double3, 0.01);
assertNotEquals((double)double4, (double)double0, 0.01);

Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
assertNotNull(pair2);
assertNotEquals((double)double3, (double)double4, 0.01);
assertNotEquals((double)double3, (double)double1, 0.01);
assertNotEquals((double)double3, (double)double2, 0.01);
assertNotEquals((double)double3, (double)double0, 0.01);
assertNotEquals((double)double4, (double)double1, 0.01);
assertNotEquals((double)double4, (double)double2, 0.01);
assertNotEquals((double)double4, (double)double3, 0.01);
assertNotEquals((double)double4, (double)double0, 0.01);
assertTrue(pair2.equals((Object)pair1));

boolean boolean1 = linkedList1.add(pair2);
assertTrue(boolean1);
assertTrue(linkedList1.contains(pair2));
assertEquals(1, linkedList1.size());
assertNotEquals((double)double3, (double)double4, 0.01);
assertNotEquals((double)double3, (double)double1, 0.01);
assertNotEquals((double)double3, (double)double2, 0.01);
assertNotEquals((double)double3, (double)double0, 0.01);
assertNotEquals((double)double4, (double)double1, 0.01);
assertNotEquals((double)double4, (double)double2, 0.01);
assertNotEquals((double)double4, (double)double3, 0.01);
assertNotEquals((double)double4, (double)double0, 0.01);
assertTrue(pair1.equals((Object)pair2));
assertTrue(pair2.equals((Object)pair1));
assertTrue(boolean1 == boolean0);
assertNotSame(pair1, pair2);
assertNotSame(pair2, pair1);

Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double0);
assertNotNull(pair3);
assertFalse(pair3.equals((Object)pair1));
assertFalse(pair3.equals((Object)pair2));
assertNotEquals((double)double0, (double)double2, 0.01);
assertNotEquals((double)double0, (double)double3, 0.01);
assertNotEquals((double)double0, (double)double4, 0.01);
assertNotEquals((double)double0, (double)double1, 0.01);

boolean boolean2 = linkedList1.add(pair3);
assertTrue(boolean2);
assertTrue(linkedList1.contains(pair2));
assertEquals(2, linkedList1.size());
assertFalse(pair3.equals((Object)pair1));
assertFalse(pair3.equals((Object)pair2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotEquals((double)double0, (double)double2, 0.01);
assertNotEquals((double)double0, (double)double3, 0.01);
assertNotEquals((double)double0, (double)double4, 0.01);
assertNotEquals((double)double0, (double)double1, 0.01);
assertNotSame(pair3, pair1);
assertNotSame(pair3, pair2);

DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
assertNotNull(discreteDistribution1);
assertTrue(linkedList1.contains(pair2));
assertEquals(2, linkedList1.size());

Double double5 = discreteDistribution1.sample();
assertEquals(0.8380968704057434, (double)double5, 0.01);
assertNotNull(double5);
assertTrue(linkedList1.contains(pair2));
assertEquals(2, linkedList1.size());
assertNotEquals((double)double5, (double)double4, 0.01);
assertNotEquals((double)double5, (double)double3, 0.01);
assertNotEquals((double)double5, (double)double1, 0.01);
assertNotEquals((double)double5, (double)double2, 0.01);

System.setCurrentTimeMillis(263);
String[] stringArray1 = discreteDistribution0.sample(263);
assertNotNull(stringArray1);
assertEquals(263, stringArray1.length);
assertTrue(linkedList0.contains(pair0));
assertEquals(1, linkedList0.size());
assertFalse(stringArray1.equals((Object)stringArray0));
assertNotSame(stringArray1, stringArray0);


[MASTER] 10:03:40.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 10:03:40.871 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

Integer integer0 = new Integer(378);
assertEquals(378, (int)integer0);
assertNotNull(integer0);

LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
assertNotNull(linkedList1);
assertEquals(0, linkedList1.size());

Double double0 = new Double(378);
assertEquals(378.0, (double)double0, 0.01);
assertNotNull(double0);

Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
assertNotNull(pair0);

boolean boolean0 = linkedList1.add(pair0);
assertTrue(boolean0);
assertTrue(linkedList1.contains(pair0));
assertEquals(1, linkedList1.size());

DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
assertNotNull(discreteDistribution0);
assertTrue(linkedList1.contains(pair0));
assertEquals(1, linkedList1.size());

Double double1 = new Double(0.3329153982506692);
assertEquals(0.3329153982506692, (double)double1, 0.01);
assertNotNull(double1);
assertNotEquals((double)double1, (double)double0, 0.01);

Integer integer1 = new Integer((-3272));
assertEquals((-3272), (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer((-3272));
assertEquals((-3272), (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
assertNotNull(pair1);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertNotEquals((double)double1, (double)double0, 0.01);
assertFalse(pair1.equals((Object)pair0));

Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer2, double1);
assertNotNull(pair2);
assertNotEquals((double)double1, (double)double0, 0.01);
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));
assertFalse(pair2.equals((Object)pair1));
assertFalse(pair2.equals((Object)pair0));

boolean boolean1 = linkedList1.add(pair1);
assertTrue(boolean1);
assertFalse(linkedList1.contains(pair2));
assertTrue(linkedList1.contains(pair0));
assertEquals(2, linkedList1.size());
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertNotEquals((double)double1, (double)double0, 0.01);
assertFalse(pair1.equals((Object)pair2));
assertFalse(pair1.equals((Object)pair0));
assertTrue(boolean1 == boolean0);
assertNotSame(pair1, pair2);
assertNotSame(pair1, pair0);

DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
assertNotNull(discreteDistribution1);
assertFalse(linkedList1.contains(pair2));
assertTrue(linkedList1.contains(pair0));
assertEquals(2, linkedList1.size());
assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));

Well44497b well44497b0 = new Well44497b((long) 378);
assertNotNull(well44497b0);

int[] intArray0 = new int[5];
intArray0[0] = (-3272);
intArray0[1] = (-1388);
intArray0[2] = 3025;
intArray0[3] = (-3272);
intArray0[4] = 378;
ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
assertNotNull(iSAACRandom0);
assertEquals(5, intArray0.length);
assertArrayEquals(new int[] {(-3272), (-1388), 3025, (-3272), 378}, intArray0);

DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList1);
assertNotNull(discreteDistribution2);
assertEquals(5, intArray0.length);
assertFalse(linkedList1.contains(pair2));
assertTrue(linkedList1.contains(pair0));
assertEquals(2, linkedList1.size());
assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
assertArrayEquals(new int[] {(-3272), (-1388), 3025, (-3272), 378}, intArray0);

List<Pair<Integer, Double>> list0 = discreteDistribution2.getSamples();
assertNotNull(list0);
assertEquals(5, intArray0.length);
assertFalse(linkedList1.contains(pair2));
assertTrue(linkedList1.contains(pair0));
assertFalse(list0.contains(pair0));
assertEquals(2, linkedList1.size());
assertFalse(list0.isEmpty());
assertEquals(2, list0.size());
assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
assertArrayEquals(new int[] {(-3272), (-1388), 3025, (-3272), 378}, intArray0);
assertNotSame(discreteDistribution2, discreteDistribution0);
assertNotSame(discreteDistribution2, discreteDistribution1);

discreteDistribution1.sample(2144768750);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'DiscreteDistribution_ESTest' to results/Math-8/org.apache.commons.math3.distribution.DiscreteDistribution/BBC-F0/tests/1
* Done!

* Computation finished
