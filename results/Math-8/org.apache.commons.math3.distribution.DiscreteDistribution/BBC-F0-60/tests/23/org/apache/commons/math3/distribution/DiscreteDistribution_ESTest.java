/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:45:07 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.71);
      Double double1 = new Double(1.1863701343536377);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1259.67061);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)80);
      Double double1 = new Double(1259.67061);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      linkedList1.add(pair0);
      linkedList1.offerLast(pair0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(jDKRandomGenerator0, linkedList1);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample(2582);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(jDKRandomGenerator0, list0);
      Byte byte1 = new Byte((byte)80);
      discreteDistribution1.probability(byte1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList3 = new LinkedList<Pair<Byte, Double>>();
      linkedList3.offerLast(pair0);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(jDKRandomGenerator0, linkedList1);
      List<Pair<Byte, Double>> list1 = new LinkedList<Pair<Byte, Double>>();
      int int0 = 1032;
      discreteDistribution0.sample(1032);
      DiscreteDistribution<Double> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Byte byte0 = new Byte((byte)12);
      Double double0 = Double.valueOf((double) (byte)12);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double0);
      linkedList1.offerLast(pair0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.9851491409354725);
      Double double1 = new Double(0.9851491409354725);
      Double double2 = new Double(0.9851491409354725);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double3 = new Double(4501.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double3);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.probability((Double) null);
      System.setCurrentTimeMillis((-423L));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)8);
      Double double0 = new Double((byte)8);
      Double double1 = new Double(0.4337083101272583);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      Double double2 = new Double(0.9044922937289803);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>((Byte) null, double2);
      linkedList0.offerLast(pair2);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      linkedList0.offerLast(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample(276);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Double double2 = new Double(1.0);
      Double double3 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(1);
      discreteDistribution0.sample();
      System.setCurrentTimeMillis((-5250L));
      Double double4 = new Double((-5250L));
      discreteDistribution0.probability(double4);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 5671;
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-3));
      Double double0 = new Double(1810.8669117);
      Byte byte1 = new Byte((byte) (-3));
      Double double1 = new Double(5671);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double1);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte0, double1);
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.offerLast(pair3);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 280;
      intArray0[1] = 276;
      intArray0[2] = 280;
      intArray0[3] = 5671;
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-3));
      Double double0 = new Double(0.9044922937289803);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      discreteDistribution0.sample(1006);
      discreteDistribution1.probability((Byte) null);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("OT1/\":l-$\"$q'<68<", double0);
      Double double1 = new Double(1765.01);
      Double double2 = new Double(1.0);
      Double double3 = new Double(1.0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double2);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair2);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      Double[] doubleArray0 = discreteDistribution1.sample(1);
      assertEquals(1, doubleArray0.length);
      
      discreteDistribution0.sample();
      System.setCurrentTimeMillis((-5250L));
      List<Pair<Double, Double>> list0 = discreteDistribution1.getSamples();
      assertFalse(list0.contains(pair1));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      int[] intArray0 = new int[5];
      intArray0[0] = 1471;
      intArray0[1] = 1006;
      intArray0[3] = 1004;
      intArray0[4] = 5671;
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-3));
      Double double0 = new Double(0);
      Double double1 = new Double(1006);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList1.offerLast(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList1);
      // Undeclared exception!
      discreteDistribution0.sample(5671);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 280;
      intArray0[1] = 276;
      intArray0[2] = 1006;
      intArray0[3] = 5671;
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-3));
      Double double0 = new Double(0.9044922937289803);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      discreteDistribution0.sample(1006);
      discreteDistribution0.probability(byte0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      int int0 = 5671;
      Well44497a well44497a0 = new Well44497a((int[]) null);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)33);
      Double double0 = new Double(0.16951410569805692);
      Byte byte1 = new Byte((byte)33);
      Double double1 = new Double((byte) (-3));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double1);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList1.offerLast(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("OT1/\":l-$\"$q'<68<", double0);
      Double double1 = new Double(1765.01);
      Double double2 = new Double(1.0);
      Double double3 = new Double(1.0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double2, double3);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-2026L));
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(3202L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("9`0xk!in", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      Well19937c well19937c0 = (Well19937c)discreteDistribution0.random;
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList1);
      discreteDistribution1.sample();
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Short>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("OT1/\":l-$\"$q'<68<", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      Well19937c well19937c0 = (Well19937c)discreteDistribution0.random;
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList0);
      discreteDistribution1.sample();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Short>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("9`0xk!in", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      int int0 = (-274);
      discreteDistribution0.sample(730);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3334);
      intArray0[2] = 3592;
      intArray0[3] = 2254;
      intArray0[4] = (-1);
      intArray0[5] = 2047;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      mersenneTwister0.nextGaussian();
      Double double0 = new Double(1765.01);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 48L;
      Well44497b well44497b0 = new Well44497b(48L);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long1 = new Long(48L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, (Double) null);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int0 = 497;
      MersenneTwister mersenneTwister0 = new MersenneTwister(497);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.valueOf(239);
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("OT1/\":l-$\"$q'<68<", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      try { 
        discreteDistribution0.sample((-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-274)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 162;
      Well19937a well19937a0 = new Well19937a(162);
      int[] intArray0 = new int[3];
      intArray0[0] = 162;
      intArray0[1] = 162;
      intArray0[2] = 162;
      well19937a0.setSeed(intArray0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-1307.81143));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,307.811 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
