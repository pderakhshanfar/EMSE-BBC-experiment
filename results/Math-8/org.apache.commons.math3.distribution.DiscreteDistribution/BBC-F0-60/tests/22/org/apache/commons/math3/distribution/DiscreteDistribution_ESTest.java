/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:44:41 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int0 = 0;
      Short short0 = new Short((short)1079);
      Double double0 = new Double(0.48167478207424597);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, double0);
      linkedList0.add(0, pair0);
      Double double1 = new Double(0.6293749075380366);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(linkedList0, double1);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2583);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Short
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.891096614733144);
      Double double1 = new Double(0.891096614733144);
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, (Double) null);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      Double double2 = new Double(Float.POSITIVE_INFINITY);
      Pair<Pair<Float, Double>, Double> pair2 = new Pair<Pair<Float, Double>, Double>(pair1, double2);
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Float, Double>>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      linkedList2.retainAll(linkedList0);
      Short short0 = new Short((short)1);
      Double double0 = new Double(318.455733972738);
      Double double1 = new Double(0.8903733319805078);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double1);
      linkedList2.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      linkedList1.add((Object) short0);
      discreteDistribution0.reseedRandomGenerator((-1732L));
      discreteDistribution0.probability(linkedList1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList2);
      int int0 = 1720;
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.5514424149506953);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability(double0);
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(1664525L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.44673841911771484);
      linkedList2.retainAll(linkedList0);
      Short short0 = new Short((short) (-18));
      Float float0 = new Float(318.455733972738);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, (Double) null);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.20478684009466996);
      Pair<Pair<Float, Double>, Double> pair1 = new Pair<Pair<Float, Double>, Double>(pair0, double2);
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList3 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      linkedList3.add(pair1);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Double>>(linkedList3);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(1664L);
      discreteDistribution0.sample(3355);
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList4 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution1 = new DiscreteDistribution<Pair<Float, Double>>(linkedList3);
      discreteDistribution0.sample(3355);
      LinkedList<Pair<String, Double>> linkedList5 = new LinkedList<Pair<String, Double>>();
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      // Undeclared exception!
      discreteDistribution0.sample(3355);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(0.9158416207502134);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      long long0 = 0L;
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(1.633123935319537E16);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.reseedRandomGenerator(0L);
      double double1 = discreteDistribution0.probability((Object) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      Float float0 = new Float(713.75F);
      Pair<Float, Double> pair0 = (Pair<Float, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, (Double) null);
      Double double0 = new Double(364.533);
      Pair<Pair<Float, Double>, Double> pair2 = new Pair<Pair<Float, Double>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Double>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      UnaryOperator<Pair<Pair<Float, Double>, Double>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      discreteDistribution0.reseedRandomGenerator(9218868437227405312L);
      int int0 = (-738540384);
      try { 
        discreteDistribution0.sample((-738540384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-738,540,384)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1063.73817879);
      Double double1 = new Double(0.44673841911771484);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList2.add(pair0);
      linkedList2.retainAll(linkedList0);
      Double double2 = new Double(318.455733972738);
      Double double3 = new Double(0.0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double0, double3);
      linkedList2.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      discreteDistribution0.reseedRandomGenerator((short) (-18));
      discreteDistribution0.probability((Object) null);
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-55);
      Byte byte1 = new Byte((byte) (-55));
      Double double0 = new Double(0.04972941688382582);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.push(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      linkedList2.retainAll(linkedList0);
      Short short0 = new Short((short)1);
      Double double0 = new Double(318.455733972738);
      Double double1 = new Double(0.8903733319805078);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double1);
      linkedList2.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      discreteDistribution0.reseedRandomGenerator((-1732L));
      discreteDistribution0.probability(linkedList1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList2);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(1720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Short short0 = new Short((short) (-1886));
      Double double0 = new Double(318.455733972738);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      Well19937a well19937a0 = new Well19937a((int) (short) (-1886));
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(well19937a0, (List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      Float float0 = new Float(2069.5005F);
      Double double0 = new Double(2069.5005F);
      Pair<Float, Double> pair0 = (Pair<Float, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(pair0).getKey();
      doReturn(double0).when(pair0).getValue();
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      Double double1 = new Double(364.53273486);
      Pair<Pair<Float, Double>, Double> pair2 = new Pair<Pair<Float, Double>, Double>(pair1, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Double>>(linkedList0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(16);
      Double double2 = new Double(16);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer0, double2);
      Pair<Integer, Double> pair4 = new Pair<Integer, Double>(pair3);
      linkedList1.add(pair4);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution1.getSamples();
      Well44497b well44497b0 = new Well44497b(2208);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(well44497b0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      iSAACRandom0.nextInt();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2.220446049250313E-16);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(iSAACRandom0, linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Short short0 = new Short((short) (-1886));
      Double double0 = new Double(318.455733972738);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((short) (-1886));
      discreteDistribution0.probability(linkedList0);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-1.0));
      Pair<String, Double> pair0 = new Pair<String, Double>("FACTORIAL_NEGATIVE_PARAMETER", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      Pair<Float, Double> pair0 = (Pair<Float, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      Double double0 = new Double(364.53273486);
      Pair<Pair<Float, Double>, Double> pair2 = new Pair<Pair<Float, Double>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Double>>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0L);
      List<Pair<Double, Double>> list0 = null;
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(1153.63549);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      Double double1 = new Double(0.6816387176513672);
      Pair<Pair<Float, Double>, Double> pair3 = new Pair<Pair<Float, Double>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Double>>(linkedList1);
      Pair<Float, Double>[] pairArray0 = discreteDistribution0.sample(162);
      assertEquals(162, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Short short0 = new Short((short) (-1886));
      Double double0 = new Double(318.455733972738);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((short) (-1886));
      discreteDistribution0.probability(linkedList0);
      try { 
        discreteDistribution0.sample((int) (short) (-1886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,886)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0L);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Pair<Short, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Short, Object>, Double>>();
      Pair<Short, Float> pair0 = (Pair<Short, Float>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Short, Object> pair1 = new Pair<Short, Object>(pair0);
      Double double0 = new Double(0.5);
      Pair<Pair<Short, Object>, Double> pair2 = new Pair<Pair<Short, Object>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Short, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Short, Object>>(linkedList0);
      try { 
        discreteDistribution0.sample((-1640531527));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,640,531,527)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-3920);
      Integer integer0 = new Integer((-3920));
      Double double0 = new Double((-3920));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,920 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 33;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1223;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1974;
      intArray0[7] = (-868);
      intArray0[8] = 3686;
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
