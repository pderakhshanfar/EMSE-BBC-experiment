/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:50:02 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-2338));
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      Integer integer0 = new Integer((-195));
      Pair<Long, Integer> pair0 = (Pair<Long, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Long, Integer> pair1 = new Pair<Long, Integer>(pair0);
      Double double0 = new Double(314.6205575192132);
      Pair<Pair<Long, Integer>, Double> pair2 = new Pair<Pair<Long, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Long, Integer>>(well44497a0, linkedList0);
      try { 
        discreteDistribution0.sample((-195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-195)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-3049));
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float((float) (-3049));
      Double double0 = new Double(0.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-2338));
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      Integer integer0 = new Integer((-195));
      Pair<Long, Integer> pair0 = (Pair<Long, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Long, Integer> pair1 = new Pair<Long, Integer>(pair0);
      Double double0 = new Double(314.6205575192132);
      Pair<Pair<Long, Integer>, Double> pair2 = new Pair<Pair<Long, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Long, Integer>>(well44497a0, linkedList0);
      Pair<Long, Integer> pair3 = discreteDistribution0.sample();
      assertFalse(pair3.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-743037523));
      Long long0 = new Long((-743037523));
      Pair<Long, Integer> pair0 = new Pair<Long, Integer>(long0, integer0);
      Double double0 = new Double(4248.8);
      Pair<Pair<Long, Integer>, Double> pair1 = new Pair<Pair<Long, Integer>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      linkedList0.add(pair1);
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Long, Integer>>(well44497a0, linkedList0);
      discreteDistribution0.sample(1487);
      // Undeclared exception!
      discreteDistribution0.sample(3686);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1546.813);
      Pair<Pair<Long, Integer>, Double> pair0 = new Pair<Pair<Long, Integer>, Double>((Pair<Long, Integer>) null, double0);
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      linkedList0.add(pair0);
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Long, Integer>>(well44497a0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(52.17014218069);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2.8205478404420643);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(7L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-1413.2F));
      Double double0 = new Double((-1413.2F));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,413.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double double1 = discreteDistribution0.sample();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-2338));
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      Integer integer0 = new Integer((-195));
      Pair<Long, Integer> pair0 = (Pair<Long, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Long, Integer> pair1 = new Pair<Long, Integer>(pair0);
      Double double0 = new Double(314.6205575192132);
      Pair<Pair<Long, Integer>, Double> pair2 = new Pair<Pair<Long, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Long, Integer>>(well44497a0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(jDKRandomGenerator0, linkedList0);
      Double[] doubleArray0 = discreteDistribution0.sample(1541);
      assertEquals(1541, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2080.397401283166);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double double1 = discreteDistribution0.sample();
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(jDKRandomGenerator0, linkedList0);
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double double1 = new Double(0.38405120184851027);
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(1906);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability(double0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2080.397401283166);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pair<Long, Integer> pair0 = new Pair<Long, Integer>((Long) null, (Integer) null);
      Double double0 = new Double((-1.0));
      Pair<Pair<Long, Integer>, Double> pair1 = new Pair<Pair<Long, Integer>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      linkedList0.add(pair1);
      Well512a well512a0 = new Well512a(6);
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Long, Integer>>(well512a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(203L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
