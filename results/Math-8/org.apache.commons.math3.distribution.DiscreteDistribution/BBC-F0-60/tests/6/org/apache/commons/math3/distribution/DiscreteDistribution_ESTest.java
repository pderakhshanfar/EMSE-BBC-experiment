/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:20:33 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.41475414769583385);
      Pair<String, Double> pair0 = new Pair<String, Double>("A,I`dy #", double0);
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(list0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair2);
      Byte byte0 = new Byte((byte) (-11));
      Pair<Object, Double> pair3 = new Pair<Object, Double>(byte0, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample(341);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Byte
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(225.146923904);
      Double double1 = new Double(225.146923904);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = new Pair<String, Double>("GV 1_6'Jj-OX@N$Qe~", double0);
      linkedList1.add(pair0);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      linkedList2.removeLastOccurrence(linkedList0);
      Long long0 = new Long(0L);
      linkedList2.removeFirstOccurrence(long0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability("");
      discreteDistribution0.sample(4032);
      System.setCurrentTimeMillis(2047L);
      LinkedList<Pair<Pair<Double, String>, Double>> linkedList3 = new LinkedList<Pair<Pair<Double, String>, Double>>();
      LinkedList<Pair<Pair<String, String>, Double>> linkedList4 = new LinkedList<Pair<Pair<String, String>, Double>>();
      DiscreteDistribution<Pair<String, String>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<String, String>>(linkedList4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Double double0 = Double.valueOf(1.0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      discreteDistribution0.probability((String) null);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.596041646520109);
      Double double1 = new Double(1095.752398842);
      Double double2 = new Double(2144.47694173335);
      Double double3 = new Double(0.596041646520109);
      Double double4 = new Double(0.596041646520109);
      Double double5 = new Double(0.8240564334234337);
      Pair<String, Double> pair0 = new Pair<String, Double>("2!4/D0lp<`W6^^?", double5);
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c();
      Double double6 = new Double(0.11804397708106462);
      Double double7 = new Double(0.8980583878370509);
      Pair<String, Double> pair1 = new Pair<String, Double>("A~<Y", double7);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(3050L);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution1.sample(166154103);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.596041646520109);
      Double double1 = new Double(355.0);
      Double double2 = new Double(0.9334745762333072);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double2);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-521L));
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-521L));
      discreteDistribution0.probability((String) null);
      discreteDistribution0.reseedRandomGenerator(0L);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(mersenneTwister0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 413;
      intArray0[2] = 0;
      intArray0[3] = 1839;
      intArray0[4] = (-2634);
      intArray0[5] = (-1);
      intArray0[6] = 2625;
      intArray0[7] = 1575;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Pair<String, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Double>, Double>>();
      Double double0 = new Double(1);
      Pair<Pair<String, Double>, Double> pair0 = new Pair<Pair<String, Double>, Double>((Pair<String, Double>) null, double0);
      linkedList0.add(pair0);
      linkedList0.toArray();
      mersenneTwister0.nextInt();
      DiscreteDistribution<Pair<String, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Double>>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 413;
      intArray0[2] = 0;
      intArray0[3] = 1839;
      intArray0[6] = 2625;
      intArray0[7] = 1575;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Pair<String, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Double>, Double>>();
      Double double0 = new Double(1);
      Pair<Pair<String, Double>, Double> pair0 = new Pair<Pair<String, Double>, Double>((Pair<String, Double>) null, double0);
      linkedList0.add(pair0);
      linkedList0.toArray();
      mersenneTwister0.nextInt();
      DiscreteDistribution<Pair<String, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Double>>(mersenneTwister0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1679.0434256);
      Double double1 = new Double(0.6057250986957559);
      Pair<String, Double> pair0 = new Pair<String, Double>("m", double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double2 = new Double(221.96267272061897);
      Pair<String, Double> pair1 = new Pair<String, Double>("N!VO?l=Fn", double2);
      linkedList1.add(pair1);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(3106L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("|p[r", "|p[r");
      Double double0 = new Double(1.1974215507507324);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair1);
      Double double1 = new Double(1.1974215507507324);
      Double double2 = new Double(1095.752398842);
      Double double3 = new Double((-1815.342466233589));
      Double double4 = new Double(1095.752398842);
      Pair<String, Double> pair2 = new Pair<String, Double>("|p[r", double4);
      Double double5 = new Double(0.041666666666666664);
      Pair<String, Double> pair3 = new Pair<String, Double>("A~<Y", double5);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair3);
      Well44497b well44497b0 = new Well44497b();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList2);
      discreteDistribution0.reseedRandomGenerator(2843L);
      System.setCurrentTimeMillis(0L);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList2);
      discreteDistribution1.sample(99);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(214.237886);
      Double double1 = new Double(0.7249995199969751);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double1);
      linkedList0.push(pair1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double2 = new Double(0.596041646520109);
      Double double3 = new Double(1095.752398842);
      Double double4 = new Double(2144.47694173335);
      Pair<String, Double> pair2 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double4);
      Pair<String, Double> pair3 = new Pair<String, Double>("A~<Y", double3);
      linkedList1.add(pair3);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
      discreteDistribution0.reseedRandomGenerator((-899L));
      System.setCurrentTimeMillis((-899L));
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
      discreteDistribution1.sample(222);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("Conversion Exception in Transformation: {0}", "");
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Pair<String, String> pair2 = new Pair<String, String>(pair1);
      Double double0 = new Double(3.4439717236742845E-8);
      Pair<Pair<String, String>, Double> pair3 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair3);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(1.1974215507507324);
      Double double2 = new Double(0.5296054477019876);
      Pair<String, Double> pair4 = new Pair<String, Double>((String) null, double2);
      linkedList2.add(pair4);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList2);
      discreteDistribution0.reseedRandomGenerator((-899L));
      System.setCurrentTimeMillis((-899L));
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(704);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Double double0 = new Double(0.3672223220819453);
      Double double1 = new Double(0.49354404448029365);
      Pair<String, String> pair0 = new Pair<String, String>("org.apache.commons.math3.distribution.DiscreteDistribution", "org.apache.commons.math3.distribution.DiscreteDistribution");
      Double double2 = new Double(214.237886);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double2);
      linkedList0.push(pair1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double3 = new Double(214.237886);
      Double double4 = new Double(0.49354404448029365);
      Double double5 = new Double(0.3672223220819453);
      Double double6 = new Double((-686.9874572590809));
      Pair<String, Double> pair2 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double6);
      Pair<String, Double> pair3 = new Pair<String, Double>((String) null, double2);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -686.987 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.math3.distribution.DiscreteDistribution").when(pair0).getKey();
      doReturn("org.apache.commons.math3.distribution.DiscreteDistribution").when(pair0).getValue();
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Double double0 = new Double(214.237886);
      Pair<Pair<String, String>, Double> pair2 = new Pair<Pair<String, String>, Double>(pair1, double0);
      linkedList0.push(pair2);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.5296054477019876);
      Pair<String, Double> pair3 = new Pair<String, Double>("", double2);
      linkedList1.add(pair3);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
      discreteDistribution0.reseedRandomGenerator((-899L));
      System.setCurrentTimeMillis(2650L);
      try { 
        discreteDistribution0.sample((-818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-818)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("", "1jl3%g_T/1h6z");
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Pair<String, String> pair2 = new Pair<String, String>(pair1);
      Double double0 = new Double(214.237886);
      Pair<Pair<String, String>, Double> pair3 = new Pair<Pair<String, String>, Double>(pair1, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair3);
      linkedList1.sort((Comparator<? super Pair<Pair<String, String>, Double>>) null);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
      DiscreteDistribution<Pair<String, String>> discreteDistribution1 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
      try { 
        discreteDistribution0.sample((-795243036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-795,243,036)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Double double0 = new Double(1.1974215507507324);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      linkedList1.push(pair1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      linkedList1.sort(comparator1);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.iterator();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.596041646520109);
      Double double1 = new Double(1095.752398842);
      Double double2 = new Double(2144.47694173335);
      Pair<String, Double> pair0 = new Pair<String, Double>("A~<Y", double1);
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-521L));
      Double double3 = new Double(0.24255358357360302);
      Pair<String, Double> pair1 = new Pair<String, Double>("%U0lKHk*[K", double3);
      linkedList0.add(pair1);
      discreteDistribution0.reseedRandomGenerator(2165L);
      System.setCurrentTimeMillis(2165L);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution1.sample(3358);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("ju", "ju");
      Double double0 = new Double(77.8);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair1);
      linkedList1.sort((Comparator<? super Pair<Pair<String, String>, Double>>) null);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
      discreteDistribution0.getSamples();
      Pair<String, String> pair2 = new Pair<String, String>("ju", "");
      discreteDistribution0.reseedRandomGenerator(0L);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Double double0 = new Double(1.1974215507507324);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(0L);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("[EKV").when(pair0).getKey();
      doReturn("CONVERGENCE_FAILED").when(pair0).getValue();
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Double double0 = new Double(214.237886);
      Pair<Pair<String, String>, Double> pair2 = new Pair<Pair<String, String>, Double>(pair1, double0);
      linkedList0.push(pair2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(0L);
      DiscreteDistribution<Pair<String, String>> discreteDistribution1 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(0L);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(1.0);
      Pair<String, Double> pair3 = new Pair<String, Double>("'o^", double1);
      linkedList1.add(pair3);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
      discreteDistribution2.reseedRandomGenerator(0L);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Double double0 = new Double(214.237886);
      Pair<Pair<String, String>, Double> pair2 = new Pair<Pair<String, String>, Double>(pair1, double0);
      linkedList0.push(pair2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      discreteDistribution0.sample();
      long long0 = 0L;
      discreteDistribution0.reseedRandomGenerator(0L);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("}`8^]9z<T\"K>;u}c#<W", "");
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Double double0 = new Double(214.237886);
      Double double1 = new Double(214.237886);
      Pair<Pair<String, String>, Double> pair2 = new Pair<Pair<String, String>, Double>(pair0, double1);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList1.push(pair2);
      linkedList1.sort((Comparator<? super Pair<Pair<String, String>, Double>>) null);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
      discreteDistribution0.sample();
      long long0 = (-1441L);
      discreteDistribution0.reseedRandomGenerator((-1441L));
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Double double0 = null;
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short1, (Double) null);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      Double double1 = new Double(0.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double1);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      Double double2 = new Double((-1096.266));
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double2);
      linkedList0.offer(pair2);
      linkedList0.poll();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,096.266 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 3833;
      Integer integer0 = new Integer(3833);
      Double double0 = new Double(3833);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      Well1024a well1024a0 = new Well1024a(0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)180);
      Double double0 = new Double(0.0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.offer(pair1);
      well1024a0.nextDouble();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
