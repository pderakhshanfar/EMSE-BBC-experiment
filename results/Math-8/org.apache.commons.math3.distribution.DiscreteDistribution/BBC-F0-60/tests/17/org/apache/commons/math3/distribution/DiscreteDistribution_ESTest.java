/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:37:57 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(81.64087868519219);
      Pair<String, Double> pair0 = new Pair<String, Double>("z", double0);
      linkedList0.add(pair0);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(68.74910325177825);
      Double double1 = new Double(68.74910325177825);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample();
      double double2 = discreteDistribution0.probability("");
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(69.03822815186534);
      Pair<String, Double> pair0 = new Pair<String, Double>("4", double0);
      linkedList1.add(pair0);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)10592;
      Short short1 = new Short((short)29232);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double0);
      linkedList2.add(pair1);
      Short short2 = new Short((short)10592);
      Double double1 = new Double((short)10592);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(short2, double1);
      linkedList2.add(pair2);
      Well19937c well19937c0 = new Well19937c(1205L);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well19937c0, linkedList2);
      // Undeclared exception!
      discreteDistribution0.sample((int) (short)10592);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1453L);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(636);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1453L);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      String[] stringArray0 = discreteDistribution0.sample(1036);
      assertEquals(1036, stringArray0.length);
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1453L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1453L);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.probability("zU!qj-F");
      Random.setNextRandom(1434);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1453L);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList1.add(pair2);
      String[] stringArray0 = discreteDistribution0.sample(74);
      assertEquals(74, stringArray0.length);
      
      double double1 = discreteDistribution0.probability("");
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1794);
      Integer integer0 = new Integer((-1794));
      Double double0 = new Double(3.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(965.05);
      Pair<String, Double> pair1 = new Pair<String, Double>("w00dlxK^E>", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(909);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer((-56219678));
      Double double0 = new Double(2203.027790136179);
      Integer integer1 = new Integer(273);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      Integer integer2 = new Integer(2604);
      Double double1 = Double.valueOf((-2529.94));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer2, double1);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      Double double2 = new Double((-56219678));
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      System.setCurrentTimeMillis((-56219678));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1453L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1453L);
      Double double1 = new Double(211.326195);
      Pair<String, Double> pair0 = new Pair<String, Double>("U=]-C}z{I?zXQY}Vf~M", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Double double2 = new Double(0.6138721263175002);
      Pair<String, Double> pair2 = new Pair<String, Double>("U=]-C}z{I?zXQY}Vf~M", double2);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(922);
      String string0 = discreteDistribution0.sample();
      assertEquals("U=]-C}z{I?zXQY}Vf~M", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1794));
      Double double0 = new Double(3.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      Double double1 = new Double(3.0);
      Pair<String, Double> pair1 = new Pair<String, Double>("PnC~.G,<D:iDI9rw", double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      try { 
        discreteDistribution1.sample((-1794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,794)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(3044);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(3044);
      Double double0 = new Double(0.8433274774691686);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1794));
      Double double0 = new Double(3.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1794));
      discreteDistribution0.getSamples();
      int int0 = 0;
      Well512a well512a0 = new Well512a(0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      System.setCurrentTimeMillis(0);
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well512a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1453L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1453L);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      String[] stringArray0 = discreteDistribution0.sample(939);
      assertEquals(939, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1794));
      Double double0 = new Double(3.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      int int0 = 0;
      Well512a well512a0 = new Well512a(0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well512a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(14);
      Double double0 = new Double((-501.6302));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -501.63 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      int int0 = (-2399);
      well44497a0.setSeed((-2399));
      well44497a0.nextInt();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-2399));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,399 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(20.044494475021974);
      int int0 = 306;
      Integer integer0 = new Integer(306);
      Double double0 = new Double(3.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well19937a well19937a0 = new Well19937a(2699L);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      SynchronizedRandomGenerator synchronizedRandomGenerator1 = new SynchronizedRandomGenerator(well19937a0);
      synchronizedRandomGenerator1.setSeed(306);
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3223;
      intArray0[1] = 3144;
      intArray0[2] = (-3114);
      intArray0[3] = 1;
      intArray0[4] = 192;
      intArray0[5] = 1;
      intArray0[6] = (-377);
      intArray0[7] = 2879;
      intArray0[8] = 0;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      List<Pair<Object, Double>> list0 = null;
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(iSAACRandom0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = Double.valueOf(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
