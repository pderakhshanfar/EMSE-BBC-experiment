/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:15:52 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.7626505639519077);
      assertNotNull(double0);
      assertEquals(0.7626505639519077, (double)double0, 0.01);
      
      Double double1 = new Double(0.7626505639519077);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.7626505639519077, (double)double1, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("4", double1);
      assertNotNull(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertEquals(2, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean1);
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(pair1));
      
      boolean boolean2 = linkedList1.add(pair1);
      assertEquals(1, linkedList1.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair1));
      assertTrue(boolean2);
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.contains(pair1));
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      
      Object[] objectArray0 = discreteDistribution0.sample(462);
      assertEquals(2, linkedList0.size());
      assertEquals(462, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      Random.setNextRandom(56);
      System.setCurrentTimeMillis(56);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Well19937a well19937a0 = new Well19937a(intArray1);
      assertEquals(1, intArray1.length);
      assertNotNull(well19937a0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray1);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte) (-94));
      assertNotNull(byte0);
      assertEquals((byte) (-94), (byte)byte0);
      
      Double double0 = new Double(0.5738146906005355);
      assertNotNull(double0);
      assertEquals(0.5738146906005355, (double)double0, 0.01);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      String string0 = "";
      Double double1 = new Double(59);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(59.0, (double)double1, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>("", double1);
      assertNotNull(pair2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      assertNotNull(pair3);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair1));
      
      boolean boolean1 = linkedList0.add(pair3);
      assertEquals(2, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair3, pair1);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.add(pair3);
      assertEquals(3, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(pair3, pair1);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean2);
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertEquals(3, linkedList1.size());
      assertEquals(3, linkedList0.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      boolean boolean3 = linkedList0.add(pair3);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair1));
      assertNotSame(pair3, pair1);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean3);
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertEquals(4, linkedList2.size());
      assertEquals(4, linkedList0.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      assertEquals(4, linkedList0.size());
      assertEquals(1, intArray1.length);
      assertNotNull(discreteDistribution0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray1);
      assertTrue(linkedList0.contains(pair1));
      
      boolean boolean4 = linkedList0.removeLastOccurrence(well19937a0);
      assertEquals(4, linkedList0.size());
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(boolean4);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(4, linkedList0.size());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, intArray1.length);
      assertNotNull(list0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(4, linkedList0.size());
      assertNotNull(discreteDistribution1);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList0.contains(pair1));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2616);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1127.7156563786);
      assertNotNull(double0);
      assertEquals(1127.7156563786, (double)double0, 0.01);
      
      Double double1 = new Double(0.8832869497670701);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8832869497670701, (double)double1, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("c", double1);
      assertNotNull(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair1));
      
      boolean boolean0 = linkedList1.add(pair1);
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(linkedList1.contains(pair1));
      assertTrue(boolean0);
      
      Object object0 = null;
      Double double2 = new Double(1127.7156563786);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double2, 0.01);
      
      Pair<Object, Double> pair2 = new Pair<Object, Double>((Object) null, double2);
      assertNotNull(pair2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      
      boolean boolean1 = linkedList1.add(pair2);
      assertEquals(2, linkedList1.size());
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair2, pair1);
      assertTrue(linkedList1.contains(pair1));
      assertTrue(boolean1);
      
      LinkedList linkedList2 = (LinkedList)linkedList1.clone();
      assertEquals(2, linkedList1.size());
      assertEquals(2, linkedList2.size());
      assertNotNull(linkedList2);
      assertTrue(linkedList1.contains(pair1));
      
      boolean boolean2 = linkedList1.add(pair2);
      assertEquals(3, linkedList1.size());
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(pair2, pair1);
      assertTrue(linkedList1.contains(pair1));
      assertTrue(boolean2);
      
      LinkedList linkedList3 = (LinkedList)linkedList1.clone();
      assertEquals(3, linkedList1.size());
      assertEquals(3, linkedList3.size());
      assertNotNull(linkedList3);
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertNotSame(linkedList3, linkedList2);
      assertTrue(linkedList1.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      assertEquals(3, linkedList1.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList1.contains(pair1));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.6863644858353171);
      assertNotNull(double0);
      assertEquals(0.6863644858353171, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair0));
      
      Iterator<Pair<String, Double>> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean0);
      
      Well19937a well19937a1 = new Well19937a();
      assertNotNull(well19937a1);
      assertFalse(well19937a1.equals((Object)well19937a0));
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      assertNotNull(synchronizedRandomGenerator0);
      assertFalse(well19937a0.equals((Object)well19937a1));
      
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {59}, intArray0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      assertFalse(well19937a0.equals((Object)well19937a1));
      assertTrue(linkedList1.contains(pair0));
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1, linkedList1.size());
      assertFalse(well19937a0.equals((Object)well19937a1));
      assertNotSame(well19937a0, well19937a1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1.0, double1, 0.01);
      
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {59}, intArray0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(59);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean1);
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      boolean boolean2 = linkedList0.add(pair1);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean2);
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      assertEquals(3, linkedList0.size());
      assertEquals(1, intArray0.length);
      assertNotNull(discreteDistribution0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      
      discreteDistribution0.reseedRandomGenerator(1092L);
      assertEquals(3, linkedList0.size());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(3, linkedList0.size());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, intArray0.length);
      assertNotNull(list0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      
      Object[] objectArray0 = discreteDistribution0.sample(3452);
      assertEquals(3, linkedList0.size());
      assertEquals(1, intArray0.length);
      assertEquals(3452, objectArray0.length);
      assertNotNull(objectArray0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      
      Well19937c well19937c0 = new Well19937c(1092L);
      assertNotNull(well19937c0);
      
      System.setCurrentTimeMillis(2873L);
      LinkedList<Pair<Double, Double>> linkedList3 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      
      Well19937c well19937c1 = new Well19937c((-2263L));
      assertNotNull(well19937c1);
      assertFalse(well19937c1.equals((Object)well19937c0));
      
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      assertEquals(0, linkedList4.size());
      assertNotNull(linkedList4);
      assertFalse(linkedList4.contains(59));
      
      Well19937a well19937a1 = new Well19937a();
      assertNotNull(well19937a1);
      assertFalse(well19937a1.equals((Object)well19937a0));
      
      LinkedList<Pair<Object, Double>> linkedList5 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList5.size());
      assertNotNull(linkedList5);
      assertFalse(linkedList5.equals((Object)linkedList0));
      assertFalse(linkedList5.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well19937c1, linkedList0);
      assertEquals(3, linkedList0.size());
      assertNotNull(discreteDistribution1);
      assertFalse(well19937c1.equals((Object)well19937c0));
      assertFalse(linkedList0.equals((Object)linkedList5));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList0.contains(pair1));
      
      String string0 = (String)discreteDistribution1.sample();
      assertEquals(3, linkedList0.size());
      assertNotNull(string0);
      assertFalse(well19937c1.equals((Object)well19937c0));
      assertFalse(linkedList0.equals((Object)linkedList5));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotSame(well19937c1, well19937c0);
      assertNotSame(linkedList0, linkedList5);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals("", string0);
      
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(3, linkedList0.size());
      assertNotNull(discreteDistribution2);
      assertFalse(linkedList0.equals((Object)linkedList5));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertTrue(linkedList0.contains(pair1));
      
      List<Pair<Object, Double>> list1 = discreteDistribution0.getSamples();
      assertEquals(3, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertEquals(1, intArray0.length);
      assertNotNull(list1);
      assertFalse(well19937a0.equals((Object)well19937a1));
      assertFalse(linkedList0.equals((Object)linkedList5));
      assertTrue(list1.equals((Object)list0));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution2));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertArrayEquals(new int[] {59}, intArray0);
      assertNotSame(well19937a0, well19937a1);
      assertNotSame(linkedList0, linkedList5);
      assertNotSame(list1, list0);
      assertNotSame(discreteDistribution0, discreteDistribution2);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list1.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(3, linkedList0.size());
      assertNotNull(discreteDistribution3);
      assertFalse(linkedList0.equals((Object)linkedList5));
      assertFalse(discreteDistribution3.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution3.equals((Object)discreteDistribution2));
      assertFalse(discreteDistribution3.equals((Object)discreteDistribution0));
      assertTrue(linkedList0.contains(pair1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {59}, intArray0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(59);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("U", double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean1);
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      boolean boolean2 = linkedList0.add(pair1);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean2);
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertEquals(3, linkedList0.size());
      assertEquals(3, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      assertEquals(3, linkedList0.size());
      assertEquals(1, intArray0.length);
      assertNotNull(discreteDistribution0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      
      discreteDistribution0.reseedRandomGenerator(1092L);
      assertEquals(3, linkedList0.size());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(3, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(1, intArray0.length);
      assertNotNull(list0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      assertEquals(3, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(1, intArray0.length);
      assertNotNull(discreteDistribution1);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertArrayEquals(new int[] {59}, intArray0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      
      Object[] objectArray0 = discreteDistribution0.sample(3452);
      assertEquals(3, linkedList0.size());
      assertEquals(3452, objectArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(objectArray0);
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertArrayEquals(new int[] {59}, intArray0);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertTrue(linkedList0.contains(pair1));
      
      Well19937c well19937c0 = new Well19937c(1092L);
      assertNotNull(well19937c0);
      
      System.setCurrentTimeMillis(2873L);
      Well19937c well19937c1 = new Well19937c((-2263L));
      assertNotNull(well19937c1);
      assertFalse(well19937c1.equals((Object)well19937c0));
      
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      assertFalse(linkedList3.contains(59));
      
      // Undeclared exception!
      discreteDistribution0.sample(3452);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1127.7156563786);
      assertNotNull(double0);
      assertEquals(1127.7156563786, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(">UoE", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(pair0.equals((Object)pair1));
      assertNotSame(pair0, pair1);
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean0);
      
      Double double1 = new Double(1127.7156563786);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double1, 0.01);
      
      Double double2 = new Double(4306.65);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(4306.65, (double)double2, 0.01);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      assertNotNull(pair2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(pair2));
      
      Double double3 = new Double(1127.7156563786);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double3, 0.01);
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double3);
      assertNotNull(pair3);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      
      boolean boolean1 = linkedList2.add(pair3);
      assertEquals(1, linkedList2.size());
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair3, pair2);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertTrue(boolean1);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList2);
      assertEquals(1, linkedList2.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      
      Double double4 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double4, 0.01);
      
      Double double5 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double5);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double5, 0.01);
      
      Double[] doubleArray0 = discreteDistribution0.sample(2551);
      assertEquals(1, linkedList2.size());
      assertEquals(2551, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList1);
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList1.contains(pair0));
      
      well44497b0.setSeed(2551);
      double double6 = discreteDistribution1.probability((String) null);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      assertEquals(0.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1127.7156563786);
      assertNotNull(double0);
      assertEquals(1127.7156563786, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(">UoE", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(pair0.equals((Object)pair1));
      assertNotSame(pair0, pair1);
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean0);
      
      Double double1 = new Double(1127.7156563786);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double1, 0.01);
      
      Double double2 = new Double(4306.65);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(4306.65, (double)double2, 0.01);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      assertNotNull(pair2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(pair2));
      
      Double double3 = new Double(1127.7156563786);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double3, 0.01);
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double3);
      assertNotNull(pair3);
      assertEquals((double)double0, (double)double3, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      
      boolean boolean1 = linkedList2.add(pair3);
      assertEquals(1, linkedList2.size());
      assertEquals((double)double0, (double)double3, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair3, pair2);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertTrue(boolean1);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList2);
      assertEquals(1, linkedList2.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      
      Double double4 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double4);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double4, 0.01);
      
      Double double5 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double5);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double5, 0.01);
      
      Double[] doubleArray0 = discreteDistribution0.sample(2551);
      assertEquals(1, linkedList2.size());
      assertEquals(2551, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2551;
      intArray0[2] = 2551;
      intArray0[3] = 2551;
      intArray0[4] = 2551;
      intArray0[5] = 2551;
      intArray0[6] = 2551;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 2551, 2551, 2551, 2551, 2551, 2551}, intArray0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      assertEquals(7, intArray0.length);
      assertNotNull(synchronizedRandomGenerator0);
      assertArrayEquals(new int[] {0, 2551, 2551, 2551, 2551, 2551, 2551}, intArray0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, linkedList1);
      assertEquals(1, linkedList1.size());
      assertEquals(7, intArray0.length);
      assertNotNull(discreteDistribution1);
      assertArrayEquals(new int[] {0, 2551, 2551, 2551, 2551, 2551, 2551}, intArray0);
      assertTrue(linkedList1.contains(pair0));
      
      double double6 = discreteDistribution1.probability(">UoE");
      assertEquals(1, linkedList1.size());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 2551, 2551, 2551, 2551, 2551, 2551}, intArray0);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Pair<String, Double>) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double0 = new Double(59);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      Double double1 = new Double(59);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(59.0, (double)double1, 0.01);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      assertNotNull(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair0));
      
      Double double2 = new Double((-2481.239444024659));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2481.239444024659), (double)double2, 0.01);
      
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double2, double2);
      assertNotNull(pair1);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      
      boolean boolean1 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair0.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair0, pair1);
      assertFalse(linkedList1.contains(pair1));
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean1);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      assertFalse(linkedList1.contains(pair1));
      assertTrue(linkedList1.contains(pair0));
      
      Double double3 = discreteDistribution0.sample();
      assertEquals(1, linkedList1.size());
      assertNull(double3);
      assertFalse(linkedList1.contains(pair1));
      assertTrue(linkedList1.contains(pair0));
      
      Double double4 = discreteDistribution0.sample();
      assertEquals(1, linkedList1.size());
      assertNull(double4);
      assertFalse(linkedList1.contains(pair1));
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution1);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertFalse(linkedList1.contains(pair1));
      assertTrue(linkedList1.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1127.7156563786);
      assertNotNull(double0);
      assertEquals(1127.7156563786, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(">UoE", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair1));
      
      boolean boolean0 = linkedList1.add(pair1);
      assertEquals(1, linkedList1.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList1.contains(pair1));
      assertTrue(boolean0);
      
      Double double1 = new Double(1127.7156563786);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double1, 0.01);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, double0);
      assertNotNull(pair2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(pair2));
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double1, double0);
      assertNotNull(pair3);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair3.equals((Object)pair2));
      
      boolean boolean1 = linkedList2.add(pair3);
      assertEquals(1, linkedList2.size());
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair3.equals((Object)pair2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair3, pair2);
      assertTrue(linkedList2.contains(pair2));
      assertTrue(boolean1);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList2);
      assertEquals(1, linkedList2.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList2.contains(pair2));
      
      Double double2 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertTrue(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double2, 0.01);
      
      Double double3 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertTrue(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double3, 0.01);
      
      Double[] doubleArray0 = discreteDistribution0.sample(2551);
      assertEquals(1, linkedList2.size());
      assertEquals(2551, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertTrue(linkedList2.contains(pair2));
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, linkedList1);
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution1);
      assertTrue(linkedList1.contains(pair1));
      
      double double4 = discreteDistribution1.probability("cannot format given object as a fraction number");
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair1));
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = well1024a0.nextBoolean();
      assertFalse(boolean0);
      
      Double double0 = new Double(290.989022);
      assertNotNull(double0);
      assertEquals(290.989022, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean1);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      
      discreteDistribution0.reseedRandomGenerator(1897L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertNull(object0);
      assertTrue(linkedList0.contains(pair1));
      
      System.setCurrentTimeMillis(2089L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1127.7156563786);
      assertNotNull(double0);
      assertEquals(1127.7156563786, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(">UoE", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair1);
      assertEquals(1, linkedList1.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean0);
      
      Double double1 = new Double(1127.7156563786);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1127.7156563786, (double)double1, 0.01);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, double0);
      assertNotNull(pair2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(pair2));
      
      Double double2 = new Double(0.3656458608012456);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.3656458608012456, (double)double2, 0.01);
      
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double1, double2);
      assertNotNull(pair3);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      
      boolean boolean1 = linkedList2.add(pair3);
      assertEquals(1, linkedList2.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair3, pair2);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertTrue(boolean1);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList2);
      assertEquals(1, linkedList2.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      
      Double double3 = discreteDistribution0.sample();
      assertEquals(1, linkedList2.size());
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertTrue(linkedList2.contains(pair3));
      assertFalse(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double3, 0.01);
      
      int int0 = 2551;
      Double double4 = new Double(0.6244001192053279);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(0.6244001192053279, (double)double4, 0.01);
      
      boolean boolean2 = linkedList2.add(pair2);
      assertEquals(2, linkedList2.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double4, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertFalse(pair2.equals((Object)pair3));
      assertNotSame(pair2, pair3);
      assertTrue(linkedList2.contains(pair2));
      assertTrue(boolean2);
      
      Double double5 = discreteDistribution0.sample();
      assertEquals(2, linkedList2.size());
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertTrue(linkedList2.contains(pair2));
      assertEquals(1127.7156563786, (double)double5, 0.01);
      
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList2);
      assertEquals(2, linkedList2.size());
      assertNotNull(discreteDistribution1);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList2.contains(pair2));
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double((-1135.1));
      assertNotNull(double0);
      assertEquals((-1135.1), (double)double0, 0.01);
      
      Double double1 = new Double((-1135.1));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1135.1), (double)double1, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("AS;lcb_g.SQr", double1);
      assertNotNull(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertNotSame(pair0, pair1);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,135.1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(59);
      Pair<String, Double> pair0 = new Pair<String, Double>("U", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.sample();
      int int0 = 3452;
      discreteDistribution1.sample(3452);
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-895.687614));
      Double double1 = new Double(882.73896365503);
      Pair<String, Double> pair0 = new Pair<String, Double>("U", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.push(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(59);
      String[] stringArray0 = discreteDistribution0.sample(59);
      assertEquals(59, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1948.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      try { 
        discreteDistribution0.sample((-1303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,303)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1127.7156563786);
      Pair<String, Double> pair0 = new Pair<String, Double>("AS;lcb_g.SQr", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 59;
      intArray0[0] = 59;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(59);
      Pair<String, Double> pair0 = new Pair<String, Double>("U", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.clone();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      int int1 = 3452;
      discreteDistribution1.sample(3452);
      Well19937c well19937c0 = new Well19937c((-3359L));
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1127.7156563786);
      Pair<String, Double> pair0 = new Pair<String, Double>("AS;lcb_g.SQr", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("$=P", double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      linkedList0.sort(comparator0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1);
      well19937a0.setSeed((long) 1);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      Double double0 = new Double((-1.0));
      Double double1 = new Double(0.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double1);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-379));
      well19937a0.nextLong();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Byte byte0 = new Byte((byte)55);
      Integer integer0 = new Integer(20);
      Double double0 = new Double((-379));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.removeFirstOccurrence(byte0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -379 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 131;
      intArray0[1] = 61;
      intArray0[2] = 838;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-2936L));
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
