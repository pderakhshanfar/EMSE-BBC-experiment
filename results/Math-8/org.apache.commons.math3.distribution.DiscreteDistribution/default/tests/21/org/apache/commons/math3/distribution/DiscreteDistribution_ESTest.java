/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 10:10:56 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(3580);
      assertEquals(3580.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte byte0 = new Byte((byte)81);
      assertEquals((byte)81, (byte)byte0);
      assertNotNull(byte0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.9973776998764723);
      assertEquals(0.9973776998764723, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(5505);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1569.936849575053);
      assertEquals(1569.936849575053, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double0, double0);
      assertFalse(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair1, pair0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(3);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Double
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(2367.14);
      assertEquals(2367.14, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      assertNotNull(synchronizedRandomGenerator0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(synchronizedRandomGenerator0, linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.SynchronizedRandomGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.7552290789909557);
      assertEquals(0.7552290789909557, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(377L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int) (byte)54);
      assertNotNull(mersenneTwister0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      assertNotNull(randomAdaptor0);
      
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(randomAdaptor0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1791);
      assertNotNull(mersenneTwister0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double((byte) (-71));
      assertEquals((-71.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offerLast(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -71 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(3002);
      assertNotNull(well44497a0);
      
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well44497a0, (List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.7552290789909557);
      assertEquals(0.7552290789909557, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-739)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.7552290789909557);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample(5505);
      // Undeclared exception!
      discreteDistribution0.sample(5505);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(324.5215);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList linkedList1 = (LinkedList)discreteDistribution0.sample();
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(324.5215);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.025337052070335542);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      double double1 = discreteDistribution0.probability(double0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(2.9618050962556135E-8);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      double double1 = discreteDistribution0.probability((Long) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(337.3582210744242);
      Pair<Object, Double> pair0 = new Pair<Object, Double>("D9&Bz`SDc$5]gii`", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      double double1 = discreteDistribution0.probability((Object) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(324.5215);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      double double1 = discreteDistribution0.probability(discreteDistribution0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Short short0 = new Short((short) (-920));
      Double double0 = new Double((short) (-920));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -920 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.7552290789909557);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(5505);
  }
}
