/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:51:54 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2013.69139957);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<Double, Long> pair0 = (Pair<Double, Long>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Double, Object> pair1 = new Pair<Double, Object>(pair0);
      Double double0 = Double.valueOf(0.0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(0.4884924775555499);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(851.989462574005);
      Integer integer0 = new Integer((byte) (-68));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(30);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(30);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(0L);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.reseedRandomGenerator(0L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(30);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(215L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1459));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add((Pair<Integer, Double>) null);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(30);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(30);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(30);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, String>, Double>>();
      DiscreteDistribution<Pair<String, String>> discreteDistribution1 = new DiscreteDistribution<Pair<String, String>>(linkedList1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2634));
      Double double0 = new Double((-1904.4322840578927));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,904.432 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double double1 = discreteDistribution0.sample();
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      Double double0 = new Double(1801.0490315445131);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, linkedList0);
      Double[] doubleArray0 = discreteDistribution0.sample(2793);
      assertEquals(2793, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      Double double0 = new Double(982.909411);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, linkedList0);
      try { 
        discreteDistribution0.sample((-665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-665)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(2604L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2604L);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well19937a0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      Object object0 = discreteDistribution0.sample();
      assertSame(object0, well19937a0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-68));
      Double double0 = new Double(1.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList0);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-68));
      Double double0 = new Double(1801.0490315445131);
      Byte byte1 = new Byte((byte)69);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList0);
      double double1 = discreteDistribution0.probability(byte0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(851.989462574005);
      Integer integer0 = new Integer((byte) (-68));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      double double1 = discreteDistribution0.probability((Integer) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-68));
      Double double0 = new Double(1.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList0);
      double double1 = discreteDistribution0.probability(byte0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(851.989462574005);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
      double double1 = discreteDistribution0.probability((Integer) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)2);
      Double double0 = new Double((byte) (-68));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -68 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
