/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:11:19 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)3798);
      Double double0 = new Double((short)3798);
      Double double1 = new Double((short)3798);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.probability((Short) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.28629946147707996);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.SynchronizedRandomGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1650);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1650);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.sample();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(2599.889780395);
      short short0 = (short)123;
      Short short1 = new Short((short)123);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      Short short2 = new Short((short)123);
      Double double1 = new Double(2599.889780395);
      linkedList1.add(pair0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well512a0, linkedList1);
      discreteDistribution0.sample(5351);
      discreteDistribution0.reseedRandomGenerator(1921L);
      linkedList1.addLast(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
      DiscreteDistribution<Short> discreteDistribution2 = new DiscreteDistribution<Short>(linkedList1);
      linkedList1.add(pair0);
      discreteDistribution2.reseedRandomGenerator((-738L));
      Short short3 = new Short((short) (-3356));
      discreteDistribution0.probability((Short) null);
      discreteDistribution2.probability(short3);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1861.0517604761233);
      Pair<String, Double> pair0 = new Pair<String, Double>("8", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.sample(370);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList0);
      List<Pair<Short, Double>> list0 = new LinkedList<Pair<Short, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Short short1 = new Short((short)983);
      discreteDistribution0.probability(short1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.addLast(pair0);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList0);
      RandomGenerator randomGenerator0 = null;
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      DiscreteDistribution<Short> discreteDistribution2 = new DiscreteDistribution<Short>(synchronizedRandomGenerator0, linkedList0);
      discreteDistribution2.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution2.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.SynchronizedRandomGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(7.808670894670738E56);
      linkedList0.add(pair0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well512a0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1269.6);
      linkedList0.add(pair0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well512a0, linkedList0);
      discreteDistribution0.sample(481);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      discreteDistribution0.probability(short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2336));
      Object object0 = new Object();
      linkedList0.remove(object0);
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.sample(370);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.getSamples();
      String string0 = ">KCW(`zB|";
      // Undeclared exception!
      discreteDistribution0.sample(8388608);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.sample(370);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution1.reseedRandomGenerator(0L);
      Integer integer0 = new Integer((-2331));
      linkedList0.remove((Object) integer0);
      discreteDistribution0.getSamples();
      try { 
        Byte.valueOf("OUT_OF_RANGE_ROOT_OF_UNITY_INDEX", 583459700);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 583459700 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short) (-2336);
      Short short1 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      int int0 = 370;
      discreteDistribution0.sample();
      discreteDistribution0.sample(370);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(list0);
      String string0 = null;
      int int1 = 1894;
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(iSAACRandom0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short) (-2336);
      Short short1 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      int int0 = 0;
      try { 
        discreteDistribution0.sample((int) (short) (-2336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,336)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.addLast(pair0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.getSamples();
      try { 
        Byte.valueOf("!@[**GR|", (int) (short) (-2336));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2336 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short) (-2336);
      Short short1 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      Short short2 = new Short((short) (-2336));
      Double double1 = new Double(1269.6);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short2, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well512a0, linkedList0);
      int int0 = 2187;
      discreteDistribution1.sample(2187);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Well19937c well19937c0 = new Well19937c(4234);
      int[] intArray0 = new int[2];
      intArray0[0] = 4234;
      intArray0[1] = 4234;
      well19937c0.setSeed(intArray0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      UnaryOperator<Pair<Long, Double>> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      unaryOperator0.andThen((Function<? super Pair<Long, Double>, ?>) function0);
      linkedList0.replaceAll(unaryOperator0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short) (-2336);
      Short short1 = new Short((short) (-2336));
      Double double0 = new Double(1337.725838874);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      UnaryOperator<Pair<Long, Double>> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Long long0 = new Long(0L);
      Double double0 = new Double((-194.732574896));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      unaryOperator0.andThen((Function<? super Pair<Long, Double>, ?>) function0);
      linkedList0.replaceAll(unaryOperator0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -194.733 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-1318.481660958));
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,318.482 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = (-1174L);
      Well44497b well44497b0 = new Well44497b((-1174L));
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Pair<Byte, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, Byte>, Double>>();
      DiscreteDistribution<Pair<Byte, Byte>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Byte>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
