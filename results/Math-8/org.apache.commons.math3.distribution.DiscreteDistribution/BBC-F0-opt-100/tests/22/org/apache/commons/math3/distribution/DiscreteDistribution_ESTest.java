/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:00:09 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double(6.033249389304709E-115);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c();
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well19937c0, linkedList0);
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(161.9276672);
      Pair<String, Double> pair0 = new Pair<String, Double>("Rb;<yiHw!SChD]R", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      linkedList0.add(pair0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
      String[] stringArray0 = discreteDistribution0.sample(441);
      assertEquals(441, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      int[] intArray0 = new int[4];
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
      Byte byte0 = new Byte((byte)18);
      Pair<Byte, Byte> pair0 = new Pair<Byte, Byte>(byte0, byte0);
      Pair<Byte, Object> pair1 = new Pair<Byte, Object>(pair0);
      Pair<Pair<Byte, Object>, Double> pair2 = new Pair<Pair<Byte, Object>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Byte, Object>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Object>>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double((byte)74);
      Pair<Pair<Byte, Object>, Double> pair0 = new Pair<Pair<Byte, Object>, Double>((Pair<Byte, Object>) null, double0);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c((int[]) null);
      DiscreteDistribution<Pair<Byte, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Object>>(well19937c0, linkedList0);
      Pair<Byte, Object> pair1 = discreteDistribution0.sample();
      assertNull(pair1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double((short)32643);
      Pair<String, Double> pair0 = new Pair<String, Double>("K_cjj:eA{^HxH", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample((int) (short)32643);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((byte)74);
      Pair<Pair<Byte, Object>, Double> pair0 = new Pair<Pair<Byte, Object>, Double>((Pair<Byte, Object>) null, double0);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c((int[]) null);
      DiscreteDistribution<Pair<Byte, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Object>>(well19937c0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (byte)74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(553.5008877030843);
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
      Byte byte0 = new Byte((byte)18);
      Pair<Byte, Byte> pair0 = new Pair<Byte, Byte>(byte0, byte0);
      Pair<Byte, Object> pair1 = (Pair<Byte, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pair1).toString();
      Pair<Pair<Byte, Object>, Double> pair2 = new Pair<Pair<Byte, Object>, Double>(pair1, double0);
      linkedList0.addLast(pair2);
      Pair<Byte, Object> pair3 = new Pair<Byte, Object>(pair0);
      Pair<Pair<Byte, Object>, Double> pair4 = new Pair<Pair<Byte, Object>, Double>(pair3, double0);
      linkedList0.add(pair4);
      DiscreteDistribution<Pair<Byte, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Object>>(well44497a0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(305);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(575);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(0.20501139760017395);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Byte byte0 = new Byte((byte) (-29));
      Pair<Byte, Object> pair0 = new Pair<Byte, Object>(byte0, linkedList0);
      Pair<Pair<Byte, Object>, Double> pair1 = new Pair<Pair<Byte, Object>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList1 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Pair<Byte, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, Object>>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(627L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1531));
      Double double0 = new Double((-1264.3870129863562));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,264.387 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double(0.12062888493557566);
      Short short0 = new Short((short)0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c();
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well19937c0, linkedList0);
      try { 
        discreteDistribution0.sample((int) (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(161.9276672);
      Pair<String, Double> pair0 = new Pair<String, Double>("Rb;<yiHw!SChD]R", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      String string0 = discreteDistribution0.sample();
      assertEquals("Rb;<yiHw!SChD]R", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(161.9276672);
      Pair<String, Double> pair0 = new Pair<String, Double>("Rb;<yiHw!SChD]R", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(553.5008877030843);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = new Pair<String, Double>("v6", double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution0.probability("");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.06957812618436221);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double((short)32643);
      Pair<String, Double> pair0 = new Pair<String, Double>("K_cjj:eA{^HxH", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(161.9276672);
      Pair<String, Double> pair0 = new Pair<String, Double>("Rb;<yiHw!SChD]R", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution0.probability("Rb;<yiHw!SChD]R");
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = Double.valueOf((-3223.48));
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,223.48 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(161.9276672);
      Pair<String, Double> pair0 = new Pair<String, Double>("Rb;<yiHw!SChD]R", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(3527L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
