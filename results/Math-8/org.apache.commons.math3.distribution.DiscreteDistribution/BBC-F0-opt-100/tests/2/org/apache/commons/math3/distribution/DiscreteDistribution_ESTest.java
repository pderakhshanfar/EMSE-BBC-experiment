/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:10:58 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Double double0 = new Double(1082.3958669);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      try { 
        discreteDistribution0.sample((-1581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,581)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)325);
      Double double0 = new Double(0.0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(1082.3958669);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<Pair<String, String>, Double> pair0 = new Pair<Pair<String, String>, Double>((Pair<String, String>) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      Pair<String, String> pair1 = discreteDistribution0.sample();
      assertNull(pair1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("").when(pair0).getKey();
      doReturn("").when(pair0).getValue();
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      Double double0 = new Double(1082.3958669);
      Pair<Pair<String, String>, Double> pair2 = new Pair<Pair<String, String>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      Pair<String, String> pair3 = discreteDistribution0.sample();
      assertFalse(pair3.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1082.3958669);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      Pair<Pair<String, String>, Double> pair0 = new Pair<Pair<String, String>, Double>((Pair<String, String>) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1105.8841158877042);
      Double double0 = new Double(1.936946987935961E-70);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1105.8841158877042);
      Double double0 = new Double(1.936946987935961E-70);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1L));
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well19937a0, (List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      Double double0 = new Double(Float.POSITIVE_INFINITY);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float((-3.4028235E38F));
      Double double0 = new Double((-3.4028235E38F));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -340,282,346,638,528,860,000,000,000,000,000,000,000 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Short short0 = new Short((short)0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, (Double) null);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Double double0 = new Double(1082.3958669);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      Pair<String, String>[] pairArray0 = discreteDistribution0.sample(66);
      assertEquals(66, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair<String, String> pair0 = new Pair<String, String>("MY", "b(QZV2");
      Double double0 = new Double(703.2013552);
      Pair<Pair<String, String>, Double> pair1 = new Pair<Pair<String, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, String>, Double>>();
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<String, String>> discreteDistribution0 = new DiscreteDistribution<Pair<String, String>>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(0.9375);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(9612065);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(1082.3958669);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = discreteDistribution0.sample();
      assertEquals(1082.3959F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(1082.3958669);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      List<Pair<Float, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(0.9375);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = new Float(0.9375);
      double double1 = discreteDistribution0.probability(float1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(0.7210240779997437);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      double double1 = discreteDistribution0.probability((Float) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(0.7210240779997437);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      double double1 = discreteDistribution0.probability((Float) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(0.9375);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      double double1 = discreteDistribution0.probability(float0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(1082.3958669);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      int[] intArray0 = new int[2];
      Double double1 = new Double((-2742.40717));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      Well44497a well44497a0 = new Well44497a(intArray0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,742.407 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1082.3958669);
      Double double0 = new Double(0.9375);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1204L);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
