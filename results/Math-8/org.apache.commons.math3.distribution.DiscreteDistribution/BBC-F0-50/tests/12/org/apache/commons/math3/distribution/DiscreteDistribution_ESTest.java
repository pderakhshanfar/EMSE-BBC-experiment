/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:45:24 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1988.9304418322);
      assertEquals(1988.9304418322, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offerFirst(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution1);
      
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(300L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(2.3083651155706);
      assertEquals(2.3083651155706, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution1);
      
      String[] stringArray0 = discreteDistribution1.sample(1412);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(2, linkedList0.size());
      assertEquals(1412, stringArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(stringArray0);
      
      double double1 = discreteDistribution0.probability("S|+=(1$r,8O])B:-");
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.49985880595656074);
      assertEquals(0.49985880595656074, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("}:l2`ahs%g8lW", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution1);
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1024.0);
      assertEquals(1024.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well512a0, linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution1);
      
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(discreteDistribution2);
      
      String string0 = discreteDistribution2.sample();
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertNotSame(discreteDistribution1, discreteDistribution2);
      assertNotSame(discreteDistribution2, discreteDistribution0);
      assertNotSame(discreteDistribution2, discreteDistribution1);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution2));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNull(string0);
      
      List<Pair<Short, Double>> list1 = null;
      boolean boolean1 = linkedList0.add(pair0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Short> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1024.0);
      assertEquals(1024.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator((-3618L));
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      // Undeclared exception!
      discreteDistribution0.sample(495243383);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.8074986229283663);
      assertEquals(0.8074986229283663, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2030.9);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2030.9, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      int int0 = 943;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(943);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 1024.0;
      Double double1 = new Double(1024.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1024.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      String string0 = discreteDistribution0.sample();
      assertEquals(2, linkedList0.size());
      assertEquals("9bG`i?`Om\"d0Z2R>O", string0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(string0);
      
      discreteDistribution0.reseedRandomGenerator(348L);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      double double2 = discreteDistribution0.probability("");
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, double2, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1024.0);
      assertEquals(1024.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1024.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1024.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      double double2 = discreteDistribution0.probability((String) null);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0, double2, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1024.0);
      assertEquals(1024.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      discreteDistribution0.reseedRandomGenerator((-302932621132653753L));
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      Pair<String, Double> pair1 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean2 = linkedList0.add(pair0);
      assertNotSame(pair0, pair1);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(pair1));
      
      Pair<String, Double> pair2 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      boolean boolean3 = linkedList0.offer(pair2);
      assertNotSame(pair2, pair1);
      assertNotSame(pair2, pair0);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(4, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution1);
      
      System.setCurrentTimeMillis((-302932621132653753L));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.6931470632553101);
      assertEquals(0.6931470632553101, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      String string0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertEquals("", string0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(string0);
      
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1024.0);
      assertEquals(1024.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      int int0 = 119;
      String[] stringArray0 = discreteDistribution0.sample(119);
      assertEquals(2, linkedList0.size());
      assertEquals(119, stringArray0.length);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(stringArray0);
      
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = (-3776.0);
      Double double1 = new Double((-3776.0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3776.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("?Dkv&sY hs", double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.offer(pair1);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,776 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double double0 = 1024.0;
      Double double1 = new Double(1024.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1024.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertNotNull(linkedList1);
      
      boolean boolean2 = linkedList1.offer(pair0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean2);
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      String string0 = "";
      try { 
        discreteDistribution0.sample((-4511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-4,511)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = (-2803L);
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2803L));
      assertNotNull(mersenneTwister0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((-2803L));
      assertEquals((-2803.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.add(pair0);
      assertNotSame(pair0, pair1);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,803 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1024.0);
      assertEquals(1024.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1024.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1609.0);
      Pair<String, Double> pair1 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double1);
      linkedList0.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double2 = discreteDistribution0.probability("9bG`i?`Om\"d0Z2R>O");
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1024.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("9bG`i?`Om\"d0Z2R>O", double0);
      linkedList0.add(pair0);
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution0.probability("");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.iterator();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 1632L;
      MersenneTwister mersenneTwister0 = new MersenneTwister(1632L);
      mersenneTwister0.nextFloat();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      UnaryOperator<Pair<Byte, Double>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.parallelStream();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
