/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:46:14 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)273;
      Short short1 = new Short((short) (-12755));
      Double double0 = Double.valueOf(1.0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.spliterator();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator((short)273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Short short0 = new Short((short)2738);
      Double double0 = new Double(1011.757048306);
      Short short1 = new Short((short)1405);
      Short short2 = new Short((short)2738);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short2, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      Double double1 = new Double((-631.69917970258));
      Pair<String, Double> pair2 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair2);
      Well44497a well44497a0 = new Well44497a((int) (short)1405);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution3.probability((String) null);
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList4 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Object>(well44497a0, linkedList4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1498);
      Double double0 = new Double((short)1498);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Short short0 = new Short((short)2738);
      Double double0 = new Double(1011.757048306);
      Short short1 = new Short((short)1405);
      Short short2 = new Short((short)2738);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short2, double0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution1.sample();
      discreteDistribution1.sample((int) (short)2738);
      DiscreteDistribution<Short> discreteDistribution2 = new DiscreteDistribution<Short>(linkedList0);
      Short[] shortArray0 = discreteDistribution2.sample((int) (short)2738);
      assertEquals(2738, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      short short0 = (short)2738;
      Short short1 = new Short((short)2738);
      Double double0 = new Double(1011.757048306);
      short short2 = (short)1405;
      Short short3 = new Short((short)2738);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short3, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Pair<String, Double> pair2 = new Pair<String, Double>("EjYGSRpnG(", double0);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair3);
      Well44497a well44497a0 = new Well44497a(2855);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution2.reseedRandomGenerator((short)2738);
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList2);
      String string0 = "org.apache.commons.math3.util.FastMath$lnMant";
      discreteDistribution2.probability("org.apache.commons.math3.util.FastMath$lnMant");
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Integer>(well44497a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)2710);
      Double double0 = Double.valueOf((double) (short)2710);
      Short short1 = new Short((short) (-2458));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(4.232889602759328E-304);
      Pair<String, Double> pair2 = new Pair<String, Double>("FU#YL#(tsHC", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList1.add(pair2);
      Well44497a well44497a0 = new Well44497a((int) (short)2710);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution3.probability("6");
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Object>(well44497a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.removeFirstOccurrence("org.apache.commons.math3.distribution.DiscreteDistribution");
      Double double0 = new Double(0.8433232260461581);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      Long.getLong("org.apache.commons.math3.distribution.DiscreteDistribution");
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Short short0 = new Short((short)2738);
      Double double0 = new Double((short)2738);
      Short short1 = new Short((short)1405);
      Short short2 = new Short((short)776);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      linkedList2.sort((Comparator<? super Pair<Short, Double>>) null);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair2 = new Pair<String, Double>("", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      linkedList3.add(pair2);
      Well44497a well44497a0 = new Well44497a(4031);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList3);
      List<Pair<String, Double>> list0 = discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(list0);
      discreteDistribution2.probability("");
      LinkedList<Pair<Integer, Double>> linkedList4 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList5 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Object>(well44497a0, linkedList5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)317;
      Short short1 = new Short((short)317);
      Double double0 = Double.valueOf((double) (short)317);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double((short)317);
      Pair<String, Double> pair2 = new Pair<String, Double>("FU#YL#(tsHC", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList1.add(pair3);
      Well44497a well44497a0 = new Well44497a(99);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution2.probability((String) null);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Object>(well44497a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Short short0 = new Short((short)2738);
      Double double0 = new Double(1011.757048306);
      Short short1 = new Short((short)1405);
      Short short2 = new Short((short)2738);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short2, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      Double double1 = new Double((-631.69917970258));
      Pair<String, Double> pair2 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair2);
      Well44497a well44497a0 = new Well44497a((int) (short)1405);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution2.reseedRandomGenerator((short)2738);
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution3.probability("");
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Integer>(well44497a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double((short)2738);
      Short short0 = new Short((short)1405);
      Short short1 = new Short((short)2738);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((short)1405);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.probability((String) null);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      System.setCurrentTimeMillis(4503599627370495L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Short short0 = new Short((short)16588);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Double double1 = new Double(0.8433232260461581);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList0.add(pair1);
      Well44497a well44497a0 = new Well44497a((-2441));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution2.reseedRandomGenerator((-2644281811660520851L));
      String string0 = discreteDistribution2.sample();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short)16588);
      Double double0 = new Double(1.0);
      Short short1 = new Short((short)16588);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      linkedList1.add(pair0);
      Well44497a well44497a0 = new Well44497a((-1746));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      well44497a0.nextDouble();
      discreteDistribution1.sample(2);
      discreteDistribution0.sample(490);
      discreteDistribution0.sample(3852);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short)16588);
      Double double0 = new Double(1.0);
      Short short1 = new Short((short)16588);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Double double1 = new Double((short)16588);
      Pair<String, Double> pair1 = new Pair<String, Double>("number of microsphere elements must be positive, but got {0}", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      Well44497a well44497a0 = new Well44497a((-1746));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution2.reseedRandomGenerator((-1746));
      String string0 = discreteDistribution2.sample();
      assertEquals("number of microsphere elements must be positive, but got {0}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short)16588);
      Double double0 = new Double(1.0);
      Short short1 = new Short((short)16588);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Well44497a well44497a0 = new Well44497a((-1746));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      discreteDistribution1.sample(2);
      discreteDistribution0.sample(490);
      try { 
        discreteDistribution0.sample((-290885767));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-290,885,767)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short)16588);
      Double double0 = new Double(1.0);
      Short short1 = new Short((short)16588);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Well44497a well44497a0 = new Well44497a((-1746));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      int int0 = 2;
      discreteDistribution1.sample(2);
      // Undeclared exception!
      discreteDistribution1.sample((int) (short)16588);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short)16588);
      Double double0 = new Double(1.0);
      Short short1 = new Short((short)16588);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      int int0 = (-1746);
      Well44497a well44497a0 = new Well44497a((-1746));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well44497a0, linkedList1);
      discreteDistribution1.sample(2);
      int int1 = 88;
      discreteDistribution0.sample(1);
      discreteDistribution1.sample(1259);
      discreteDistribution1.getSamples();
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1262.76);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(781);
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Pair<Long, Double>> list0 = null;
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a(1023);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      well512a0.nextInt();
      Double double0 = new Double((-2193.3826749));
      Pair<String, Double> pair0 = new Pair<String, Double>("[ ", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,193.383 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1613L));
      mersenneTwister0.nextInt();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      Double double0 = new Double((byte) (-1));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
