/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:37:54 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("org.apache.commons.math3.distribution.DiscreteDistribution");
      Well44497a well44497a0 = new Well44497a();
      discreteDistribution0.probability(" y&%ugVgsj\"I'OBiV");
      Well44497a well44497a1 = new Well44497a();
      discreteDistribution0.probability((String) null);
      Well44497a well44497a2 = new Well44497a();
      Well44497a well44497a3 = new Well44497a();
      Double double2 = new Double(1.0);
      Well44497a well44497a4 = new Well44497a();
      Well44497a well44497a5 = new Well44497a();
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      // Undeclared exception!
      discreteDistribution1.reseedRandomGenerator(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("org.apache.commons.math3.distribution.DiscreteDistribution");
      Well44497a well44497a0 = new Well44497a();
      discreteDistribution0.probability(" y&%ugVgsj\"I'OBiV");
      Well44497a well44497a1 = new Well44497a();
      discreteDistribution0.probability((String) null);
      Well44497a well44497a2 = new Well44497a();
      Well44497a well44497a3 = new Well44497a();
      Double double2 = new Double(1.0);
      Well44497a well44497a4 = new Well44497a();
      Well44497a well44497a5 = new Well44497a();
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample(4212);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      Well44497a well44497a0 = new Well44497a();
      Well44497a well44497a1 = new Well44497a();
      Well44497a well44497a2 = new Well44497a();
      Well19937a well19937a0 = new Well19937a((int[]) null);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      int int0 = 4212;
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair2);
      Double double2 = new Double(1897.16826);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(double2, double1);
      linkedList1.add(pair3);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(4212);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("org.apache.commons.math3.distribution.DiscreteDistribution");
      Well44497a well44497a0 = new Well44497a();
      discreteDistribution0.probability(" y&%ugVgsj\"I'OBiV");
      Well44497a well44497a1 = new Well44497a();
      Well19937a well19937a0 = new Well19937a((int[]) null);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497a1, linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample(4212);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      // Undeclared exception!
      discreteDistribution2.sample(1274);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("org.apache.commons.math3.distribution.DiscreteDistribution");
      Well44497a well44497a0 = new Well44497a();
      discreteDistribution0.probability(" y&%ugVgsj\"I'OBiV");
      Well44497a well44497a1 = new Well44497a();
      discreteDistribution0.probability((String) null);
      Well44497a well44497a2 = new Well44497a();
      Well19937a well19937a0 = new Well19937a((int[]) null);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      discreteDistribution1.sample(4212);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Double double2 = new Double(1897.16826);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(double2, double1);
      linkedList2.add(pair2);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(well44497a2, linkedList2);
      discreteDistribution2.sample();
      discreteDistribution2.getSamples();
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<String>(linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      Pair<String, Double> pair2 = new Pair<String, Double>("*?5C=3", double1);
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = 86;
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1681);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("#VzkWAQgk");
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Well44497b well44497b0 = new Well44497b((long) (-1073741824));
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      List<Pair<String, Double>> list0 = new LinkedList<Pair<String, Double>>();
      discreteDistribution1.sample();
      discreteDistribution1.reseedRandomGenerator(1592L);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      try { 
        discreteDistribution1.sample((-1681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,681)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = 86;
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1681);
      intArray0[4] = (-1275);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample(918);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("*?5C=3", double0);
      linkedList0.addLast(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.pollLast();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("*?5C=3");
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Well44497b well44497b0 = new Well44497b((long) 86);
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = (-1073741824);
      intArray0[2] = (-1073741824);
      intArray0[3] = 47;
      intArray0[4] = 86;
      intArray0[5] = 86;
      intArray0[6] = (-1073741824);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      try { 
        discreteDistribution1.sample((-2908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,908)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double2 = new Double(1.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double2);
      linkedList1.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList1);
      UnaryOperator.identity();
      Well19937a well19937a0 = new Well19937a((-331));
      well19937a0.clear();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      int int0 = 86;
      int int1 = (-1073741824);
      int int2 = (-1681);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability((String) null);
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Well44497b well44497b0 = new Well44497b(86);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY", double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(9154082963658192752L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      int int0 = 86;
      intArray0[1] = 86;
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1681);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("#VzkWAQgk");
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Well44497b well44497b0 = new Well44497b((long) (-1073741824));
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = 86;
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1681);
      intArray0[4] = (-1275);
      intArray0[5] = 257;
      intArray0[6] = (-1115);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(3349);
      discreteDistribution0.reseedRandomGenerator(1501L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.427223713988042);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("*?5C=3", double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = 86;
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1681);
      intArray0[4] = (-1275);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample((-1681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,681)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY", double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      Well44497b well44497b0 = new Well44497b(301);
      int int0 = 1;
      well44497b0.setSeed(1);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.offerLast(pair1);
      linkedList1.removeAll(linkedList0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double((-1222.051969656));
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("CANNOT_SUBSTITUTE_ELEMNT_FROM_EMPY_ARRAY", double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,222.052 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 84;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 195;
      intArray0[5] = 0;
      intArray0[6] = 2902;
      intArray0[8] = 195;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Double double0 = new Double(195);
      well44497b0.setSeed(2902);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.offerLast(pair0);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = Byte.valueOf((byte)0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double0);
      linkedList2.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList2);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double(2.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      UnaryOperator.identity();
      well19937a0.clear();
      discreteDistribution0.sample(1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2863);
      intArray0[1] = 84;
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 195;
      intArray0[5] = 0;
      int int1 = 2902;
      intArray0[6] = 2902;
      intArray0[7] = (-432);
      intArray0[8] = 195;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Double double0 = new Double(195);
      well44497b0.setSeed(301);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.offerLast(pair0);
      linkedList0.removeAll(linkedList1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497b0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double(2.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      UnaryOperator.identity();
      well19937a0.clear();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double((-1.0));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      DiscreteDistribution<Pair<String, Float>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<String, Float>>(well44497b0, (List<Pair<Pair<String, Float>, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY", double0);
      linkedList0.addLast(pair1);
      linkedList0.pollLast();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      linkedList0.removeFirstOccurrence(integer0);
      linkedList0.stream();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
