/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:21:46 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2146730937);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(2146730937);
      assertEquals(2.146730937E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(",NUQKS", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offerLast(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1799);
      assertEquals(1799.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1799);
      assertEquals(1799.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      assertNotNull(pair2);
      assertFalse(pair2.equals((Object)pair1));
      
      boolean boolean0 = linkedList0.add(pair2);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNotSame(pair1, pair2);
      assertNotSame(pair2, pair1);
      assertFalse(pair1.equals((Object)pair2));
      assertFalse(pair2.equals((Object)pair1));
      assertTrue(linkedList0.contains(pair2));
      assertFalse(linkedList0.contains(pair1));
      
      Well19937a well19937a0 = new Well19937a((long) 1799);
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair2));
      assertFalse(linkedList0.contains(pair1));
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertNotNull(object0);
      assertTrue(linkedList0.contains(pair2));
      assertFalse(linkedList0.contains(pair1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1799);
      assertEquals(1799.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(797);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1799);
      assertEquals(1799.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      Short short0 = new Short((short)2041);
      assertEquals((short)2041, (short)short0);
      assertNotNull(short0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(short0, double0);
      assertNotNull(pair1);
      assertFalse(pair1.equals((Object)pair0));
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertNotSame(pair1, pair0);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (short)2041);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Short
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(158.2391204819844);
      assertEquals(158.2391204819844, (double)double0, 0.01);
      assertNotNull(double0);
      
      Short short0 = new Short((short) (-1364));
      assertEquals((short) (-1364), (short)short0);
      assertNotNull(short0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair1));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float((-482.2405652649033));
      assertEquals((-482.24057F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      Well19937a well19937a0 = new Well19937a(1073741824);
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1016);
      assertNotNull(mersenneTwister0);
      
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(mersenneTwister0, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double((byte) (-112));
      assertEquals((-112.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -112 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1799);
      assertEquals(1799.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair1));
      
      Well19937a well19937a0 = new Well19937a((long) 1799);
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair1));
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(2, linkedList0.size());
      assertNull(object0);
      assertTrue(linkedList0.contains(pair1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1338.8821691947);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(20439881);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1799);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1799);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
      Object[] objectArray0 = discreteDistribution0.sample((int) (short)2041);
      assertEquals(2041, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.7873219314226385);
      Short short0 = new Short((short)115);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Well44497b well44497b0 = new Well44497b((int) (short)115);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1799);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      double double1 = discreteDistribution0.probability(well44497b0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1799);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      double double1 = discreteDistribution0.probability((Object) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.7873219314226385);
      Short short0 = new Short((short)115);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Well44497b well44497b0 = new Well44497b((int) (short)115);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      double double1 = discreteDistribution0.probability(short0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1799);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.04734702811764646);
      Short short0 = new Short((short)2041);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      double double1 = discreteDistribution0.probability((Object) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-892.0));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -892 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2146730937);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(2146730937);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
