/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:36:42 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(442);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(442);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      System.setCurrentTimeMillis((-940L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1201);
      Short short1 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample(1268);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(list0);
      DiscreteDistribution<Short> discreteDistribution2 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution2.sample(2334);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Short short2 = Short.valueOf((short)675);
      discreteDistribution2.probability(short2);
      discreteDistribution2.getSamples();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution3 = new DiscreteDistribution<Short>(linkedList0);
      DiscreteDistribution<Short> discreteDistribution4 = new DiscreteDistribution<Short>(linkedList0);
      DiscreteDistribution<Short> discreteDistribution5 = new DiscreteDistribution<Short>(jDKRandomGenerator0, list0);
      Short[] shortArray0 = discreteDistribution5.sample(2334);
      assertEquals(2334, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.37658075159726656);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator((-1661L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short) (-1));
      Double double0 = new Double(0.04971705746494881);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
      double double1 = discreteDistribution0.probability((Short) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Short short1 = new Short((short)1201);
      Double double1 = new Double((short)1201);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(list0);
      Short.valueOf((short)3164);
      Short short2 = new Short((short)1);
      discreteDistribution1.probability(short2);
      Random.setNextRandom((short)1201);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(jDKRandomGenerator0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Short short1 = new Short((short)1201);
      Double double1 = new Double((short)1201);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample(1268);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(list0);
      assertEquals(2, list0.size());
      
      DiscreteDistribution<Short> discreteDistribution2 = new DiscreteDistribution<Short>(linkedList0);
      Short[] shortArray0 = discreteDistribution2.sample(2334);
      assertEquals(2334, shortArray0.length);
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Short.valueOf((short)675);
      double double2 = discreteDistribution2.probability((Short) null);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.049787066876888275);
      Short short0 = new Short((short)20619);
      Double double0 = new Double((short)20619);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      // Undeclared exception!
      discreteDistribution0.sample((int) (short)20619);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double((short)1201);
      Short short0 = new Short((short)1201);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Short.valueOf((short)1255);
      double double1 = discreteDistribution0.probability(short0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double((short)1201);
      Short short0 = new Short((short)1035);
      Double double1 = new Double(0.6550920676959235);
      Short short1 = new Short((short)14067);
      Double double2 = new Double((short)14067);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double2);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      List<Pair<Short, Double>> list0 = new LinkedList<Pair<Short, Double>>();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (short)1035);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Long long1 = new Long(7910884519577875640L);
      Double double0 = new Double(1120L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList1.add(pair1);
      int[] intArray0 = new int[4];
      linkedList1.add(pair0);
      intArray0[0] = (-1226);
      intArray0[1] = (-1);
      intArray0[2] = (-914691333);
      intArray0[3] = (-1149);
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well512a0, linkedList1);
      discreteDistribution0.sample();
      Double double1 = new Double(0.9001110713733353);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)1201;
      Short short1 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Short short2 = new Short((short)1201);
      Short short3 = new Short((short)0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short3, double0);
      linkedList0.add(pair0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short2, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.sample(190);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)1201;
      Short short1 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Double double1 = new Double(682.2330485402777);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.049787066876888275);
      Double double0 = new Double(0.049787066876888275);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.sample();
      MersenneTwister mersenneTwister0 = new MersenneTwister(2177);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      short short0 = (short)8908;
      Short short1 = new Short((short)8908);
      Double double0 = new Double((short)8908);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((short)8908);
      discreteDistribution0.sample(206);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      linkedList2.toArray();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.049787066876888275);
      Double double0 = new Double(0.049787066876888275);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Long long1 = new Long(7910884519577875640L);
      Double double0 = new Double(1120L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList1.add(pair1);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1226);
      intArray0[1] = (-1);
      intArray0[2] = (-914691333);
      intArray0[3] = (-1149);
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well512a0, linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)1201;
      Short short1 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Short short2 = new Short((short)1201);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short2, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.sample(190);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float((-1.0));
      Double double0 = new Double((-484.1630027409362));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(54.59815216064453);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -484.163 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 0L;
      Well44497a well44497a0 = new Well44497a(0L);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well44497a0, (List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1201);
      Double double0 = new Double((short)1201);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      try { 
        discreteDistribution0.sample((-272236544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-272,236,544)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1333);
      intArray0[1] = 0;
      intArray0[2] = 2137;
      intArray0[3] = (-2425);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2907);
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      mersenneTwister0.nextInt();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) 0, double0);
      linkedList0.offerFirst(pair0);
      Double double1 = new Double((-484.1630027409362));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) 0, double1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -484.163 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Pair<Byte, Double>> list0 = null;
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.clear();
      Double double0 = new Double((-287.951918006));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well1024a0, double0);
      linkedList0.removeFirstOccurrence(pair0);
      linkedList0.add(pair0);
      linkedList0.poll();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
