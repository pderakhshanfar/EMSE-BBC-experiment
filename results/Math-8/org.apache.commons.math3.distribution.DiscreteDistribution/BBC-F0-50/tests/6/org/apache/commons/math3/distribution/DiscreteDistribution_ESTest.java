/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:47:10 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(1346.48071582502);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1784.0);
      Float float0 = new Float(1784.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>("5(%(a^LI", double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2364);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Long long0 = new Long(1664525L);
      Integer integer0 = new Integer(326);
      Pair<Long, Integer> pair0 = new Pair<Long, Integer>(long0, integer0);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double0 = new Double(0.0);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      linkedList1.add(pair2);
      Integer integer1 = new Integer(1709);
      Pair<Object, Integer> pair3 = new Pair<Object, Integer>(pair1);
      Double double1 = new Double(1783.5848678083612);
      Pair<Pair<Object, Integer>, Double> pair4 = new Pair<Pair<Object, Integer>, Double>(pair1, double1);
      linkedList1.add(pair2);
      linkedList1.offerLast(pair4);
      UnaryOperator.identity();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList1);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution1 = new DiscreteDistribution<Pair<Object, Integer>>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(1709);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Double double0 = new Double(0.0);
      Integer integer0 = new Integer(0);
      Pair<Object, Integer> pair0 = (Pair<Object, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double1 = Double.valueOf(0.0);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double1);
      linkedList0.add(pair2);
      Double double2 = new Double(0.018585810653595214);
      Pair<Double, Double> pair3 = new Pair<Double, Double>((Double) null, double2);
      Pair<Object, Double> pair4 = new Pair<Object, Double>(pair3);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair4);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.sample();
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well44497b0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(207.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2527);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Integer integer0 = new Integer((-2646));
      Pair<Double, Integer> pair0 = (Pair<Double, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double0 = new Double(773.3661048557367);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.offerLast(pair2);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      discreteDistribution0.sample(1421);
      discreteDistribution0.sample(1421);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2646);
      intArray0[1] = (-2646);
      intArray0[2] = 1421;
      intArray0[4] = (-552615663);
      intArray0[5] = 1421;
      intArray0[7] = (-2646);
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(1262.521278388);
      Pair<String, Double> pair3 = new Pair<String, Double>("Me", double1);
      linkedList1.offer(pair3);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList1);
      discreteDistribution1.getSamples();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution2 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution1.probability("Me");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-2646);
      Double double0 = new Double(1.5533745288848877);
      UnaryOperator.identity();
      Float float0 = new Float((float) (-2646));
      Float float1 = new Float((float) (-2646));
      Double double1 = new Double(773.171483);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double1);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double2 = new Double(5079.848);
      Pair<Float, Double> pair1 = new Pair<Float, Double>((Float) null, double2);
      linkedList0.add(pair1);
      linkedList0.push(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float2 = new Float((double) (-2646));
      discreteDistribution0.probability((Float) null);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-1.0));
      UnaryOperator.identity();
      Float float0 = new Float(0.0F);
      Double double1 = new Double(0.7182193481794119);
      Float float1 = new Float(0.0F);
      Double double2 = new Double(0.829815672014117);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double2);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.push(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      Float float2 = new Float((-1903.235829256361));
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution1.probability(float2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Double double0 = new Double(1.5533745288848877);
      UnaryOperator.identity();
      Float float0 = new Float((float) (-2646));
      Double double1 = new Double(3.0227439688367925E-44);
      Float float1 = new Float((float) (-2646));
      Double double2 = new Double(773.171483);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double2);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.push(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      Float float2 = new Float((double) (-2646));
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution1.probability((Float) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      int int0 = 217660183;
      Integer integer0 = new Integer(217660183);
      Double double0 = new Double((-2646));
      UnaryOperator.identity();
      Float float0 = new Float(0.0F);
      Double double1 = new Double((-506.4041));
      Double double2 = new Double(217660183);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double2);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.push(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      Float float1 = new Float((-2378.51739205));
      discreteDistribution0.probability(float0);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Integer integer0 = new Integer((-2646));
      Pair<Double, Integer> pair0 = (Pair<Double, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double0 = new Double(773.3661048557367);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.offerLast(pair2);
      UnaryOperator.identity();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      discreteDistribution0.sample(1421);
      discreteDistribution0.sample(1421);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2646);
      intArray0[1] = (-2646);
      intArray0[2] = 1421;
      intArray0[3] = 1421;
      intArray0[4] = (-552615663);
      intArray0[5] = 1421;
      intArray0[6] = 1421;
      intArray0[7] = (-2646);
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(1262.521278388);
      Pair<String, Double> pair3 = new Pair<String, Double>("Me", double1);
      linkedList1.offer(pair3);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList1);
      discreteDistribution1.getSamples();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((double) 1421);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(float0, double1);
      linkedList2.push(pair4);
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(linkedList2);
      Float float1 = new Float((double) (-2646));
      discreteDistribution2.probability(float1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Integer integer0 = new Integer(134433472);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double0 = new Double(1.0);
      Pair<Object, Integer> pair2 = new Pair<Object, Integer>(pair1);
      Pair<Pair<Object, Integer>, Double> pair3 = new Pair<Pair<Object, Integer>, Double>(pair2, double0);
      linkedList0.add(pair3);
      linkedList0.offerLast(pair3);
      UnaryOperator.identity();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(134433472);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int0 = 1415;
      Integer integer0 = new Integer(1415);
      Double double0 = new Double(1415);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      ISAACRandom iSAACRandom0 = new ISAACRandom(1415);
      iSAACRandom0.nextFloat();
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList3 = null;
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Integer integer0 = new Integer((-2646));
      Integer integer1 = new Integer(768);
      Integer integer2 = new Integer(768);
      Pair<Double, Integer> pair0 = new Pair<Double, Integer>((Double) null, integer2);
      Pair<Double, Integer> pair1 = new Pair<Double, Integer>(pair0);
      Pair<Object, Integer> pair2 = new Pair<Object, Integer>(pair1);
      Double double0 = new Double((-403.2));
      Pair<Pair<Object, Integer>, Double> pair3 = new Pair<Pair<Object, Integer>, Double>(pair2, double0);
      linkedList0.offerLast(pair3);
      UnaryOperator.identity();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -403.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Double double0 = new Double(287.4634);
      Integer integer0 = new Integer((-496));
      Pair<Double, Integer> pair0 = (Pair<Double, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double1 = new Double(773.171483);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double1);
      Pair<Pair<Object, Integer>, Double> pair3 = new Pair<Pair<Object, Integer>, Double>(pair2);
      linkedList0.offerLast(pair3);
      UnaryOperator<Pair<Pair<Object, Integer>, Double>> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      linkedList1.replaceAll(unaryOperator0);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample((-1066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,066)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Integer integer0 = new Integer((-2679));
      Integer integer1 = new Integer(2105);
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>(linkedList0, integer1);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double0 = new Double(0.06963213346654862);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double0);
      Pair<Pair<Object, Integer>, Double> pair3 = new Pair<Pair<Object, Integer>, Double>(pair2);
      linkedList0.offerLast(pair3);
      UnaryOperator<Pair<Pair<Object, Integer>, Double>> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      linkedList0.replaceAll(unaryOperator0);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample((-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-878)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Double double0 = new Double(287.4634);
      Integer integer0 = new Integer((-496));
      Pair<Double, Integer> pair0 = (Pair<Double, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double1 = new Double(773.171483);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double1);
      Pair<Pair<Object, Integer>, Double> pair3 = new Pair<Pair<Object, Integer>, Double>(pair2);
      linkedList0.offerLast(pair3);
      UnaryOperator<Pair<Pair<Object, Integer>, Double>> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      linkedList1.replaceAll(unaryOperator0);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      int int0 = 1421;
      discreteDistribution0.getSamples();
      int int1 = (-1066);
      try { 
        discreteDistribution0.sample((-1066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,066)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.9105125037779227);
      Integer.getInteger("");
      Integer integer0 = new Integer(1298);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, integer0);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double1 = new Double(0.9105125037779227);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double1);
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      linkedList1.offerLast(pair2);
      UnaryOperator.identity();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList1);
      int int0 = 1421;
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int1 = 0;
      discreteDistribution0.sample(1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int1 = 0;
      discreteDistribution0.sample(1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(iSAACRandom0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(106);
      Double double0 = new Double(106);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(randomAdaptor0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.iterator();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Pair<Double, Integer> pair0 = (Pair<Double, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      Double double0 = new Double(773.171483);
      Pair<Pair<Object, Integer>, Double> pair2 = new Pair<Pair<Object, Integer>, Double>(pair1, double0);
      linkedList0.offerLast(pair2);
      UnaryOperator<Pair<Pair<Object, Integer>, Double>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      int int0 = 1421;
      discreteDistribution0.sample(1421);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int0 = 295;
      Integer integer0 = new Integer(295);
      Double double0 = new Double(295);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.iterator();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, (List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((int[]) null);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-4673.7));
      Pair<String, Double> pair0 = new Pair<String, Double>("unable to bracket optimum in line search", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,673.7 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Pair<Pair<String, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Object>, Double>>();
      linkedList0.add((Pair<Pair<String, Object>, Double>) null);
      DiscreteDistribution<Pair<String, Object>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<String, Object>>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Double double0 = new Double((short)0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
