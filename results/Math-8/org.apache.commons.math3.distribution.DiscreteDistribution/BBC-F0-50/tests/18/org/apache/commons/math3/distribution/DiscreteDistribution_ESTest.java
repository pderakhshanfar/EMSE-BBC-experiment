/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:48:44 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.4187442363719347);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator((-1149L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2744.3698993794355);
      Pair<String, Double> pair0 = new Pair<String, Double>("/3jE%d%>Sf#h", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1674L);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-1921);
      Integer integer0 = new Integer((-1921));
      Double double0 = new Double(1539.219443);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(1539.219443);
      Double double2 = Double.valueOf(0.2897617748488346);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double2);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      Well44497b well44497b0 = new Well44497b((-1921));
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497b0, linkedList1);
      discreteDistribution0.sample();
      Double double3 = new Double(3152.1);
      Double double4 = new Double(1267);
      linkedList0.add(pair0);
      discreteDistribution0.getSamples();
      Double double5 = new Double((-1921));
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1267);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = (-609663094);
      try { 
        discreteDistribution0.sample((-609663094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-609,663,094)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(1566.85804);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.addLast(pair0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      Double double1 = new Double(1566.85804);
      Double double2 = new Double((-3817.911597912604));
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double2, double0);
      linkedList1.add(pair0);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList1);
      discreteDistribution0.sample();
      Double double3 = new Double((-1860.606857564237));
      Double double4 = new Double((-4671.63062434729));
      Double double5 = new Double(5.2240336371356666E-9);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double1, double3);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair3);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution1.sample();
      try { 
        discreteDistribution1.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair2);
      Pair<Double, Double> pair5 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair5);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample(1);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-1305));
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      Double double2 = new Double(781.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double2);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      Double double3 = new Double((-1305));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double3);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,305 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Well1024a well1024a0 = new Well1024a((-676808551));
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.5296054477019876);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList1.addLast(pair0);
      linkedList1.add(pair0);
      Double double2 = new Double(1808.2);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair2);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList1);
      discreteDistribution0.sample();
      Double double3 = new Double(0.5);
      Double double4 = new Double((-6735.46));
      Double double5 = new Double(0.5296054477019876);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double1, double5);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      Double double6 = discreteDistribution0.sample();
      assertNull(double6);
      
      LinkedList<Pair<Byte, Double>> linkedList3 = new LinkedList<Pair<Byte, Double>>();
      System.setCurrentTimeMillis((-510L));
      double double7 = discreteDistribution1.probability((Double) null);
      assertEquals(0.9983436395759717, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(151);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(781.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      Double double2 = new Double(151);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double2);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
      Double double3 = discreteDistribution0.sample();
      assertEquals(781.0, (double)double3, 0.01);
      
      Double double4 = new Double((-3373.1));
      Double double5 = new Double(899.0);
      Double double6 = new Double(1.0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double6);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      System.setCurrentTimeMillis((-510L));
      discreteDistribution0.probability(double2);
      Double double7 = new Double(781.0);
      double double8 = discreteDistribution0.probability(double7);
      assertEquals(0.8379828326180258, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Well1024a well1024a0 = new Well1024a((-676808551));
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.5296054477019876);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList1.addLast(pair0);
      linkedList1.add(pair0);
      Double double2 = new Double(1808.2);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair2);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      linkedList2.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList2);
      discreteDistribution0.sample();
      Double double3 = new Double(0.5);
      Double double4 = new Double((-6735.46));
      Double double5 = new Double(0.5296054477019876);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double1, double5);
      LinkedList<Pair<Double, Double>> linkedList3 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList2);
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList4 = new LinkedList<Pair<Byte, Double>>();
      System.setCurrentTimeMillis((-510L));
      double double6 = discreteDistribution1.probability((Double) null);
      assertEquals(1.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 151;
      Well1024a well1024a0 = new Well1024a(151);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(781.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      Double double2 = new Double(774.2977733935458);
      Double double3 = new Double(774.2977733935458);
      Double double4 = new Double(774.2977733935458);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double4);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, list0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(151);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(781.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      Double double2 = new Double(151);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double2);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
      Double double3 = discreteDistribution0.sample();
      assertEquals(781.0, (double)double3, 0.01);
      
      Double double4 = new Double((-3373.1));
      Double double5 = new Double(899.0);
      Double double6 = new Double(1.0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double6);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution1.sample();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      System.setCurrentTimeMillis((-510L));
      double double7 = discreteDistribution0.probability(double2);
      assertEquals(0.0, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) 1);
      floatArray0[0] = float0;
      Float float1 = new Float((-426.76230786));
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      floatArray0[3] = float3;
      Float float4 = new Float(489.0F);
      floatArray0[4] = float4;
      Float float5 = new Float(0.9305076599121094);
      floatArray0[5] = float5;
      linkedList0.toArray(floatArray0);
      Double double0 = new Double(1049.5793680992624);
      Integer integer1 = new Integer(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(774.2977733935458);
      Double double2 = new Double((-1321.762164));
      Double double3 = new Double((-4.813899778443457E-9));
      Double double4 = new Double(1);
      Double double5 = new Double((-4.813899778443457E-9));
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 151;
      Well1024a well1024a0 = new Well1024a(151);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(781.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      Double double2 = new Double(151);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double2);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(well1024a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Double double1 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      // Undeclared exception!
      try { 
        linkedList1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double((-1321.762164));
      Double double2 = new Double((-170.2));
      Double double3 = new Double(1.0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double3, double0);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double((-170.2));
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -170.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1161L);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well44497a0, (List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      // Undeclared exception!
      try { 
        linkedList1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-1);
      Well44497b well44497b0 = new Well44497b((-1));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
