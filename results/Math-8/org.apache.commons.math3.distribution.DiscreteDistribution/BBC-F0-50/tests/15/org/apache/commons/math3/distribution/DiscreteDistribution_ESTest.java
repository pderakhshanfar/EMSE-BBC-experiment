/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:48:47 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2799.583368748);
      Pair<String, Double> pair0 = new Pair<String, Double>("%v'os{", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      int int0 = 720;
      Integer integer0 = new Integer(720);
      Double double0 = new Double(687);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.getSamples();
      Well44497a well44497a0 = new Well44497a();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      Integer integer1 = new Integer(30);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList1);
      // Undeclared exception!
      discreteDistribution2.sample(472530743);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(3681);
      Double double0 = new Double(3681);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer integer1 = new Integer(3681);
      discreteDistribution0.probability(integer1);
      Integer integer2 = discreteDistribution0.sample();
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well44497a well44497a0 = new Well44497a((-33));
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      Integer[] integerArray0 = discreteDistribution0.sample(720);
      assertEquals(720, integerArray0.length);
      
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double((-174.8336465585969));
      Double double2 = new Double(224);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double2);
      LinkedList<Pair<String, Double>> linkedList4 = new LinkedList<Pair<String, Double>>();
      linkedList4.add(pair1);
      Pair<String, Double> pair2 = new Pair<String, Double>("^K6Qcg", double2);
      linkedList4.add(pair2);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well1024a0, linkedList4);
      double double3 = discreteDistribution2.probability((String) null);
      assertEquals(0.5, double3, 0.01);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution1.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      int int0 = 720;
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Integer.getInteger("NH*qqeL 9M:h9'qo");
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      int int1 = 2150;
      Well44497a well44497a0 = new Well44497a(2150);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution1.sample(489);
      int[] intArray0 = new int[8];
      intArray0[0] = 1339;
      intArray0[1] = 1522;
      intArray0[0] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1339;
      intArray0[5] = 720;
      intArray0[6] = 1339;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution0.sample(1522);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("?VZ\u0007u&4", double0);
      linkedList3.add(pair1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well1024a0, linkedList3);
      discreteDistribution2.sample(2);
      Well1024a well1024a1 = new Well1024a();
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(well1024a1, linkedList1);
      discreteDistribution3.sample(1339);
      String string0 = discreteDistribution2.sample();
      assertEquals("?VZ\u0007u&4", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well44497a well44497a0 = new Well44497a((-33));
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      Integer[] integerArray0 = discreteDistribution0.sample(720);
      assertEquals(720, integerArray0.length);
      
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double((-1470.6963));
      Pair<String, Double> pair1 = new Pair<String, Double>("BZPrA", double1);
      LinkedList<Pair<String, Double>> linkedList4 = new LinkedList<Pair<String, Double>>();
      Double double2 = new Double(224);
      Pair<String, Double> pair2 = new Pair<String, Double>("^Kcbg", double2);
      linkedList4.add(pair2);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well1024a0, linkedList4);
      double double3 = discreteDistribution2.probability((String) null);
      assertEquals(0.0, double3, 0.01);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution1.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      discreteDistribution1.sample(489);
      int[] intArray0 = new int[8];
      intArray0[0] = 1339;
      intArray0[1] = 1522;
      intArray0[0] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1339;
      intArray0[5] = 720;
      intArray0[6] = 1339;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Integer[] integerArray0 = discreteDistribution0.sample(1522);
      assertEquals(1522, integerArray0.length);
      
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("?VZ\u0007u&4", double0);
      linkedList3.add(pair1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well1024a0, linkedList3);
      double double1 = discreteDistribution2.probability("?VZ\u0007u&4");
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well44497a well44497a0 = new Well44497a(2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      discreteDistribution1.sample(489);
      int[] intArray0 = new int[8];
      intArray0[0] = 1339;
      intArray0[1] = 1522;
      intArray0[0] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1339;
      intArray0[5] = 720;
      intArray0[6] = 1339;
      intArray0[7] = 489;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Integer[] integerArray0 = discreteDistribution0.sample(1522);
      assertEquals(1522, integerArray0.length);
      
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("?VZ\u0007u&4", double0);
      linkedList3.add(pair1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well1024a0, linkedList3);
      double double1 = discreteDistribution2.probability("");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-1.0F));
      linkedList0.clone();
      Double double0 = new Double(0.47986200306464943);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.offer(pair0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      int int0 = (-2439);
      try { 
        discreteDistribution0.sample((-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,038)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 720;
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Well44497a well44497a0 = new Well44497a(2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497a0, linkedList0);
      discreteDistribution1.sample(2);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add((Pair<Double, Double>) null);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      int int0 = 720;
      Integer integer0 = new Integer(720);
      Double double0 = new Double(720);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Well44497a well44497a0 = new Well44497a(2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497a0, linkedList1);
      discreteDistribution1.sample(2);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      linkedList2.add((Pair<Double, Double>) null);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(well44497a0, linkedList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 2505;
      Integer integer0 = new Integer(2505);
      Double double0 = new Double(741.6768492123354);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      int int1 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1962);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 4140;
      Integer integer0 = new Integer(4140);
      Double double0 = new Double(4140);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      try { 
        discreteDistribution0.sample((-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-19)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add((Pair<Integer, Double>) null);
      int int0 = 0;
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Double double0 = new Double(741.6768492123354);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)80;
      Byte byte1 = new Byte((byte)80);
      Double double0 = new Double(0.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1323));
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well44497a0, (List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-475.60045));
      Pair<String, Double> pair0 = new Pair<String, Double>("(", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -475.6 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-687.9417));
      Pair<String, Double> pair0 = new Pair<String, Double>("35}ADtH", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -687.942 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 654L;
      ISAACRandom iSAACRandom0 = new ISAACRandom(654L);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(iSAACRandom0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1774));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 4140;
      Integer integer0 = new Integer(4140);
      Double double0 = new Double(4140);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)4;
      Byte byte1 = new Byte((byte)4);
      linkedList0.remove((Object) byte1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
