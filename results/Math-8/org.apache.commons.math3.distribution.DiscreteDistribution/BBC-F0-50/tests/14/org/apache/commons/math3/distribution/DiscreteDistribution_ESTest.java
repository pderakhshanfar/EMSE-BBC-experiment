/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:06 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(2720.5559);
      Double double1 = new Double(1418.3915043555);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 2935;
      intArray0[2] = (-68);
      intArray0[3] = 3668;
      intArray0[4] = (-1805);
      intArray0[5] = (-2280);
      intArray0[6] = 239;
      intArray0[7] = 532;
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      discreteDistribution2.probability((Double) null);
      discreteDistribution1.getSamples();
      Well44497b well44497b0 = new Well44497b(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(2720.5559);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      Double double1 = new Double(2720.5559);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1734L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(2720.5559);
      Double double1 = new Double(2720.5559);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Byte byte0 = new Byte((byte) (-1));
      Double double2 = new Double(2720.5559);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double2);
      linkedList0.offerLast(pair1);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.getSamples();
      int int0 = 293786036;
      // Undeclared exception!
      discreteDistribution0.sample(int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)60;
      Byte byte1 = new Byte((byte)60);
      Double double0 = new Double((byte)60);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.addLast(pair0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)99);
      Double double0 = new Double((byte)99);
      Double double1 = new Double((byte)99);
      Double double2 = new Double(2.0842827711783212E-52);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      Double double3 = new Double(2.0842827711783212E-52);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double3);
      Float float0 = new Float(1828.9753F);
      Double double4 = new Double(2.707178052117959E195);
      Float float1 = new Float((-1.0F));
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float1, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Pair<Float, Double> pair3 = new Pair<Float, Double>((Float) null, double2);
      linkedList1.add(pair3);
      Float float2 = new Float((float) (byte)99);
      Float float3 = new Float((float) (byte)99);
      Well19937a well19937a0 = new Well19937a((int) (byte)99);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well19937a0, linkedList1);
      Float float4 = new Float((-1.0F));
      discreteDistribution0.probability(float4);
      long long0 = 1L;
      System.setCurrentTimeMillis(1301);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      byte byte0 = (byte)116;
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      Double double0 = new Double((byte) (-1));
      Byte byte3 = new Byte((byte) (-1));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte3, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.addLast(pair0);
      Well1024a well1024a0 = new Well1024a((int[]) null);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well1024a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2283.9049767240695);
      Double double1 = new Double(4206.037133841778);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(261);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample();
      try { 
        discreteDistribution1.sample((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,172)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(1788.16232);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList0.addLast(pair0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2704;
      intArray0[1] = 3262;
      intArray0[2] = 2704;
      intArray0[3] = 1481;
      Well1024a well1024a0 = new Well1024a(intArray0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well1024a0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(synchronizedRandomGenerator0, linkedList0);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(list0);
      List<Pair<Byte, Double>> list1 = discreteDistribution1.getSamples();
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(list1);
      discreteDistribution2.sample();
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Integer>(synchronizedRandomGenerator0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(695.3076423808494);
      Double double1 = new Double((byte)116);
      Double double2 = new Double((-1.0));
      Double double3 = new Double((-1.0));
      Double double4 = new Double(1576.8388457);
      Double double5 = new Double(0.8289295377851877);
      Double double6 = new Double(695.3076423808494);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double4, double6);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double7 = new Double((-363.53725253154));
      Double double8 = new Double(4202.174879024877);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double8);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2285.63176606929);
      Double double1 = new Double(4202.174879024877);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution1.sample(4358);
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)99;
      Byte byte1 = new Byte((byte)99);
      Double double0 = new Double((byte)99);
      Double double1 = new Double((byte)99);
      Double double2 = new Double(2.0842827711783212E-52);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      Double double3 = new Double((byte)99);
      Double double4 = new Double(2.0842827711783212E-52);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Float float0 = new Float((float) (byte)99);
      Double double5 = new Double(2.0842827711783212E-52);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float0, double5);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      Pair<Float, Double> pair4 = new Pair<Float, Double>(float0, double4);
      linkedList2.add(pair4);
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-1.0F));
      Well19937a well19937a0 = new Well19937a(1301);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well19937a0, linkedList2);
      discreteDistribution0.probability(float0);
      System.setCurrentTimeMillis(1L);
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)99);
      Double double0 = new Double((byte)99);
      Double double1 = new Double((byte)99);
      Double double2 = new Double((-1015.79694));
      Double double3 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double3);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2283.9049767240695);
      Double double1 = new Double(4206.037133841778);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(261);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample();
      try { 
        discreteDistribution1.sample((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,172)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1);
      Double double0 = new Double((short)1);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      Short short1 = new Short((short) (-1));
      Double double1 = new Double(1.2297456769063303E-80);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(short1, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Short short2 = discreteDistribution0.sample();
      assertEquals((short)1, (short)short2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2285.63176606929);
      Double double1 = new Double(2285.63176606929);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = (-2172);
      discreteDistribution0.reseedRandomGenerator(0L);
      try { 
        discreteDistribution0.sample((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,172)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2285.63176606929);
      Double double1 = new Double(4212.54);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = 261;
      discreteDistribution0.sample(261);
      int int1 = (-3404);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      try { 
        discreteDistribution1.sample((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,172)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2285.63176606929);
      Double double1 = new Double(4212.54);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = (-2172);
      try { 
        discreteDistribution0.sample((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,172)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double((-5755.11971989));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.add(pair0);
      linkedList0.clone();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,755.12 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2688.454593031);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(719.63955712107);
      Pair<String, Double> pair2 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 511;
      intArray0[1] = 46;
      intArray0[2] = (-1575);
      intArray0[3] = (-485);
      intArray0[4] = 218;
      intArray0[5] = (-1);
      intArray0[6] = (-2723);
      intArray0[7] = 1319;
      intArray0[8] = (-81);
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      mersenneTwister0.nextLong();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-114);
      mersenneTwister0.nextBytes(byteArray0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = "org.apache.commons.math3.distribution.DiscreteDistribution";
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Pair<Double, Float>, Double>> linkedList0 = new LinkedList<Pair<Pair<Double, Float>, Double>>();
      linkedList0.clone();
      DiscreteDistribution<Pair<Double, Float>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Double, Float>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
