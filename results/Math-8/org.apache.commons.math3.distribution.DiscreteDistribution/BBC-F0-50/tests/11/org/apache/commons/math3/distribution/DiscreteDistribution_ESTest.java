/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:45:25 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(5758.3);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>("", double0);
      linkedList1.addFirst(pair0);
      linkedList1.add(pair1);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList1);
      linkedList1.listIterator();
      Well512a well512a0 = new Well512a();
      well512a0.clear();
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(4173);
      discreteDistribution0.probability("9UHTy1h");
      linkedList1.add(pair0);
      System.setCurrentTimeMillis(4173);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double((-3071.64));
      Double double1 = new Double(0.5);
      Pair<String, Double> pair0 = new Pair<String, Double>("1i=N3t``-T`\" i/>", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      double double2 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.2252869296309885);
      Double double1 = new Double(0.2763448224149536);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      double double2 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(792.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.offerLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("");
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2767.7148923963);
      Float float0 = new Float(0.0F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      linkedList2.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList2);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList2);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(792.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.offerLast(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.probability("org.apache.commons.math3.distribution.DiscreteDistribution");
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1759.63);
      Pair<String, Double> pair0 = new Pair<String, Double>("3n~*7EuH(!+\" ", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.addFirst(pair0);
      linkedList1.add(pair0);
      Well512a well512a0 = new Well512a();
      well512a0.nextFloat();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      well512a0.clear();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(4177);
      discreteDistribution0.reseedRandomGenerator(0L);
      int int0 = (-1);
      // Undeclared exception!
      discreteDistribution0.sample(4177);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-1583.807182449));
      Pair<String, Double> pair0 = new Pair<String, Double>("16vF|Sco2`&801", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      int int0 = 0;
      int int1 = (-742006068);
      Well512a well512a0 = new Well512a((-742006068));
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,583.807 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(191);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1411.11399);
      Pair<String, Double> pair0 = new Pair<String, Double>("iterator exhausted", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(36.007784754464794);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      Float float0 = new Float(0.0F);
      Double double1 = Double.valueOf(883.168091661);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(1527L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1793.8);
      Pair<String, Double> pair0 = new Pair<String, Double>("16vF|Sco2`&801", double0);
      linkedList1.offer(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a(0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      discreteDistribution0.sample(3);
      Well1024a well1024a0 = new Well1024a((int[]) null);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      System.setCurrentTimeMillis((-779L));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(95.7590791833);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      int int0 = 2147094465;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2147094465);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1793.8);
      Pair<String, Double> pair0 = new Pair<String, Double>("16vF|Sco2`&801", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a(0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      discreteDistribution0.sample(3);
      discreteDistribution0.reseedRandomGenerator(0L);
      Well19937c well19937c0 = new Well19937c((int[]) null);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1156));
      discreteDistribution0.reseedRandomGenerator((-1478L));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      double double0 = 1793.8;
      Double double1 = new Double(1793.8);
      Double double2 = new Double(1548.217);
      Pair<String, Double> pair0 = new Pair<String, Double>("16vF|Sco2`&801", double2);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>("16vF|Sco2`&801", double1);
      linkedList1.add(pair2);
      Well512a well512a0 = new Well512a(0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(36.007784754464794);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.getSamples();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1793.8);
      Pair<String, Double> pair0 = new Pair<String, Double>("16vF|Sco2`&801", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair0);
      Well512a well512a0 = new Well512a(0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList2);
      try { 
        discreteDistribution0.sample((-1169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,169)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1793.8);
      Pair<String, Double> pair0 = new Pair<String, Double>("16vF|Sco2`&801", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a(0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList1);
      discreteDistribution0.sample(3);
      Well1024a well1024a0 = new Well1024a((int[]) null);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      Pair<Integer, Float> pair0 = (Pair<Integer, Float>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Integer, Float> pair1 = new Pair<Integer, Float>(pair0);
      double double0 = (-995.3775559);
      Double double1 = new Double((-995.3775559));
      Pair<Pair<Integer, Float>, Double> pair2 = new Pair<Pair<Integer, Float>, Double>(pair1, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Float>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Float>>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -995.378 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-3));
      Double double0 = new Double((byte) (-3));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      linkedList0.parallelStream();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      linkedList0.add((Pair<Long, Double>) null);
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      linkedList0.add((Pair<Long, Double>) null);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 0L;
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(iSAACRandom0, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      well44497a0.nextBoolean();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      well44497a0.nextBoolean();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(36.007784754464794);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.getSamples();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 279;
      intArray0[2] = 3353;
      intArray0[3] = 0;
      intArray0[4] = 4026;
      intArray0[5] = (-977);
      intArray0[6] = (-1156);
      intArray0[7] = 0;
      intArray0[8] = (-718);
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
