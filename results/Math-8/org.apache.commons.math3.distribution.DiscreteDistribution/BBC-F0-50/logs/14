* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.math3.distribution.DiscreteDistribution
* Starting Client-0
* Connecting to master process on port 11712
* Analyzing classpath: 
  - subjects/buggy-versions/Math-8/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.distribution.DiscreteDistribution
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 245
* Using seed 204551964
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 62 / 245
[MASTER] 13:33:01.161 [logback-2] ERROR TestCluster - Failed to check cache for org.apache.commons.math3.util.Pair<K, V> : Type points to itself
[MASTER] 13:36:29.583 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: Line 148: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: Line 144: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.reseedRandomGenerator(J)V: Line 110: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.reseedRandomGenerator(J)V: root-Branch: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.reseedRandomGenerator(J)V: Line 111: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: Line 132: 1278
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I3 Branch 11 IFGT L182 - false: 708
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: I19 Branch 9 IF_ICMPGE L160 - true: 12452
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: Line 160: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: Line 158: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: Line 157: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: Line 125: 1278
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: I19 Branch 9 IF_ICMPGE L160 - false: 141
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I22 Branch 5 IFNULL L126 - true: 288
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: Line 123: 1278
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I3 Branch 11 IFGT L182 - true: 783
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I22 Branch 5 IFNULL L126 - false: 130
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I13 Branch 3 IF_ICMPGE L125 - true: 1278
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: I18 Branch 8 IF_ICMPGE L144 - true: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I13 Branch 3 IF_ICMPGE L125 - false: 1278
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I25 Branch 6 IFNULL L126 - true: 130
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: I18 Branch 8 IF_ICMPGE L144 - false: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.<init>(Ljava/util/List;)V: Line 69: 20113
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.<init>(Ljava/util/List;)V: Line 70: 100
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: Line 142: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: I34 Branch 10 IFGE L162 - true: 125
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I17 Branch 4 IFNONNULL L126 - false: 130
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I32 Branch 7 IFEQ L126 - false: 96
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I32 Branch 12 IF_ICMPGE L189 - false: 77
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: Line 182: 708
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I32 Branch 12 IF_ICMPGE L189 - true: 77
Number of times BBC is called in total: 44964
* Search finished after 602s and 229 generations, 116429 statements, best individual has fitness: 34.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 13:44:14.301 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 95%
* Total number of goals: 38
* Number of covered goals: 36
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 127
* Number of covered goals: 115
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 14
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Generated 23 tests with total length 485
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 46%
* Compiling and checking tests
[MASTER] 13:45:38.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.runners.model.TestTimedOutException: test timed out after 4000 milliseconds
[MASTER] 13:45:38.754 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
Double double0 = new Double(685.7215150143254);
Double double1 = new Double(1.0);
Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
linkedList0.add(pair0);
DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
int int0 = 350149068;
discreteDistribution1.sample(int0);

[MASTER] 13:45:44.402 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 13:45:44.412 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Double double0 = new Double(97.83224880132);
Byte byte0 = new Byte((byte)0);
Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
linkedList0.add(pair0);
Well44497b well44497b0 = new Well44497b(3769);
DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497b0, linkedList0);
linkedList0.toArray();
Byte byte1 = new Byte((byte)19);
Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte1, double0);
linkedList0.add(pair1);
Well44497b well44497b1 = new Well44497b(1068924633);
DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(well44497b0, linkedList0);
int[] intArray0 = new int[0];
Well44497b well44497b2 = new Well44497b(intArray0);
well44497b2.nextDouble();
discreteDistribution1.getSamples();
discreteDistribution0.sample(1068924633);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'DiscreteDistribution_ESTest' to results/Math-8/org.apache.commons.math3.distribution.DiscreteDistribution/BBC-F0-50/tests/14
* Done!

* Computation finished
