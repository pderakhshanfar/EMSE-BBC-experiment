* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.math3.distribution.DiscreteDistribution
* Starting Client-0
* Connecting to master process on port 21331
* Analyzing classpath: 
  - subjects/buggy-versions/Math-8/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.distribution.DiscreteDistribution
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 245
* Using seed 2223045336
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 62 / 245
[MASTER] 13:32:51.913 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;
[MASTER] 13:34:07.472 [logback-2] ERROR TestCluster - Failed to check cache for org.apache.commons.math3.util.Pair<K, V> : Type points to itself
[MASTER] 13:40:59.293 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: Line 148: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: Line 144: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.reseedRandomGenerator(J)V: Line 110: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.reseedRandomGenerator(J)V: root-Branch: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.reseedRandomGenerator(J)V: Line 111: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: Line 132: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I3 Branch 11 IFGT L182 - false: 43
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: I19 Branch 9 IF_ICMPGE L160 - true: 9892
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: Line 160: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: Line 158: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: Line 157: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: Line 125: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: I19 Branch 9 IF_ICMPGE L160 - false: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I22 Branch 5 IFNULL L126 - true: 222
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: Line 123: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I3 Branch 11 IFGT L182 - true: 126
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I22 Branch 5 IFNULL L126 - false: 145
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I13 Branch 3 IF_ICMPGE L125 - true: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: I18 Branch 8 IF_ICMPGE L144 - true: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I13 Branch 3 IF_ICMPGE L125 - false: 334
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I25 Branch 6 IFNULL L126 - true: 145
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: I18 Branch 8 IF_ICMPGE L144 - false: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.<init>(Ljava/util/List;)V: Line 69: 15913
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.<init>(Ljava/util/List;)V: Line 70: 30
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.getSamples()Ljava/util/List;: Line 142: 135
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample()Ljava/lang/Object;: I34 Branch 10 IFGE L162 - true: 64
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I32 Branch 7 IFEQ L126 - true: 67
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.probability(Ljava/lang/Object;)D: I17 Branch 4 IFNONNULL L126 - false: 145
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I32 Branch 12 IF_ICMPGE L189 - false: 91
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: Line 182: 43
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.sample(I)[Ljava/lang/Object;: I32 Branch 12 IF_ICMPGE L189 - true: 91
Number of times BBC is called for org.apache.commons.math3.distribution.DiscreteDistribution.<init>(Lorg/apache/commons/math3/random/RandomGenerator;Ljava/util/List;)V: Line 102: 28
Number of times BBC is called in total: 30932
* Search finished after 601s and 169 generations, 87506 statements, best individual has fitness: 32.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 38
* Number of covered goals: 36
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 91%
* Total number of goals: 11
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 127
* Number of covered goals: 116
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 14
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Generated 20 tests with total length 114
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 58%
* Compiling and checking tests
[MASTER] 13:44:39.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 13:44:39.667 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
Double double0 = new Double(0.46282941753402174);
Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
linkedList0.add(pair0);
DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
discreteDistribution0.sample(Integer.MAX_VALUE);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'DiscreteDistribution_ESTest' to results/Math-8/org.apache.commons.math3.distribution.DiscreteDistribution/BBC-F0-50/tests/10
* Done!

* Computation finished
