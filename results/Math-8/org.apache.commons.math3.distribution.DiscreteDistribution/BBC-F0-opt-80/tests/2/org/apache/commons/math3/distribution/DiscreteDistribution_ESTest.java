/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:11:19 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(5731.745355401764);
      assertEquals(5731.745355401764, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      discreteDistribution0.sample(278592013);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.6466736793518066);
      assertEquals(0.6466736793518066, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(well19937a0);
      
      double double1 = well19937a0.nextDouble();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.14112176589613368, double1, 0.01);
      
      Double double2 = new Double(2126.6);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(2126.6, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.14112176589613368);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.14112176589613368, (double)double3, 0.01);
      assertNotNull(double3);
      
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double2);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(linkedList0.contains(pair0));
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertNotSame(pair1, pair0);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(0, intArray0.length);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertEquals(0, intArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      double double4 = discreteDistribution0.probability((Double) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(linkedList0.contains(pair0));
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0.9996960043762892, double4, 0.01);
      assertEquals(2, linkedList0.size());
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4092);
      assertNotNull(well19937a0);
      
      Integer integer0 = new Integer(742);
      assertEquals(742, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(742);
      assertEquals(742.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.9514402725169275);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.9514402725169275, (double)double2, 0.01);
      assertNotNull(double2);
      
      double double3 = well19937a0.nextDouble();
      assertEquals(0.6934552677530388, double3, 0.01);
      
      Double double4 = new Double((-2129.0));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((-2129.0), (double)double4, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double(0.6466736793518066);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals(0.6466736793518066, (double)double5, 0.01);
      assertNotNull(double5);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double4, double5);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      double double6 = discreteDistribution0.probability((Double) null);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(1, linkedList1.size());
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4092);
      assertNotNull(well19937a0);
      
      double double0 = well19937a0.nextGaussian();
      assertEquals((-0.14436082127859187), double0, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double1 = new Double(283.62);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(283.62, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.6466736793518066);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.6466736793518066, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      Double[] doubleArray0 = discreteDistribution0.sample(79);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(79, doubleArray0.length);
      assertEquals(1, linkedList1.size());
      assertNotNull(doubleArray0);
      
      double double4 = discreteDistribution0.probability(double3);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(1, linkedList1.size());
      
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4092);
      assertNotNull(well19937a0);
      
      double double0 = well19937a0.nextGaussian();
      assertEquals((-0.14436082127859187), double0, 0.01);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double1 = new Double((-2129.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2129.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.6466736793518066);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.6466736793518066, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(2559.37887319);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(2559.37887319, (double)double3, 0.01);
      assertNotNull(double3);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double3);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      Double[] doubleArray0 = discreteDistribution0.sample(4092);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(4092, doubleArray0.length);
      assertEquals(1, linkedList1.size());
      assertNotNull(doubleArray0);
      
      double double4 = discreteDistribution0.probability(double2);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertEquals(1, linkedList1.size());
      
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(2303.69886203);
      assertEquals(2303.69886203, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      assertNotNull(iSAACRandom0);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(iSAACRandom0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      Double double1 = discreteDistribution0.sample();
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNull(double1);
      
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-868453034));
      assertNotNull(well19937a0);
      
      int int0 = 2144538236;
      int int1 = well19937a0.nextInt(2144538236);
      assertFalse(int1 == int0);
      assertEquals(1926668704, int1);
      
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(2144538236);
      assertEquals(2.144538236E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well19937a0, linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double1 = new Double(2144538236);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.144538236E9, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<String, Double> pair1 = new Pair<String, Double>("-QMZS>]Ir", double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair1);
      
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      boolean boolean1 = linkedList1.offer(pair2);
      assertTrue(linkedList1.contains(pair1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair2));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList1.size());
      assertNotSame(pair1, pair2);
      assertNotSame(pair2, pair1);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution1);
      
      String string0 = discreteDistribution1.sample();
      assertTrue(linkedList1.contains(pair1));
      assertEquals("-QMZS>]Ir", string0);
      assertEquals(1, linkedList1.size());
      assertNotNull(string0);
      
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4082);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(4082);
      assertEquals(4082.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1107.748));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1107.748), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1107.748));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1107.748), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.12414999241900326);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.12414999241900326, (double)double3, 0.01);
      assertNotNull(double3);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double3);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 4078;
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1688.9656839);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1688.9656839, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2559.37887319);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(2559.37887319, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-51.2));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((-51.2), (double)double3, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(1688.9656839);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals(1688.9656839, (double)double4, 0.01);
      assertNotNull(double4);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double4);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      int int1 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.6354494411309848);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.6354494411309848, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution1);
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4078);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(4078.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1688.9656839);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(1688.9656839, (double)double2, 0.01);
      assertNotNull(double2);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double2);
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample((-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,182)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2559.37887319);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2559.37887319, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(135.71588505326);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(135.71588505326, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(2559.37887319);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(2559.37887319, (double)double3, 0.01);
      assertNotNull(double3);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double3);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Double[] doubleArray0 = discreteDistribution0.sample(230);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(230, doubleArray0.length);
      assertEquals(1, linkedList1.size());
      assertNotNull(doubleArray0);
      
      Double double4 = discreteDistribution0.sample();
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(135.71588505326, (double)double4, 0.01);
      assertEquals(1, linkedList1.size());
      assertNotNull(double4);
      
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2559.37887319);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2559.37887319, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      
      Double double2 = discreteDistribution0.sample();
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1688.9656839, (double)double2, 0.01);
      assertEquals(1, linkedList1.size());
      assertNotNull(double2);
      
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      LinkedList<Pair<Long, Double>> linkedList3 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList3.size());
      assertNotNull(linkedList3);
      
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(well19937a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2559.37887319);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2559.37887319, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      Double[] doubleArray0 = discreteDistribution0.sample(4078);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(4078, doubleArray0.length);
      assertEquals(1, linkedList1.size());
      assertNotNull(doubleArray0);
      
      Double double2 = discreteDistribution0.sample();
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1688.9656839, (double)double2, 0.01);
      assertEquals(1, linkedList1.size());
      assertNotNull(double2);
      
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Well19937a well19937a0 = new Well19937a(4078);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Double double0 = new Double(1688.9656839);
      assertEquals(1688.9656839, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(957.6);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(957.6, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      linkedList1.addFirst(pair1);
      assertTrue(linkedList1.contains(pair0));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertEquals(1, linkedList1.size());
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      
      Double double2 = new Double(2559.37887319);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(2559.37887319, (double)double2, 0.01);
      assertNotNull(double2);
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      assertNotNull(pair2);
      
      boolean boolean0 = linkedList1.add(pair2);
      assertTrue(linkedList1.contains(pair2));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      assertTrue(boolean0);
      assertEquals(2, linkedList1.size());
      assertNotSame(pair2, pair1);
      assertNotSame(pair2, pair0);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      assertTrue(linkedList1.contains(pair2));
      assertEquals(2, linkedList1.size());
      assertNotNull(discreteDistribution0);
      
      Double double3 = discreteDistribution0.sample();
      assertTrue(linkedList1.contains(pair2));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1688.9656839, (double)double3, 0.01);
      assertEquals(2, linkedList1.size());
      assertNotNull(double3);
      
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      System.setCurrentTimeMillis((-2529L));
      Double double0 = new Double((-2668.1834442724276));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,668.183 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Well19937a well19937a0 = new Well19937a(4078);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1688.9656839);
      Double double1 = new Double(2559.37887319);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(525.104586);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-1765);
      Well19937a well19937a0 = new Well19937a((-1765));
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("dY1 S+yaE05Q;L7zH", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      long long0 = 0L;
      Long long1 = new Long(0L);
      Double double0 = Double.valueOf((-2668.1834442724276));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,668.183 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.add((Pair<Object, Double>) null);
      linkedList0.add((Pair<Object, Double>) null);
      Double double0 = new Double(0.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
