/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:17:07 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-3183605296591799669L));
      Double double0 = new Double(474L);
      Long long1 = new Long(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 305453772;
      // Undeclared exception!
      discreteDistribution0.sample(305453772);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      Well44497b well44497b0 = new Well44497b(1358);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(29.098603);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair2);
      Pair<String, Double> pair3 = new Pair<String, Double>("|i|?", double0);
      Pair<Object, Double> pair4 = new Pair<Object, Double>(pair3);
      linkedList1.add(pair4);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(well44497b0, list0);
      discreteDistribution2.getSamples();
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(list0);
      Float float1 = new Float((-1.0F));
      DiscreteDistribution<Float> discreteDistribution4 = new DiscreteDistribution<Float>(well44497b0, linkedList0);
      Float float2 = new Float((-1420.0));
      discreteDistribution0.probability(float2);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample(798);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      long long0 = 4415L;
      Long long1 = new Long(4415L);
      Double double0 = new Double(2867.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      linkedList1.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      Well44497b well44497b0 = new Well44497b(1358);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(0.7237328424491021);
      Double double2 = new Double(0.0F);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double2);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution2.getSamples();
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(list0);
      Float float1 = new Float(0.0F);
      Float float2 = new Float(29.098603);
      discreteDistribution0.probability(float2);
      discreteDistribution3.sample();
      discreteDistribution3.sample(1004);
      DiscreteDistribution<Double> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(4415L);
      Double double0 = new Double(2867.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList1);
      List<Pair<Long, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(list0);
      double double1 = discreteDistribution0.probability((Long) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1735.370611753562);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      Well44497b well44497b0 = new Well44497b(1358);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(29.098603);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      discreteDistribution1.getSamples();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution2.getSamples();
      Float float1 = new Float(0.0F);
      discreteDistribution0.probability((Float) null);
      discreteDistribution2.sample(1358);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Long>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = discreteDistribution0.sample();
      Well44497b well44497b0 = new Well44497b(1358);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(0.5042761985628645);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution2.getSamples();
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(list0);
      Float float2 = new Float(0.0F);
      discreteDistribution0.probability(float1);
      // Undeclared exception!
      try { 
        discreteDistribution3.sample(1358);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.getSamples();
      Double double1 = new Double(1735.783);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long0, double1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList1);
      discreteDistribution1.getSamples();
      linkedList1.add(pair3);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      Pair<Long, Double> pair4 = new Pair<Long, Double>(pair2);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution3 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample(37);
      discreteDistribution3.sample(93);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      int int0 = 267;
      Well44497b well44497b0 = new Well44497b(267);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(267);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.sample();
      Float float1 = new Float(1113.62F);
      discreteDistribution0.probability(float1);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample(267);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      int int0 = 267;
      Well44497b well44497b0 = new Well44497b(267);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(267);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      Float float1 = new Float(1113.62F);
      discreteDistribution0.probability(float1);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample(267);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Float float0 = new Float(0.0F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution1.sample();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Float float0 = new Float(0.0F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution0.sample();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(141);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(29.098603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 267;
      Well44497b well44497b0 = new Well44497b(267);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(267);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample(267);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-58));
      Double double0 = new Double((byte) (-58));
      Double double1 = new Double(3534.3440643);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte0, double1);
      linkedList0.add(pair0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator((-838L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList0);
      List<Pair<Long, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(list0);
      System.setCurrentTimeMillis(0L);
      try { 
        discreteDistribution0.sample((-2144805987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,144,805,987)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Double double1 = new Double(2867L);
      Short short0 = new Short((short)814);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      linkedList1.offerFirst(pair0);
      Well512a well512a0 = new Well512a((int) (short)814);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList1);
      discreteDistribution1.reseedRandomGenerator((short)814);
      discreteDistribution1.getSamples();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-58));
      Double double0 = new Double((byte) (-58));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte0, double0);
      linkedList0.add(pair0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -58 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-4105));
      Double double0 = new Double((-4105));
      linkedList0.clone();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,105 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 2741L;
      Well44497b well44497b0 = new Well44497b(2741L);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well44497b0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, (Double) null);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(2867L);
      Double double0 = new Double(2867L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(jDKRandomGenerator0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
