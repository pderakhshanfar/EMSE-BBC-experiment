/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:51:03 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short) (-16853));
      assertNotNull(short0);
      assertEquals((short) (-16853), (short)short0);
      
      Double double0 = new Double((short)1109);
      assertNotNull(double0);
      assertEquals(1109.0, (double)double0, 0.01);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      try { 
        discreteDistribution0.sample((int) (short) (-2099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,099)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short)1108);
      assertNotNull(short0);
      assertEquals((short)1108, (short)short0);
      
      Double double0 = new Double((short)1108);
      assertNotNull(double0);
      assertEquals(1108.0, (double)double0, 0.01);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.offer(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(jDKRandomGenerator0, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      Short[] shortArray0 = discreteDistribution0.sample(1091);
      assertEquals(1091, shortArray0.length);
      assertNotNull(shortArray0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((short)1109);
      assertNotNull(double0);
      assertEquals(1109.0, (double)double0, 0.01);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Short short0 = discreteDistribution0.sample();
      assertNull(short0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double((short)1109);
      assertNotNull(double0);
      assertEquals(1109.0, (double)double0, 0.01);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Pair<String, Double> pair0 = new Pair<String, Double>("cWRJU", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      String string0 = discreteDistribution0.sample();
      assertNotNull(string0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals("cWRJU", string0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((short)30374);
      assertNotNull(double0);
      assertEquals(30374.0, (double)double0, 0.01);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (short)30374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.411907149676064);
      assertNotNull(double0);
      assertEquals(0.411907149676064, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short)352);
      assertNotNull(short0);
      assertEquals((short)352, (short)short0);
      
      Double double0 = new Double((short)352);
      assertNotNull(double0);
      assertEquals(352.0, (double)double0, 0.01);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1844L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Double double0 = new Double(0.24502112046853264);
      assertNotNull(double0);
      assertEquals(0.24502112046853264, (double)double0, 0.01);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      try { 
        discreteDistribution0.sample((int) (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Short short0 = new Short((short)30372);
      Double double0 = new Double(0.45353965377410366);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample((int) (short)30372);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1109);
      Double double0 = new Double((short)1109);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Short short1 = discreteDistribution0.sample();
      assertEquals((short)1109, (short)short1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)30372);
      Double double0 = new Double(0.45353965377410366);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1109);
      Double double0 = new Double((short)1109);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Short short1 = new Short((short) (-1894));
      double double1 = discreteDistribution0.probability(short1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double((short)1109);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      double double1 = discreteDistribution0.probability((Short) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1109);
      Double double0 = new Double((short)1109);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      double double1 = discreteDistribution0.probability((Short) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1109);
      Double double0 = new Double((short)1109);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      double double1 = discreteDistribution0.probability(short0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)210);
      Double double0 = new Double((-1112.67911161464));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,112.679 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)352);
      Double double0 = new Double((short)352);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1844L);
  }
}
