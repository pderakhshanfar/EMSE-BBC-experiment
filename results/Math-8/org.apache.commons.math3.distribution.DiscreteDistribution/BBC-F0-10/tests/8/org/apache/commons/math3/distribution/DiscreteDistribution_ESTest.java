/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:40:25 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(966.620431660268);
      assertEquals(966.620431660268, (double)double0, 0.01);
      assertNotNull(double0);
      
      Well44497a well44497a0 = new Well44497a((-101));
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      try { 
        discreteDistribution0.sample((-4083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-4,083)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(23.549141);
      assertEquals(23.549141, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(819);
      assertEquals(819, (int)integer0);
      assertNotNull(integer0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.offerFirst(pair0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(jDKRandomGenerator0, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      Integer[] integerArray0 = discreteDistribution0.sample(1206);
      assertNotNull(integerArray0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      assertEquals(1206, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      linkedList0.addLast(pair1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(7.90041744728452E-130);
      assertEquals(7.90041744728452E-130, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      Double double1 = discreteDistribution0.sample();
      assertNull(double1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(2145264302);
      assertEquals(2.145264302E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2109135725);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(".=V.", double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair2);
      
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      assertFalse(pair3.equals((Object)pair1));
      assertNotNull(pair3);
      
      boolean boolean1 = linkedList0.add(pair3);
      assertNotSame(pair3, pair1);
      assertTrue(boolean1);
      assertFalse(pair3.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair3));
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair3));
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Byte
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(23.549141);
      assertEquals(23.549141, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(23.549141);
      assertEquals(23.549141, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer((-2298));
      assertEquals((-2298), (int)integer0);
      assertNotNull(integer0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(3044L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1397);
      assertNotNull(mersenneTwister0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double((-1.1574594839975285));
      assertEquals((-1.1574594839975285), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      linkedList0.addLast(pair1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1.157 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = Integer.valueOf(2145264302);
      assertEquals(2145264302, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(7.90041744728452E-130);
      assertEquals(7.90041744728452E-130, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
      
      Integer integer1 = discreteDistribution0.sample();
      assertEquals(2145264302, (int)integer1);
      assertNotNull(integer1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(0.0702886694396041);
      assertEquals(0.0702886694396041, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      assertNotNull(mersenneTwister0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      String string0 = discreteDistribution0.sample();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(pair0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(iSAACRandom0, linkedList0);
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      try { 
        discreteDistribution0.sample((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(23.549141);
      Integer integer0 = new Integer(131072);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(131072);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(23.549141);
      Integer integer0 = new Integer(131072);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(0.613923367747282);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      double double1 = discreteDistribution0.probability("Dab");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(2.716759624268743E271);
      Pair<String, Double> pair0 = new Pair<String, Double>("HTN~bR{{}d&Ml", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(0.613923367747282);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(23.549141);
      Integer integer0 = new Integer(131072);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-620L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double((-620L));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -620 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = new Double(23.549141);
      Integer integer0 = new Integer(131072);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(131072);
  }
}
