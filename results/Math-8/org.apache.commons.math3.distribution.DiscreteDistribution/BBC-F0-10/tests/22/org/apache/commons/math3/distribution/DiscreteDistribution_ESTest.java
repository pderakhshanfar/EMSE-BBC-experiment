/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:59:14 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      LinkedList<Pair<Pair<String, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Object>, Double>>();
      Pair<String, String> pair0 = (Pair<String, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<String, Object> pair1 = new Pair<String, Object>(pair0);
      Double double0 = new Double(0.7340881844588059);
      Pair<Pair<String, Object>, Double> pair2 = new Pair<Pair<String, Object>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<String, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Object>>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1117.233343);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(2.62679952378);
      Integer integer0 = new Integer(1325);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair1);
      linkedList0.offer(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(2284);
      int[] intArray0 = new int[15];
      intArray0[0] = 1325;
      intArray0[1] = 1;
      intArray0[2] = 1499;
      intArray0[3] = 2284;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 2284;
      intArray0[8] = 1325;
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.sample(2605);
      // Undeclared exception!
      discreteDistribution0.sample(2043);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(2.62679952378);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(iSAACRandom0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(2.62679952378);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 4;
      Double double0 = new Double(4);
      Double double1 = new Double(4);
      Double double2 = new Double(4);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.offer(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator((-898L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)483);
      Double double0 = new Double((short)483);
      Double double1 = new Double((-1.0));
      double double2 = 0.7229203666614934;
      Double double3 = new Double(0.7229203666614934);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double3);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.offer(pair1);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(2.62679952378);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = (-1404);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Integer integer0 = new Integer(561);
      Double double0 = new Double(2);
      Integer integer1 = new Integer(561);
      Double double1 = new Double(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.offer(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample((-1023703262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,023,703,262)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)483;
      Short short1 = new Short((short)483);
      Double double0 = new Double((short)483);
      Double double1 = new Double(1.8122539547625083E-230);
      Double double2 = new Double((-1.0));
      Double double3 = new Double((-1.0));
      Double double4 = new Double((short)483);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double3, double4);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.parallelStream();
      linkedList1.offer(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Double double5 = new Double(987.974);
      discreteDistribution0.probability((Double) null);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2);
      Double double0 = new Double(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.offer(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample(2);
      discreteDistribution0.sample();
      discreteDistribution0.sample(2);
      discreteDistribution0.getSamples();
      int[] intArray0 = new int[0];
      MersenneTwister mersenneTwister0 = null;
      try {
        mersenneTwister0 = new MersenneTwister(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.random.MersenneTwister", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1281);
      Double double0 = new Double(1045.10692);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1801L));
      int int0 = (-365);
      Well19937c well19937c0 = new Well19937c((-365));
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)483);
      Integer integer0 = new Integer((short)483);
      Double double0 = new Double(0.5472630262374878);
      Integer integer1 = Integer.getInteger("", (-1030531385));
      Double double1 = new Double(0.1407443866176219);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.offer(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(191);
      Double double0 = new Double(0.629224970001266);
      Integer integer1 = new Integer((-805142190));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      linkedList0.offer(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      try { 
        discreteDistribution0.sample((-805142190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-805,142,190)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2);
      Double double0 = new Double(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.offer(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer[] integerArray0 = discreteDistribution0.sample(2);
      assertEquals(2, integerArray0.length);
      
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)483);
      Double double0 = new Double((short)483);
      Double double1 = new Double((-1.0));
      Double double2 = new Double((short)483);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      Double double3 = new Double(483.0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.offer(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      linkedList1.iterator();
      Double double4 = new Double(0.0);
      discreteDistribution0.probability(double0);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0);
      Double double1 = new Double((-1.0));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)483);
      Double double0 = new Double((short)483);
      Double double1 = new Double((-1.0));
      Double double2 = new Double((short)483);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.offer(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Double double3 = new Double((short)483);
      discreteDistribution0.probability(double1);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 84;
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2019.836808156);
      well19937c0.nextGaussian();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      LinkedList<Pair<Pair<Integer, Long>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Long>, Double>>();
      DiscreteDistribution<Pair<Integer, Long>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Integer, Long>>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(2177L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("weigth array must contain at least one non-zero value", double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1429;
      Well1024a well1024a0 = new Well1024a(1429);
      well1024a0.clear();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add((Pair<Integer, Double>) null);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)483;
      Short short1 = new Short((short)483);
      Double double0 = new Double((short)483);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Byte, Long>, Double>> linkedList1 = new LinkedList<Pair<Pair<Byte, Long>, Double>>();
      DiscreteDistribution<Pair<Byte, Long>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Byte, Long>>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4296;
      intArray0[1] = (-560);
      intArray0[2] = 100;
      intArray0[3] = 2401;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
