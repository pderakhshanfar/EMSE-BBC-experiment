/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 01:04:30 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(1622);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double((-950.97362));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.offerFirst(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(1622);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1611);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(2078.0);
      Byte byte0 = new Byte((byte)73);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList1.removeAll(linkedList0);
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList1);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability((Byte) null);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.35969439666495);
      well44497a0.setSeed((-4802));
      Pair<String, Double> pair0 = new Pair<String, Double>("[</#-", double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.poll();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      discreteDistribution1.sample(1608);
      Double double1 = new Double(1035189912);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2161);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(1611);
      Byte byte0 = new Byte((byte) (-18));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList1.removeAll(linkedList0);
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      discreteDistribution0.sample();
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList1);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution1.probability((Byte) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1611);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(5.583037134407759E-85);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList1.removeAll(linkedList0);
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList1);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList1);
      discreteDistribution2.getSamples();
      discreteDistribution1.probability((Byte) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.3596943966649522);
      Integer integer0 = new Integer((-4802));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      int int0 = 4988;
      discreteDistribution0.sample(4988);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.3596943966649522);
      int int0 = (-4802);
      well44497a0.setSeed((-4802));
      Pair<String, Double> pair0 = new Pair<String, Double>("[</#-", double0);
      int int1 = 1035189912;
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1035189912);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.poll();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      linkedList1.poll();
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      int int2 = 1;
      discreteDistribution1.sample(1);
      Double double1 = new Double(0.3596943966649522);
      discreteDistribution1.probability(double0);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      Pair<String, Double> pair3 = new Pair<String, Double>("[</#-", double0);
      Short short0 = new Short((short)1092);
      linkedList2.removeFirstOccurrence(short0);
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-882L));
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.nextGaussian();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(0.551399945515487);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      well44497b0.nextInt(1378);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(4991);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.3596943966649522);
      well44497a0.setSeed((-4802));
      Pair<String, Double> pair0 = new Pair<String, Double>("[</#-", double0);
      int int0 = 1035189912;
      well44497a0.nextInt(1035189912);
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.poll();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      int int1 = (-1568);
      try { 
        discreteDistribution1.sample((-1568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,568)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.3596943966649522);
      well44497a0.setSeed((-4802));
      Pair<String, Double> pair0 = new Pair<String, Double>("[</#-", double0);
      int int0 = 1035189912;
      well44497a0.nextInt(1035189912);
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.poll();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      int int1 = 1608;
      discreteDistribution1.sample(1608);
      Double double1 = new Double(1035189912);
      discreteDistribution1.probability(double1);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.removeLast();
      linkedList2.removeFirstOccurrence((Object) null);
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(well44497a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1611);
      Double double0 = new Double(1611);
      Integer integer1 = new Integer(1611);
      Double double1 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1611);
      Double double0 = new Double(1611);
      Integer integer1 = new Integer(1611);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample(1611);
      discreteDistribution0.sample(1611);
      discreteDistribution0.reseedRandomGenerator((-1173L));
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.3596943966649522);
      well44497a0.setSeed((-4802));
      Pair<String, Double> pair0 = new Pair<String, Double>("[</#-", double0);
      int int0 = 1035189912;
      int int1 = well44497a0.nextInt(1035189912);
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.poll();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      discreteDistribution1.sample(int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      double double0 = (-46.724038592);
      Double double1 = new Double((-46.724038592));
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -46.724 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1611;
      Integer integer0 = new Integer(1611);
      Double double0 = new Double(1611);
      Double double1 = new Double(1611);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.add(pair0);
      Well19937c well19937c0 = new Well19937c(2145643127);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution1.reseedRandomGenerator(2145643127);
      discreteDistribution1.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-44));
      Double double0 = new Double((byte) (-44));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      String string0 = "LA<KFqE6My PPd!mL";
      Integer.getInteger("LA<KFqE6My PPd!mL");
      Double double1 = new Double(2548.9);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double1);
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((byte) (-44));
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1611);
      Double double0 = new Double(1611);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = null;
      Double double1 = new Double(1611);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double1);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      well19937c0.setSeed(0);
      Short short0 = new Short((short) (-4367));
      Double double0 = new Double(1978.898);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well19937c0, linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1611;
      Integer integer0 = new Integer(1611);
      Double double0 = new Double(1611);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1611);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-44));
      Double double0 = new Double((byte) (-44));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -44 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-227);
      intArray0[2] = 0;
      intArray0[3] = 68;
      int int0 = 60;
      intArray0[4] = 60;
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-1000.17937228));
      Double double1 = new Double(2548.9);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      linkedList0.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) null);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      int int0 = 1;
      Integer integer1 = new Integer(1);
      Double double0 = new Double(3152.0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double0);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, (List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(929L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = (-981L);
      ISAACRandom iSAACRandom0 = new ISAACRandom((-981L));
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
