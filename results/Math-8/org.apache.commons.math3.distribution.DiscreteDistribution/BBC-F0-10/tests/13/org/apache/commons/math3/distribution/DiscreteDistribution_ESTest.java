/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:46:03 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      UnaryOperator<Pair<Object, Double>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Double double0 = new Double(1403.15);
      Double double1 = new Double(1403.15);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      linkedList0.add(pair0);
      discreteDistribution0.sample(1260);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Well19937a well19937a0 = new Well19937a((long) 1260);
      well19937a0.nextFloat();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1260);
      Double double2 = new Double(1260);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      linkedList2.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(linkedList2);
      linkedList2.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution4 = new DiscreteDistribution<Integer>(linkedList2);
      Integer integer1 = new Integer(2513);
      discreteDistribution3.getSamples();
      discreteDistribution4.sample(2513);
      DiscreteDistribution<Integer> discreteDistribution5 = new DiscreteDistribution<Integer>(linkedList2);
      Integer integer2 = new Integer(1260);
      discreteDistribution3.sample(2513);
      discreteDistribution1.probability(well19937a0);
      // Undeclared exception!
      discreteDistribution5.sample(2513);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(848.6327378343252);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      Byte byte0 = new Byte((byte)42);
      Long.getLong("$fvI*W/W");
      double double1 = discreteDistribution0.probability((Object) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.9943623386648752);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList1, double0);
      linkedList1.add(pair0);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Well19937a well19937a0 = new Well19937a(4503599627370496L);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      Object object0 = new Object();
      Long long0 = new Long(1777L);
      discreteDistribution1.probability(long0);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      Byte byte0 = new Byte((byte) (-27));
      discreteDistribution0.probability((Object) null);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      jDKRandomGenerator0.nextFloat();
      DiscreteDistribution<Integer> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Integer>(well19937a0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1403.15);
      Double double1 = new Double(1403.15);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      Double double2 = new Double(1403.15);
      Double double3 = new Double(1.6063569876284005E-8);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double3);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution1.sample();
      discreteDistribution1.sample();
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(1256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.removeAll(linkedList0);
      RandomGenerator randomGenerator0 = null;
      Double double0 = new Double(17.21688147560228);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      Long long0 = new Long(0L);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.probability("");
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.removeAll(linkedList0);
      RandomGenerator randomGenerator0 = null;
      Double double0 = new Double(0.8307952176268174);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(randomAdaptor0, linkedList1);
      Long long0 = new Long(0L);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution1.sample();
      discreteDistribution1.probability(randomAdaptor0);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1403.15);
      Double double1 = new Double(1403.15);
      Byte byte0 = Byte.valueOf((byte) (-3));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.addFirst(pair1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      int int0 = 1260;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1260);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      RandomGenerator randomGenerator0 = null;
      Double double0 = new Double(0.8307952176268174);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(randomAdaptor0, linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomAdaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(0.8307952176268174);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution0.reseedRandomGenerator((-401L));
      System.setCurrentTimeMillis(1260);
      Well19937c well19937c0 = new Well19937c(1240);
      LinkedList<Pair<Short, Double>> linkedList3 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well19937c0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1403.15);
      Double double1 = new Double(1403.15);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      try { 
        discreteDistribution0.sample((-2063));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,063)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1819);
      Double double0 = new Double(657.79478);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer integer1 = discreteDistribution0.sample();
      assertEquals(1819, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.removeAll(linkedList0);
      RandomGenerator randomGenerator0 = null;
      Double double0 = new Double(0.8307952176268174);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(randomAdaptor0, linkedList1);
      Long long0 = new Long(0L);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution1.probability(randomAdaptor0);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1819;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1403.15);
      Double double1 = new Double(1403.15);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample(1260);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Double double1 = new Double(0.0);
      int int0 = 195;
      Integer integer0 = new Integer(195);
      Double double2 = new Double((-1.0));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double2);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 4192;
      MersenneTwister mersenneTwister0 = new MersenneTwister(4192);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(4192);
      Double double0 = new Double(4192);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample(4192);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(1561.72);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(44497);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("s|R^/.`BDCZ8&+iB0Y", double0);
      linkedList0.push(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-306);
      Integer integer0 = Integer.valueOf((-306));
      Double double0 = new Double((-306));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      well19937c0.nextGaussian();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -306 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3392;
      intArray0[2] = 314;
      intArray0[3] = 3677;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 89;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1819);
      Double double0 = new Double(657.79478);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer integer1 = discreteDistribution0.sample();
      assertEquals(1819, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
