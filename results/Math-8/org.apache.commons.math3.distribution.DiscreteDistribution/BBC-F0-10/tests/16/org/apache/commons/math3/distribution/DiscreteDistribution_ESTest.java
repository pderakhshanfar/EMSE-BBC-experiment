/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:53:12 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(16.6897733365703);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = new Pair<String, Double>("-Bup'#GloUNV@_f", double0);
      linkedList0.add(pair0);
      int int0 = 1;
      int[] intArray0 = new int[4];
      intArray0[0] = (-201);
      intArray0[1] = 1563;
      intArray0[2] = 1563;
      intArray0[3] = 1;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      int int1 = 1571;
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(19.150273543848805);
      Pair<String, Double> pair0 = new Pair<String, Double>("awZ:xE6PeO7*7;iI*q", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(1676.4262865183878);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.probability((String) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(123.894);
      Pair<String, Double> pair0 = new Pair<String, Double>("@0kV$luSadH2.i$q_", double0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.getSamples();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      int int0 = 1465;
      discreteDistribution2.sample(1465);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Long, Double>> linkedList3 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Object, Double>> linkedList4 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution1.probability("@0kV$luSadH2.i$q_");
      discreteDistribution0.getSamples();
      Well19937a well19937a0 = new Well19937a((long) 1465);
      DiscreteDistribution<Float> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Float>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(123.894);
      Pair<String, Double> pair0 = new Pair<String, Double>("@0kV$luSadH2.i$q_", double0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.getSamples();
      linkedList1.add(pair0);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.sample(486);
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Long, Double>> linkedList4 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Object, Double>> linkedList5 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution1.probability((String) null);
      discreteDistribution0.getSamples();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(123.894);
      Pair<String, Double> pair0 = new Pair<String, Double>("@0kV$luSadH2.i$q_", double0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.getSamples();
      linkedList1.add(pair0);
      Well44497a well44497a0 = new Well44497a(486);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well44497a0, linkedList1);
      discreteDistribution2.getSamples();
      discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.sample(486);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Long, Double>> linkedList3 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Object, Double>> linkedList4 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution0.probability("}(GZF'Se|<8");
      discreteDistribution2.getSamples();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(5343.97262);
      Pair<String, Double> pair0 = new Pair<String, Double>("bOx1P$", double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Long long1 = new Long(3952090531849364496L);
      Double double0 = new Double(1664525L);
      Double double1 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double1);
      linkedList1.add(pair0);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList2.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList2);
      int int0 = 1;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-481L));
      Long long1 = new Long((-481L));
      Double double0 = new Double(742.35644145671);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      linkedList0.add(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("(:iKZ+[", double0);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((-3426L));
      discreteDistribution0.sample(1);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.sample();
      discreteDistribution1.sample(1);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      linkedList2.spliterator();
      LinkedList<Pair<Long, Double>> linkedList3 = new LinkedList<Pair<Long, Double>>();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(5343.97262);
      Pair<String, Double> pair0 = new Pair<String, Double>("bOx1P$", double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      int int0 = 9997;
      discreteDistribution1.sample(9997);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1494.0);
      Double double1 = new Double(1494.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("INVALID_BINARY_DIGIT", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      // Undeclared exception!
      discreteDistribution0.sample(71533395);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1494.0);
      Double double1 = new Double(1494.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution1.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Well44497b well44497b0 = new Well44497b(9223372036854775807L);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1408L);
      Double double0 = new Double(1408L);
      Long long1 = new Long(1026L);
      Double double1 = new Double(1.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double1);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      linkedList2.add(pair0);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("NO_CONVERGENCE_WITH_ANY_START_POINT", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>("", double1);
      linkedList3.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList3);
      discreteDistribution0.sample(1936);
      linkedList3.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList3);
      LinkedList<Pair<Float, Double>> linkedList4 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-462L));
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-462L));
      Double double0 = new Double(742.35644145671);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      well44497b0.nextGaussian();
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1387L));
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-462L);
      Well44497b well44497b0 = new Well44497b((-462L));
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long1 = new Long((-462L));
      Double double0 = new Double(742.35644145671);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      linkedList0.add(pair0);
      int int0 = (-1214);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("NO_CONVERGENCE_WITH_ANY_START_POINT", double0);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      try { 
        discreteDistribution0.sample((-1214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,214)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-462L);
      Well44497b well44497b0 = new Well44497b((-462L));
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long1 = new Long((-462L));
      Double double0 = new Double((-462L));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -462 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-717.64031652389));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -717.64 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-462L));
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-462L));
      Double double0 = new Double(742.35644145671);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      well44497b0.nextGaussian();
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1387L));
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.add((Pair<Byte, Double>) null);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well44497b0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2022.957342119);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 1215L;
      Well19937c well19937c0 = new Well19937c(1215L);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
