/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 01:06:58 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Pair<Double, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Double, String>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Pair<Double, String> pair0 = (Pair<Double, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Double, String> pair1 = new Pair<Double, String>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Double double0 = new Double(1366.45619);
      assertEquals(1366.45619, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Pair<Double, String>, Double> pair2 = new Pair<Pair<Double, String>, Double>(pair1, double0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair2);
      
      boolean boolean0 = linkedList0.add(pair2);
      assertTrue(pair1.equals((Object)pair0));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      assertTrue(boolean0);
      
      DiscreteDistribution<Pair<Double, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Double, String>>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertNotNull(well19937c0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(2155.440219655473);
      assertEquals(2155.440219655473, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Pair<Byte, String>, Double> pair0 = new Pair<Pair<Byte, String>, Double>((Pair<Byte, String>) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>(well19937c0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Pair<Byte, String> pair1 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNull(pair1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(541.464472375);
      assertEquals(541.464472375, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      String string0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertNotNull(well19937c0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(2155.440219655473);
      assertEquals(2155.440219655473, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Pair<Byte, String>, Double> pair0 = new Pair<Pair<Byte, String>, Double>((Pair<Byte, String>) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>(well19937c0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(541.464472375);
      assertEquals(541.464472375, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer((-2884));
      assertEquals((-2884), (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double((-2156.691156282179));
      assertEquals((-2156.691156282179), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,156.691 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(541.464472375);
      assertEquals(541.464472375, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean1);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      Double double1 = discreteDistribution0.sample();
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertEquals(541.464472375, (double)double1, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(541.464472375);
      assertEquals(541.464472375, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample((-2363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,363)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(541.464472375);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(77578373);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      Double double0 = new Double(1342.354);
      Byte byte0 = new Byte((byte)97);
      Pair<Byte, String> pair0 = new Pair<Byte, String>(byte0, "jC CvI[A[`");
      Pair<Pair<Byte, String>, Double> pair1 = new Pair<Pair<Byte, String>, Double>(pair0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>(well19937c0, linkedList0);
      Pair<Byte, String>[] pairArray0 = discreteDistribution0.sample(11);
      assertEquals(11, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(541.464472375);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(2155.440219655473);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double double1 = new Double((-280.48176));
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(0.9691334587956204);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(2155.440219655473);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability(double0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(3.418237608335161E-166);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1179L));
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-1179L));
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,179 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.5463024377822876);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-985L));
  }
}
