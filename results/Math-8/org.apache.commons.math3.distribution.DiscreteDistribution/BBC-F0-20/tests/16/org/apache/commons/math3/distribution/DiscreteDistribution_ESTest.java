/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:53:32 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2352;
      Integer integer0 = new Integer(2352);
      Double double0 = new Double(0.08526539946185863);
      Integer integer1 = new Integer(2352);
      Double double1 = new Double(0.5663645428464461);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList0.offer(pair2);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1.0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c(824L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      well19937c0.nextBoolean();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2352;
      Integer integer0 = new Integer(2352);
      Double double0 = new Double(2352);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.offer(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2746L));
      discreteDistribution0.sample(2352);
      discreteDistribution0.sample(2352);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)42);
      Double double1 = new Double(3503.841310383563);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte0, double1);
      linkedList1.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
      discreteDistribution1.getSamples();
      // Undeclared exception!
      discreteDistribution0.sample(2352);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-1471);
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.getSamples();
      int int1 = (-1316);
      Integer integer1 = new Integer((-1316));
      discreteDistribution0.probability(integer1);
      try { 
        discreteDistribution0.sample((-54040705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-54,040,705)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Integer integer1 = new Integer(0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.getSamples();
      discreteDistribution0.probability(integer0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2381);
      Double double0 = new Double(2381);
      Double double1 = new Double(2.147483647E9);
      Double double2 = new Double(1779.83406);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double2);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      double double3 = discreteDistribution0.probability((Integer) null);
      assertEquals(1.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.getSamples();
      discreteDistribution0.probability((Integer) null);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-1471);
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.probability((Integer) null);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2381;
      Integer integer0 = new Integer(2381);
      Double double0 = new Double(2381);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 2381;
      Integer integer0 = new Integer(2381);
      Double double0 = new Double(0.7127793428487361);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.offer(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.sample(2381);
      discreteDistribution0.sample(2381);
      Float float0 = new Float(2982.96023103);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Integer integer1 = new Integer(2381);
      discreteDistribution0.probability(integer1);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      Double double1 = new Double((-3.9986783938944604E-8));
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double1);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair2);
      linkedList1.add(pair3);
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(well512a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(37.63059190667069);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-1452);
      Integer integer0 = new Integer((-1452));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      int int1 = 17;
      discreteDistribution0.sample(17);
      try { 
        discreteDistribution0.sample((-1773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,773)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(0L);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-301.9940129153596));
      Pair<Object, Double> pair0 = new Pair<Object, Double>("Mk7IMi:A,_c", double0);
      linkedList0.add(pair0);
      Double double1 = new Double((-301.9940129153596));
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -301.994 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(0.0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      Well44497b well44497b0 = new Well44497b((-1));
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c((long) (-1));
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Well19937c well19937c1 = new Well19937c(824L);
      well19937c0.nextBoolean();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c1, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Double double0 = new Double(3908.3346484791814);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      long long0 = 824L;
      Well19937c well19937c0 = new Well19937c(824L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      long long1 = 0L;
      Well19937c well19937c1 = new Well19937c(0L);
      well19937c1.nextBoolean();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c1, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(829.644813);
      Double double1 = new Double(829.644813);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair0);
      Double double2 = new Double(2.147483647E9);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(linkedList0, double2);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      linkedList0.toArray();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Integer integer0 = new Integer((-2183));
      Double double0 = new Double(1072.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.offer(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      linkedList1.spliterator();
      try { 
        discreteDistribution0.sample((-2183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,183)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(0.0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c(824L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      well19937c0.nextBoolean();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1471));
      Double double0 = new Double(2.147483647E9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.spliterator();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-495);
      intArray0[3] = 0;
      int int0 = 0;
      intArray0[4] = 0;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      well44497b0.setSeed(intArray0);
      Long long0 = new Long((-495));
      Double double0 = new Double(0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1345);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Double double0 = new Double((-4119.376682921331));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      well1024a0.nextInt();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,119.377 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
