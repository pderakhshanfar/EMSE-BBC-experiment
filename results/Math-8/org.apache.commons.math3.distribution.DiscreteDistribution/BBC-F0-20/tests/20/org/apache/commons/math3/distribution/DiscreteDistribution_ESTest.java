/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:57:02 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1023.3008482012);
      Float float0 = Float.valueOf(0.0F);
      Double double1 = new Double(1023.3008482012);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList1.addLast(pair1);
      linkedList1.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      Float float1 = new Float((double) 0.0F);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(jDKRandomGenerator0);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(randomAdaptor0, linkedList1);
      discreteDistribution1.getSamples();
      int int0 = 802;
      long long0 = 1104L;
      discreteDistribution1.reseedRandomGenerator(1104L);
      discreteDistribution1.sample(802);
      Float float2 = new Float((double) 802);
      discreteDistribution1.probability(float2);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.16319426589615516);
      Integer integer0 = new Integer((-989));
      Double double1 = Double.valueOf((-1803.52));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(integer0, double1);
      Double double2 = new Double(0.16319426589615516);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(linkedList0, double2);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, list0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(402.8232912);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1363);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.util.LinkedList
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float(0.47645689211890163);
      Double double0 = new Double(0.47645689211890163);
      Float float1 = new Float((-2393.695423361595));
      Double double1 = new Double(850.6);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.addLast(pair0);
      Float float2 = new Float(850.6);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList1);
      discreteDistribution0.getSamples();
      int int0 = 802;
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(802);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.18298722592684724);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-425.7));
      Double double1 = new Double(0.18298722592684724);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double1);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      linkedList1.addLast(pair2);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      Float float1 = new Float(610.9047489);
      discreteDistribution0.reseedRandomGenerator(802);
      // Undeclared exception!
      discreteDistribution0.sample(185649761);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.7;
      Double double1 = new Double(0.7);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double1);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1140L);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(mersenneTwister0, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float(0.18298722592684724);
      Double double0 = new Double(0.7191661219225536);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      Float float1 = new Float(0.18298722592684724);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float(0.18298722592684724);
      Double double0 = new Double(0.7191661219225536);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.addLast(pair0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.probability((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float(0.18298722592684724);
      Double double0 = new Double(0.7191661219225536);
      Double double1 = new Double(0.18298722592684724);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float(1448.0);
      Double double0 = new Double(1448.0);
      Double double1 = new Double(1448.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution1.sample();
      int int0 = 3542;
      discreteDistribution1.sample(3542);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(mersenneTwister0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.18298722592684724);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList linkedList1 = (LinkedList)discreteDistribution0.sample();
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float(1448.0);
      Double double0 = new Double(1448.0);
      Double double1 = new Double(1448.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      linkedList0.add(pair0);
      Float float1 = new Float(355.83265785805);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 3542;
      discreteDistribution1.sample(3542);
      discreteDistribution1.probability(float1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(mersenneTwister0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(355.83265785805);
      Double double0 = new Double(355.83265785805);
      linkedList0.spliterator();
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = new Float(355.83265785805);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(1091);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.18298722592684724);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      int int0 = (-1067788460);
      Well19937a well19937a0 = new Well19937a((-1067788460));
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-507.39F));
      Double double1 = new Double((-507.39F));
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double1);
      linkedList1.add(pair1);
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(well19937a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -507.39 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(355.83265785805);
      Double double0 = new Double(1025.1);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = new Float(1025.1);
      int int0 = 1091;
      try { 
        discreteDistribution0.sample((-735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-735)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float(1090.2F);
      Double double0 = new Double(1090.2F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.addLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = new Float(3.0144088843073416E-40);
      Float float2 = new Float(1090.2F);
      discreteDistribution0.probability(float2);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(mersenneTwister0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.18298722592684724);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1833L));
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1833L));
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(jDKRandomGenerator0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.18298722592684724);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(355.83265785805);
      Double double0 = new Double(355.83265785805);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = new Float(355.83265785805);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution1.sample(1091);
      discreteDistribution1.probability(float0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(mersenneTwister0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(355.83265785805);
      Double double0 = new Double(355.83265785805);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float1 = new Float(355.83265785805);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution1.probability(float0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(mersenneTwister0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double((-518.6983725923218));
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -518.698 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1974;
      MersenneTwister mersenneTwister0 = new MersenneTwister(1974);
      mersenneTwister0.setSeed(1974);
      Integer integer0 = new Integer(1112);
      Double double0 = new Double(1974);
      Integer integer1 = new Integer(2969);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      Integer integer2 = new Integer(1974);
      Double double1 = new Double(355.83265785805);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer2, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(mersenneTwister0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(355.83265785805);
      Double double0 = new Double(355.83265785805);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(63);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1185);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well44497b0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
