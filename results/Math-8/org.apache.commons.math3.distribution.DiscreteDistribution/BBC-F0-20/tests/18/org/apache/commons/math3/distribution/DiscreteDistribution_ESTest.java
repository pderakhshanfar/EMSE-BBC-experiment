/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:54:57 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Well1024a well1024a0 = new Well1024a();
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
      discreteDistribution1.reseedRandomGenerator(2024);
      discreteDistribution1.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution1.sample(2024);
      discreteDistribution0.getSamples();
      discreteDistribution1.sample(2024);
      discreteDistribution0.probability(double0);
      System.setCurrentTimeMillis(2024);
      // Undeclared exception!
      discreteDistribution1.sample(2024);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(1323);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = ";3*\".Y,^3k%Ew(e";
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>(";3*\".Y,^3k%Ew(e", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1323);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3.3894811576571423E179);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(2009);
      discreteDistribution0.probability("all abscissae must be finite real numbers, but {0}-th is {1}");
      int int0 = 2794;
      discreteDistribution0.sample(2794);
      Random.setNextRandom(2794);
      Random.setNextRandom(2009);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Well1024a well1024a0 = new Well1024a((-264448460));
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample(2024);
      Double double2 = new Double(0.03500035035403681);
      discreteDistribution0.probability(double1);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double0);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(well1024a0, linkedList1);
      discreteDistribution2.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1044.6567036515028);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(728.33900521);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.probability((Double) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1808L));
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-1808L));
      well44497a0.nextDouble();
      Double double1 = new Double(2.1474836471318882E9);
      Double double2 = new Double(0.9455041661489869);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      Well44497a well44497a1 = new Well44497a((-428L));
      well44497a1.nextLong();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497a1, linkedList0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      double double3 = discreteDistribution0.probability((Double) null);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(2114.828563532);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = 450;
      discreteDistribution0.sample(450);
      int int1 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      byte byte0 = (byte)29;
      Double double0 = new Double(223.4823120090542);
      Double double1 = new Double(223.4823120090542);
      Double double2 = new Double(2114.828563532);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      int int0 = 448;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (byte)29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2.147483647E9);
      double double1 = new Double(2.147483647E9);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      well44497a0.nextLong();
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis((-2190028534743882324L));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(2114.828563532);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Well44497a well44497a0 = new Well44497a(1767);
      well44497a0.nextLong();
      linkedList0.add(pair0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
      discreteDistribution1.sample(1837);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.getSamples();
      System.setCurrentTimeMillis(1767);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1799L));
      Double double0 = new Double(0.1564620162467485);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.push(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability(double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(994.975);
      Double double2 = new Double(1044.6567036515028);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(448);
      Well19937a well19937a0 = new Well19937a(733);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
      try { 
        discreteDistribution1.sample((-1616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,616)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      byte byte0 = (byte)29;
      Byte byte1 = new Byte((byte)29);
      Double double0 = new Double((byte)29);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte1, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Well19937a well19937a0 = new Well19937a((-1));
      Double double0 = new Double((-1));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(2114.828563532);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(448);
      Well19937a well19937a0 = new Well19937a(0);
      well19937a0.nextLong();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      double double0 = (-15.078872642369);
      Double double1 = new Double((-15.078872642369));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -15.079 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(3543.351310299);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.poll();
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1578L));
      LinkedList<Pair<Pair<Double, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Double, Float>, Double>>();
      DiscreteDistribution<Pair<Double, Float>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Double, Float>>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1044.6567036515028);
      Double double1 = new Double(2114.828563532);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(448);
      Well19937a well19937a0 = new Well19937a(0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED";
      stringArray0[1] = "ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED";
      stringArray0[2] = "ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED";
      linkedList1.toArray(stringArray0);
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1799L));
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2.147483647E9);
      well44497a0.nextDouble();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      well44497a0.nextLong();
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED";
      linkedList1.toArray(stringArray0);
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Double double0 = new Double((byte)0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte1, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(44497);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well512a well512a0 = new Well512a((-1652L));
      int int0 = 2827;
      well512a0.nextInt(2827);
      int int1 = 860;
      well512a0.setSeed(860);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well512a0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
