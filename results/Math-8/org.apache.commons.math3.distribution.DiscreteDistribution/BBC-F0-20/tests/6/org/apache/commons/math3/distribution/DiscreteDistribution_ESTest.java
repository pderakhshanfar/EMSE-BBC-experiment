/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:38:45 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)118;
      Byte byte1 = new Byte((byte)118);
      Double double0 = new Double(0.3912758044582907);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      linkedList0.add(pair1);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1893));
      Double double0 = new Double(1.0);
      Long.getLong("");
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(835);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(18L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1893));
      Double double0 = new Double(18L);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.probability((Double) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(9.187039010032139);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Short short0 = new Short((short) (-1905));
      Pair<Object, Double> pair2 = new Pair<Object, Double>(short0, double0);
      linkedList0.add(pair2);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1905);
      intArray0[1] = (int) (short) (-1905);
      intArray0[2] = (int) (short) (-1905);
      intArray0[3] = (int) (short) (-1905);
      intArray0[4] = (int) (short) (-1905);
      intArray0[5] = (int) (short) (-1905);
      intArray0[6] = (-863);
      intArray0[7] = (int) (short) (-1905);
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      Well19937c well19937c0 = new Well19937c((long) (-1905));
      well19937c0.nextBoolean();
      List<Pair<Object, Double>> list0 = new LinkedList<Pair<Object, Double>>();
      int int0 = 152675298;
      // Undeclared exception!
      discreteDistribution0.sample(int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.9674073425061771);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      Well19937c well19937c0 = new Well19937c();
      well19937c0.nextBoolean();
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(828);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.932913948364342);
      Double double1 = new Double(0.42047887738079925);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      discreteDistribution0.probability(linkedList0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.nextBoolean();
      well19937c0.setSeed((-157));
      Double double0 = new Double(3169.65);
      Double double1 = new Double(3891.730138);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      discreteDistribution0.probability((Object) null);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1690));
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Double double1 = new Double(1L);
      linkedList0.add(pair0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Double
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1726));
      Double double0 = new Double((-1726));
      Double double1 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double2 = new Double((-1726));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double2);
      linkedList2.add(pair1);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,726 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1688));
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      List<Pair<Object, Double>> list0 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution0.sample(831);
      discreteDistribution0.probability(well19937c0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(3759L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1192.410158508683);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      linkedList1.offerLast(pair1);
      Well44497b well44497b0 = new Well44497b();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497b0, linkedList1);
      discreteDistribution0.sample(1906);
      discreteDistribution0.sample(1906);
      discreteDistribution0.getSamples();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1688));
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair0));
      
      Object[] objectArray0 = discreteDistribution0.sample(831);
      assertEquals(831, objectArray0.length);
      
      LinkedList linkedList1 = (LinkedList)discreteDistribution0.sample();
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1688));
      Double double0 = new Double(1.3154474219852392);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, linkedList1);
      Double double1 = discreteDistribution0.sample();
      assertEquals(1.3154474219852392, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      well19937c0.setSeed((-1688));
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1688));
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      Well19937c well19937c1 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      double double0 = 1.0;
      well19937c0.setSeed((-1688));
      Double double1 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well19937c1, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c1, linkedList0);
      int int0 = (-1235);
      try { 
        discreteDistribution0.sample((-1235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,235)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.pollLast();
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(1L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int0 = (-1688);
      well19937c0.setSeed((-1688));
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Double double0 = new Double(0.0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(jDKRandomGenerator0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((float) 0);
      Double double0 = new Double((-2.0));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.5);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well44497a0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-2097.85564005));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,097.856 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3092);
      intArray0[1] = 1156;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 767;
      intArray0[5] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
