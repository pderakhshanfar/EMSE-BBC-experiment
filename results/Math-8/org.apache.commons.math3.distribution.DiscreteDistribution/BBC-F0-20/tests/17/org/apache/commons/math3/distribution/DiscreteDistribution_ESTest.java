/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:54:26 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1188.4853105);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      int[] intArray0 = new int[4];
      intArray0[0] = 1236;
      intArray0[1] = 1;
      intArray0[2] = (-674029866);
      intArray0[3] = (-405);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(iSAACRandom0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1320L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      Integer integer1 = new Integer(2692);
      discreteDistribution0.sample(1632);
      discreteDistribution0.getSamples();
      Integer integer2 = new Integer(1632);
      Double double1 = new Double(2692);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer2, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add((Pair<Integer, Double>) null);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution1.reseedRandomGenerator((-289L));
      discreteDistribution1.sample(931);
      Object object0 = new Object();
      discreteDistribution1.probability(double0);
      Well19937a well19937a0 = new Well19937a();
      Float float0 = new Float((double) (-289L));
      Pair<Float, Double> pair4 = new Pair<Float, Double>((Float) null, double0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      linkedList2.add(pair4);
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(linkedList2);
      discreteDistribution2.probability((Float) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Double double1 = new Double(8.90310227565917E-9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.push(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      linkedList0.pop();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2462.91);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      Integer integer0 = new Integer(734);
      Double double1 = new Double(734);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(734);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1320L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      Integer integer1 = new Integer(2692);
      discreteDistribution0.sample(1632);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      Integer integer2 = new Integer(1632);
      Double double1 = new Double(2692);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer2, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      linkedList3.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList3);
      discreteDistribution1.sample(931);
      Object object0 = new Object();
      discreteDistribution1.probability(double0);
      Well19937a well19937a0 = new Well19937a();
      System.setCurrentTimeMillis((-693L));
      System.setCurrentTimeMillis((-304L));
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList4 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-76.740828216));
      Pair<Float, Double> pair4 = new Pair<Float, Double>(float0, double1);
      linkedList4.add(pair4);
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(linkedList4);
      discreteDistribution2.probability((Float) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(749);
      Double double0 = new Double(749);
      Short short0 = new Short((short) (-456));
      Double double1 = new Double((-4014.4255699));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double1);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Short short1 = new Short((short)1391);
      Double double2 = new Double(1561.2);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(short1, double2);
      linkedList1.add(pair2);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList1);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1310L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      discreteDistribution0.sample(174);
      discreteDistribution0.sample(1115);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(list0);
      discreteDistribution1.sample();
      discreteDistribution1.reseedRandomGenerator(0L);
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1319L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2716);
      Double double0 = new Double(2716);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float((double) 2716);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(float0, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution1.probability(double0);
      Well19937a well19937a0 = new Well19937a();
      System.setCurrentTimeMillis((-1319L));
      System.setCurrentTimeMillis(0L);
      discreteDistribution1.sample(2716);
      discreteDistribution0.probability(integer0);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Double double1 = new Double(8.90310227565917E-9);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.push(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double((short)0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      Short short1 = new Short((short)1671);
      Double double1 = new Double((short)1671);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double1);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, linkedList0);
      discreteDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1310L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      discreteDistribution0.sample(2692);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      try { 
        discreteDistribution1.sample((-2938));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,938)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1310L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1632);
      discreteDistribution0.sample(1632);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      discreteDistribution0.sample(2692);
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Float, Double>>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1310L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(1632);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      // Undeclared exception!
      discreteDistribution0.sample(4446);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-1166.0));
      Integer integer0 = new Integer((-658));
      Double double1 = Double.valueOf(1.9503931430716318E-65);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      Object object0 = new Object();
      discreteDistribution0.probability("q");
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well19937a0, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1310L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      discreteDistribution0.sample(2692);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-8454));
      Double double0 = new Double((short) (-8454));
      linkedList0.poll();
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.containsAll(linkedList1);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -8,454 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1310L);
      Well44497b well44497b0 = new Well44497b((-1310L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2692);
      Double double0 = new Double(2692);
      linkedList0.poll();
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      well19937c0.nextFloat();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-1116L));
      Double double0 = new Double(992.8081404716546);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.iterator();
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)1);
      Double double0 = new Double((-669.5));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -669.5 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1671);
      Double double0 = new Double((short)1671);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, linkedList0);
      Short short1 = discreteDistribution0.sample();
      assertEquals((short)1671, (short)short1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, (Double) null);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
