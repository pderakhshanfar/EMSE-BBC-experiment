/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:33:39 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(747.7544717493867);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Object object0 = new Object();
      Double double1 = new Double(Double.POSITIVE_INFINITY);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(object0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(21);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = new Pair<String, Double>("#b", double0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      Integer integer0 = new Integer(1);
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(9075157824476276376L);
      Float float0 = new Float((double) integer0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      well44497b0.nextBoolean();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-3746L));
      discreteDistribution0.reseedRandomGenerator(2524L);
      discreteDistribution0.reseedRandomGenerator(757L);
      discreteDistribution0.sample(1654);
      discreteDistribution0.getSamples();
      linkedList0.addLast(pair0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.probability((Object) null);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.sample(1654);
      well44497b0.nextInt();
      Double double1 = new Double(0.534469539089174);
      discreteDistribution0.reseedRandomGenerator(9075157824476276376L);
      linkedList0.addFirst(pair0);
      discreteDistribution0.reseedRandomGenerator((-4035746434778044925L));
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution4 = new DiscreteDistribution<Byte>(linkedList2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      Integer integer0 = new Integer(1);
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(9075157824476276376L);
      Float float0 = new Float((double) integer0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      well44497b0.nextBoolean();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-3746L));
      discreteDistribution0.reseedRandomGenerator(2524L);
      discreteDistribution0.reseedRandomGenerator(757L);
      discreteDistribution0.sample(1654);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      linkedList0.addLast(pair0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.probability((Object) null);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.sample(1654);
      discreteDistribution0.reseedRandomGenerator((-1L));
      Double double1 = new Double(0.534469539089174);
      discreteDistribution0.reseedRandomGenerator(9075157824476276376L);
      linkedList0.addFirst(pair0);
      // Undeclared exception!
      discreteDistribution0.reseedRandomGenerator((-3746L));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(73);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      Long.getLong(":6&HK)");
      discreteDistribution0.probability((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(73);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(73);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double1);
      linkedList0.add(pair1);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(73);
      discreteDistribution0.reseedRandomGenerator(73);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(94206825);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(10);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("5h%Jv>nKca?pAG;t>1", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(2335L);
      Double double1 = new Double(1.0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      Long.getLong("");
      discreteDistribution1.probability((Object) null);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution2.sample(10);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution3.getSamples();
      discreteDistribution3.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution4 = new DiscreteDistribution<Object>(well44497b0, list0);
      DiscreteDistribution<Object> discreteDistribution5 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution5.sample();
      discreteDistribution4.sample();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      Pair<Long, Double> pair2 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair3 = new Pair<Long, Double>(pair2);
      linkedList2.offerFirst(pair3);
      DiscreteDistribution<Long> discreteDistribution6 = new DiscreteDistribution<Long>(linkedList2);
      discreteDistribution6.sample();
      DiscreteDistribution<Integer> discreteDistribution7 = null;
      try {
        discreteDistribution7 = new DiscreteDistribution<Integer>(well44497b0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((double) integer1);
      Float float0 = new Float((double) integer0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      well44497b0.nextBoolean();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-19L));
      Double double1 = new Double((-1.0));
      discreteDistribution0.probability(float0);
      // Undeclared exception!
      discreteDistribution0.sample(94206825);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2587395008570181793L);
      Float float0 = new Float((double) 1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-769L));
      Double double1 = new Double((-1.0));
      discreteDistribution0.probability(double1);
      // Undeclared exception!
      discreteDistribution0.sample(94206825);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(561.7063056);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      Well44497b well44497b0 = new Well44497b(1933);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(1L);
      discreteDistribution0.reseedRandomGenerator(1933);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(94206825);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.3004658124599986);
      Float float0 = new Float(0.3004658124599986);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator((-181L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2587395008570181793L);
      Float float0 = new Float(0.4919652869293487);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1L));
      discreteDistribution0.reseedRandomGenerator(2587395008570181793L);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2530);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.sample(4996);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution1.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(well44497b0, list0);
      // Undeclared exception!
      discreteDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      double double0 = new Integer(1);
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double1 = new Double(9075157824476276376L);
      Float float0 = new Float((double) 1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-769L));
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-769L));
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution2.sample(1372);
      discreteDistribution0.getSamples();
      List<Pair<Object, Double>> list0 = discreteDistribution2.getSamples();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(well44497b0, list0);
      Object object0 = discreteDistribution1.sample();
      assertEquals(1.0F, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2587395008570181793L);
      Float float0 = new Float((double) 1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-769L));
      // Undeclared exception!
      discreteDistribution0.sample(94206825);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.8205931517948541);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1168L);
      int int0 = (-2903);
      try { 
        discreteDistribution0.sample((-2903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,903)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1);
      discreteDistribution0.sample(1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution1.reseedRandomGenerator(1);
      Object[] objectArray0 = discreteDistribution1.sample(1);
      assertEquals(1, objectArray0.length);
      
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(well44497b0, list0);
      discreteDistribution2.sample();
      assertEquals(2, list0.size());
      assertFalse(list0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1);
      discreteDistribution0.sample(1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      Integer integer0 = new Integer(1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double((-1429.754121147));
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,429.754 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(883L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(179.823643418);
      Double double1 = new Double(179.823643418);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(883L);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1);
      discreteDistribution0.sample(1);
      discreteDistribution0.getSamples();
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(list0);
      discreteDistribution1.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.getInteger("X-i[@GW;q", 2186);
      Double double0 = new Double((-2141.2));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,141.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      Well44497a well44497a0 = new Well44497a(0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.poll();
      Float float0 = new Float((double) 0);
      Double double0 = new Double(0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      well44497b0.nextDouble();
      well44497b0.nextLong();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1);
      discreteDistribution0.sample(1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      Well19937c well19937c0 = new Well19937c(0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
