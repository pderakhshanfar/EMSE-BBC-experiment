/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 20:56:58 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.4520753594289302);
      assertEquals(0.4520753594289302, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotNull(discreteDistribution1);
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.4520753594289302);
      assertEquals(0.4520753594289302, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      double double1 = discreteDistribution0.probability(object1);
      assertEquals(1, linkedList0.size());
      assertNotSame(object1, object0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(0.0, double1, 0.01);
      assertFalse(object1.equals((Object)object0));
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(pair0));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertNotNull(linkedList2);
      
      Object[] objectArray0 = discreteDistribution0.sample(9998);
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList2);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(9998, objectArray0.length);
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertNotNull(objectArray0);
      
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(pair0));
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertNotNull(linkedList3);
      
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<Object, Double>> linkedList4 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList4.size());
      assertFalse(linkedList4.contains(pair0));
      assertTrue(linkedList4.equals((Object)linkedList2));
      assertFalse(linkedList4.equals((Object)linkedList0));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertNotNull(linkedList4);
      
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 653;
      Random.setNextRandom(653);
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = Double.valueOf(0.8653035481373523);
      assertEquals(0.8653035481373523, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(653);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.4520753594289302);
      assertEquals(0.4520753594289302, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      double double1 = discreteDistribution0.probability(double0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertEquals(0.0, double1, 0.01);
      
      discreteDistribution0.reseedRandomGenerator(9998);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      Object[] objectArray0 = discreteDistribution0.sample(9998);
      assertEquals(1, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(9998, objectArray0.length);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 9998;
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {9998}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(well44497b0);
      
      LinkedList<Pair<Pair<String, String>, Double>> linkedList2 = new LinkedList<Pair<Pair<String, String>, Double>>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Pair<String, String>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<String, String>>(well44497b0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      Double double1 = new Double(0.4520753594289302);
      assertEquals(0.4520753594289302, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertFalse(linkedList0.contains(pair2));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertFalse(linkedList0.contains(pair2));
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean boolean1 = linkedList0.offer(pair2);
      assertEquals(2, linkedList0.size());
      assertNotSame(pair2, pair1);
      assertTrue(linkedList0.contains(pair2));
      assertTrue(boolean1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(0.4520753594289302);
      assertEquals(0.4520753594289302, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(576L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      int int0 = 440364036;
      discreteDistribution0.sample(440364036);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(1318.39399);
      assertEquals(1318.39399, (double)double0, 0.01);
      assertNotNull(double0);
      
      Stream<Pair<Object, Double>> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Double double1 = new Double(6.761793219649385E73);
      assertEquals(6.761793219649385E73, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(290.52852087239);
      assertEquals(290.52852087239, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Pair<Object, Double> pair2 = new Pair<Object, Double>((Object) null, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      boolean boolean1 = linkedList0.offer(pair2);
      assertEquals(2, linkedList0.size());
      assertNotSame(pair2, pair1);
      assertTrue(linkedList0.contains(pair2));
      assertTrue(boolean1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      assertNotNull(discreteDistribution0);
      
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(byte0, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(pair3);
      
      Pair<Byte, Double> pair4 = new Pair<Byte, Double>(pair3);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertTrue(pair4.equals((Object)pair3));
      assertNotNull(pair4);
      
      double double3 = discreteDistribution0.probability((Object) null);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      assertEquals(4.2966194237962013E-72, double3, 0.01);
      
      System.setCurrentTimeMillis((byte) (-2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = Double.valueOf(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1917.876);
      assertEquals(1917.876, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Stream<Pair<Object, Double>> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(integer0, double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      Double double2 = new Double(2.0);
      assertEquals(2.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(pair1);
      
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(pair1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotNull(discreteDistribution1);
      
      double double3 = discreteDistribution1.probability(integer0);
      assertEquals(1, linkedList0.size());
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1.0, double3, 0.01);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(1318.39399);
      assertEquals(1318.39399, (double)double0, 0.01);
      assertNotNull(double0);
      
      Stream<Pair<Object, Double>> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      Double double1 = new Double(290.52852087239);
      assertEquals(290.52852087239, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair1);
      
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      double double2 = discreteDistribution0.probability((Object) null);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1.0, double2, 0.01);
      
      System.setCurrentTimeMillis((byte) (-2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(object0, double0);
      assertFalse(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList0.removeFirstOccurrence(pair1);
      assertEquals(1, linkedList0.size());
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair0));
      assertFalse(linkedList0.contains(pair1));
      assertFalse(boolean1);
      assertFalse(pair1.equals((Object)pair0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.offer(pair1);
      assertEquals(2, linkedList0.size());
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean2);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      
      int int0 = 1031;
      boolean boolean3 = linkedList0.add(pair1);
      assertEquals(3, linkedList0.size());
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean3);
      assertFalse(pair1.equals((Object)pair0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1031);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      Object object1 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertSame(object1, object0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(object1);
      
      Float float0 = new Float(14.066);
      assertEquals(14.066F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double1 = new Double(14.066);
      assertEquals(14.066, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair1);
      
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair2));
      assertNotNull(linkedList1);
      
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(pair2));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(9.223372036854776E18);
      assertEquals(9.223372036854776E18, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      linkedList0.addFirst(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      boolean boolean0 = linkedList0.offerLast(pair1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNull(object0);
      
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Integer integer0 = Integer.valueOf((-2856));
      assertEquals((-2856), (int)integer0);
      assertNotNull(integer0);
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair1);
      
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      boolean boolean1 = linkedList1.add(pair2);
      assertEquals(1, linkedList1.size());
      assertNotSame(pair1, pair2);
      assertNotSame(pair2, pair1);
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean1);
      assertTrue(pair1.equals((Object)pair2));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList1.add(pair2);
      assertEquals(2, linkedList1.size());
      assertNotSame(pair1, pair2);
      assertNotSame(pair2, pair1);
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean2);
      assertTrue(pair1.equals((Object)pair2));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2856));
      assertNotNull(mersenneTwister0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      assertNotNull(synchronizedRandomGenerator0);
      
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList1);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      
      Integer[] integerArray0 = discreteDistribution1.sample(104);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair2));
      assertEquals(104, integerArray0.length);
      assertNotNull(integerArray0);
      
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(pair0));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertNotNull(linkedList2);
      
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(synchronizedRandomGenerator0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte byte0 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte0);
      assertNotNull(byte0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.offer(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      assertTrue(boolean0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      boolean boolean1 = linkedList1.add(pair1);
      assertEquals(2, linkedList1.size());
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList1.contains(pair1));
      assertTrue(boolean1);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair1));
      assertNotNull(discreteDistribution0);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(2, linkedList1.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList1.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertNotNull(list0);
      
      Double double1 = new Double(740.09982269);
      assertEquals(740.09982269, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Float float0 = new Float((float) (byte) (-122));
      assertEquals((-122.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(pair2);
      
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(pair3.equals((Object)pair2));
      assertNotNull(pair3);
      
      boolean boolean2 = linkedList0.add(pair2);
      assertEquals(1, linkedList0.size());
      assertNotSame(pair2, pair3);
      assertTrue(linkedList0.contains(pair3));
      assertTrue(boolean2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(pair2.equals((Object)pair3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair3));
      assertNotNull(discreteDistribution1);
      
      double double2 = discreteDistribution0.probability(pair2);
      assertEquals(2, linkedList1.size());
      assertNotSame(pair2, pair3);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(0.0, double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(pair2.equals((Object)pair3));
      
      System.setCurrentTimeMillis(315L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(9.223372036854776E18);
      assertEquals(9.223372036854776E18, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.offerLast(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNull(object0);
      
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Double double1 = new Double(9.223372036854776E18);
      assertEquals(9.223372036854776E18, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair0));
      assertNotNull(pair2);
      
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair0.equals((Object)pair2));
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(pair3.equals((Object)pair0));
      assertNotNull(pair3);
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList1.add(pair2);
      assertEquals(1, linkedList1.size());
      assertNotSame(pair2, pair0);
      assertNotSame(pair2, pair3);
      assertFalse(linkedList1.contains(pair0));
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair0));
      assertFalse(pair2.equals((Object)pair3));
      assertTrue(boolean1 == boolean0);
      
      MersenneTwister mersenneTwister0 = new MersenneTwister((-415));
      assertNotNull(mersenneTwister0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      assertNotNull(synchronizedRandomGenerator0);
      
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(9.223372036854776E18);
      assertEquals(9.223372036854776E18, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.offerLast(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      assertNull(object0);
      
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Double double1 = new Double(9.223372036854776E18);
      assertEquals(9.223372036854776E18, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair0));
      assertNotNull(pair2);
      
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair0.equals((Object)pair2));
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(pair3.equals((Object)pair0));
      assertNotNull(pair3);
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair3));
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList1.add(pair2);
      assertEquals(1, linkedList1.size());
      assertNotSame(pair2, pair0);
      assertNotSame(pair2, pair3);
      assertFalse(linkedList1.contains(pair3));
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair0));
      assertFalse(pair2.equals((Object)pair3));
      assertTrue(boolean1 == boolean0);
      
      MersenneTwister mersenneTwister0 = new MersenneTwister((-415));
      assertNotNull(mersenneTwister0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      assertNotNull(synchronizedRandomGenerator0);
      
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(pair3));
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2.0);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(pair0));
      assertFalse(list0.contains(pair0));
      assertNotNull(list0);
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Integer integer0 = Integer.valueOf((-2856));
      assertEquals((-2856), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2856));
      assertEquals((-2856), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer1, double0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(pair1);
      
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      boolean boolean1 = linkedList1.add(pair2);
      assertEquals(1, linkedList1.size());
      assertNotSame(pair1, pair2);
      assertNotSame(pair2, pair1);
      assertTrue(linkedList1.contains(pair2));
      assertTrue(boolean1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(pair1.equals((Object)pair2));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2856));
      assertNotNull(mersenneTwister0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      assertNotNull(synchronizedRandomGenerator0);
      
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList1);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      
      try { 
        discreteDistribution1.sample((-617891518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-617,891,518)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double((-12.889637323271));
      Object object1 = new Object();
      Double double1 = new Double(1541.3416291348813);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object1, double1);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.valueOf((-2856));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList1.add(pair2);
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2856));
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(synchronizedRandomGenerator0, linkedList1);
      try { 
        discreteDistribution1.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Double double0 = new Double(9.223372036854776E18);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(2.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.valueOf((-2856));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList1.add(pair2);
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2856));
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(synchronizedRandomGenerator0, linkedList1);
      Integer[] integerArray0 = discreteDistribution1.sample(104);
      assertEquals(104, integerArray0.length);
      
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(mersenneTwister0, list0);
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list1 = discreteDistribution2.getSamples();
      assertFalse(list0.contains(pair0));
      assertFalse(list1.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Double double0 = new Double(9.223372036854776E18);
      Double double1 = new Double((-4529.3313));
      Double double2 = new Double(9.223372036854776E18);
      Double double3 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double3, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-3635);
      intArray0[1] = (-3635);
      intArray0[2] = 77;
      intArray0[3] = 2000;
      intArray0[4] = (-2138718408);
      intArray0[5] = 252;
      intArray0[6] = 945;
      intArray0[7] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(77);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(2.0);
      linkedList0.stream();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((byte)9);
      Byte byte0 = new Byte((byte)9);
      try { 
        discreteDistribution0.sample((-2794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,794)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(2.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Integer integer0 = new Integer((-244));
      Double double0 = new Double((-244));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.offerLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -244 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = Double.valueOf((-3518.4667));
      Double double1 = new Double((-3518.4667));
      well19937c0.nextBoolean();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,518.467 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Double double0 = new Double(9.223372036854776E18);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = Double.valueOf(0.0);
      Double double1 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1);
      Well512a well512a0 = new Well512a((-1));
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well512a0, (List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 228;
      intArray0[2] = 1;
      intArray0[3] = (-214);
      intArray0[4] = 73;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 264;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
