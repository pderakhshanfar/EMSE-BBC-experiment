/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:43:59 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(4850.447692223671);
      Double double1 = new Double(732.525);
      Double double2 = new Double(732.525);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double2);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.addLast(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      discreteDistribution1.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator((-2413L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Byte byte0 = new Byte((byte)75);
      Double double0 = new Double(0.4366297365979446);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.addLast(pair2);
      Byte byte1 = new Byte((byte)67);
      Byte byte2 = new Byte((byte)67);
      Pair<String, Byte> pair3 = new Pair<String, Byte>((String) null, byte2);
      linkedList0.addLast(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution1.reseedRandomGenerator((byte)75);
      List<Pair<Object, Double>> list0 = discreteDistribution1.getSamples();
      discreteDistribution1.sample(4035);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      // Undeclared exception!
      discreteDistribution0.sample(3138);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.7325247765069482);
      Pair<String, Double> pair0 = new Pair<String, Double>("IXvsM?\"op,nu+", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Pair<Short, Object>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Short, Object>>((RandomGenerator) null, (List<Pair<Pair<Short, Object>, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5648769086999809687L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-2146756882));
      Double double0 = new Double(1075.1616373484778);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      linkedList0.clone();
      long long0 = 0L;
      well19937a0.setSeed(0L);
      well19937a0.setSeed(580);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(440L);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(3105.2725228);
      Byte byte0 = new Byte((byte)112);
      Double double1 = new Double(0.91050843679312);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.probability((Byte) null);
      System.setCurrentTimeMillis((byte)112);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double.valueOf(0.0);
      Double double0 = new Double(152.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      Byte byte0 = new Byte((byte)0);
      discreteDistribution0.probability((Byte) null);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5648769086999809661L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      well19937a0.nextInt();
      Integer integer0 = new Integer((-2146756882));
      Double double0 = new Double(1075.1616373484778);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      well19937a0.setSeed(0L);
      well19937a0.setSeed((-1));
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1));
      List<Pair<Integer, Double>> list0 = new LinkedList<Pair<Integer, Double>>();
      System.setCurrentTimeMillis(1678766679);
      System.setCurrentTimeMillis(580);
      Integer integer1 = new Integer(1678766679);
      discreteDistribution0.probability(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5648769086999809661L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      well19937a0.nextInt();
      Integer integer0 = new Integer((-2146756882));
      Double double0 = new Double(1075.1616373484778);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      well19937a0.setSeed(0L);
      well19937a0.setSeed(580);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-908L));
      discreteDistribution0.probability(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double((-802.482));
      Byte byte0 = new Byte((byte)101);
      Double double1 = new Double(2.220446049250313E-16);
      Byte byte1 = new Byte((byte)17);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.addLast(pair1);
      String string0 = null;
      Byte byte2 = new Byte((byte)70);
      Pair<String, Byte> pair2 = new Pair<String, Byte>((String) null, byte1);
      Double double2 = new Double((byte)101);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(double1, double2);
      Float float0 = new Float((double) (byte)101);
      Double double3 = new Double(1.7976931348623157E308);
      Pair<Object, Double> pair4 = new Pair<Object, Double>(float0, double3);
      linkedList1.addLast(pair4);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((-412L));
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(4038);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.6334873535996342);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(2.220446049250313E-16);
      Byte byte0 = new Byte((byte)70);
      Double double1 = new Double((byte)70);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.addLast(pair1);
      Byte byte1 = new Byte((byte)70);
      Pair<String, Byte> pair2 = new Pair<String, Byte>((String) null, byte1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>((Object) null, double0);
      linkedList1.addLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((byte)70);
      discreteDistribution0.sample(4038);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5648769086999809661L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      well19937a0.nextInt();
      Integer integer0 = new Integer((-2146756882));
      Integer.getInteger("org.apache.commons.math3.distribution.DiscreteDistribution");
      Double double0 = new Double(1852.1622012457);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.offer(pair0);
      Double double1 = new Double(1075.1616373484778);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      linkedList0.add(pair1);
      well19937a0.setSeed(2772L);
      Well19937a well19937a1 = new Well19937a((long) 1678766679);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2146756882);
      intArray0[1] = 1678766679;
      intArray0[2] = 1678766679;
      intArray0[3] = (-2146756882);
      intArray0[4] = 1678766679;
      intArray0[5] = 4041;
      well19937a1.setSeed(intArray0);
      well19937a1.setSeed(2279);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(2279);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(5648769086999809661L);
      System.setCurrentTimeMillis(5648769086999809661L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5648769086999809661L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      well19937a0.nextInt();
      Integer integer0 = new Integer((-2146756882));
      Double double0 = new Double(1075.1616373484778);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-115));
      Pair<String, Byte> pair1 = new Pair<String, Byte>("@6", byte0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList1.addLast(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.sample(4055);
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(2.220446049250313E-16);
      Byte byte0 = new Byte((byte)70);
      Double double1 = new Double((byte)70);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double2 = new Double(744.48);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double2, double2);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.addLast(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.reseedRandomGenerator(0L);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(2288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-67));
      Double double0 = new Double(2.220446049250313E-16);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample((int) (byte) (-67));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-67)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-67));
      Double double0 = new Double(2.220446049250313E-16);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)106);
      Double double0 = new Double(1578.193223781);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double((-850.784741978));
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -850.785 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 0L;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.5);
      Double double0 = new Double((-2067.3));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,067.3 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1574L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-119);
      well19937c0.nextLong();
      well19937c0.nextBytes(byteArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("5", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-67));
      Double double0 = new Double(2.220446049250313E-16);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.add((Pair<Byte, Double>) null);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(iSAACRandom0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Double double0 = null;
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) null);
      linkedList0.pollLast();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 105;
      intArray0[1] = 2567;
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Pair<String, String>[] pairArray0 = (Pair<String, String>[]) Array.newInstance(Pair.class, 9);
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      pairArray0[0] = pair1;
      Pair<String, String> pair2 = new Pair<String, String>("0e;Ni+buK(", "0e;Ni+buK(");
      Pair<String, String> pair3 = new Pair<String, String>(pair2);
      pairArray0[1] = pair3;
      Pair<String, String> pair4 = new Pair<String, String>("", "");
      pairArray0[2] = pair4;
      Pair<String, String> pair5 = new Pair<String, String>("cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible", "");
      pairArray0[3] = pair5;
      Pair<String, String> pair6 = new Pair<String, String>(pair0);
      pairArray0[4] = pair6;
      Pair<String, String> pair7 = new Pair<String, String>("", "permutation size ({0}");
      pairArray0[5] = pair7;
      Pair<String, String> pair8 = new Pair<String, String>(pair4);
      pairArray0[6] = pair8;
      Pair<String, String> pair9 = new Pair<String, String>(pair8);
      pairArray0[7] = pair9;
      Pair<String, String> pair10 = new Pair<String, String>(pair3);
      pairArray0[8] = pair10;
      linkedList0.toArray(pairArray0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
