/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:40:21 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(666.4267);
      assertEquals(666.4267, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = 1215;
      Integer integer0 = new Integer(1215);
      assertEquals(1215, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Double double1 = new Double(666.4267);
      assertEquals(666.4267, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      assertNotNull(pair0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(jDKRandomGenerator0, linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(1215, object0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(object0);
      assertEquals(2, linkedList0.size());
      assertTrue(object0.equals((Object)int0));
      
      Object[] objectArray0 = discreteDistribution0.sample(1215);
      assertEquals(1215, objectArray0.length);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(objectArray0);
      assertEquals(2, linkedList0.size());
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      Pair<String, Double> pair2 = new Pair<String, Double>((String) null, double1);
      assertNotNull(pair2);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair3 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair3);
      assertTrue(pair3.equals((Object)pair2));
      assertEquals((double)double0, (double)double1, 0.01);
      
      Pair<String, Double> pair4 = new Pair<String, Double>(pair3);
      assertNotNull(pair4);
      assertTrue(pair3.equals((Object)pair2));
      assertTrue(pair4.equals((Object)pair3));
      assertTrue(pair4.equals((Object)pair2));
      assertEquals((double)double0, (double)double1, 0.01);
      
      Double double2 = new Double(0.5031275745854005);
      assertEquals(0.5031275745854005, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(666.4267);
      assertEquals(666.4267, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(852.7618435);
      assertEquals(852.7618435, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      Pair<String, Double> pair5 = new Pair<String, Double>("AU)v~`eb{7FIFBOo8", double4);
      assertNotNull(pair5);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertFalse(pair5.equals((Object)pair4));
      assertFalse(pair5.equals((Object)pair3));
      assertFalse(pair5.equals((Object)pair2));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair2));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = linkedList1.add(pair4);
      assertTrue(boolean2);
      assertFalse(linkedList1.contains(pair5));
      assertTrue(linkedList1.contains(pair2));
      assertNotSame(pair3, pair2);
      assertNotSame(pair3, pair4);
      assertNotSame(pair3, pair5);
      assertNotSame(pair4, pair2);
      assertNotSame(pair4, pair3);
      assertNotSame(pair4, pair5);
      assertEquals(1, linkedList1.size());
      assertFalse(pair3.equals((Object)pair5));
      assertTrue(pair3.equals((Object)pair2));
      assertTrue(pair3.equals((Object)pair4));
      assertTrue(pair4.equals((Object)pair3));
      assertTrue(pair4.equals((Object)pair2));
      assertFalse(pair4.equals((Object)pair5));
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList1);
      assertFalse(linkedList1.contains(pair5));
      assertTrue(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList1.size());
      
      double double5 = discreteDistribution1.probability("LK\u0005lUbQhPjH?'e&n");
      assertEquals(0.0, double5, 0.01);
      assertFalse(linkedList1.contains(pair5));
      assertTrue(linkedList1.contains(pair2));
      assertEquals(1, linkedList1.size());
      
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      assertFalse(linkedList2.contains(pair1));
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.equals((Object)linkedList0));
      
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList1.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2768);
      assertEquals(2768, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2768);
      assertEquals(2768.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      Object object0 = discreteDistribution0.sample();
      assertEquals(2768, object0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(object0);
      assertEquals(2, linkedList0.size());
      
      Object[] objectArray0 = discreteDistribution0.sample(2768);
      assertEquals(2768, objectArray0.length);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(objectArray0);
      assertEquals(2, linkedList0.size());
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      Pair<String, Double> pair2 = new Pair<String, Double>("s={S>RO", double0);
      assertNotNull(pair2);
      
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      assertNotNull(pair3);
      assertTrue(pair3.equals((Object)pair2));
      
      Double double1 = new Double(2768);
      assertEquals(2768.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0225689628581036E-86);
      assertEquals(1.0225689628581036E-86, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Pair<String, Double> pair4 = new Pair<String, Double>("s={S>RO", double2);
      assertNotNull(pair4);
      assertFalse(pair4.equals((Object)pair3));
      assertFalse(pair4.equals((Object)pair2));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair4));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = linkedList1.add(pair3);
      assertTrue(boolean2);
      assertTrue(linkedList1.contains(pair2));
      assertFalse(linkedList1.contains(pair4));
      assertNotSame(pair2, pair4);
      assertNotSame(pair2, pair3);
      assertNotSame(pair3, pair2);
      assertNotSame(pair3, pair4);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertFalse(pair2.equals((Object)pair4));
      assertTrue(pair2.equals((Object)pair3));
      assertTrue(pair3.equals((Object)pair2));
      assertFalse(pair3.equals((Object)pair4));
      
      Well19937a well19937a1 = new Well19937a();
      assertNotNull(well19937a1);
      assertFalse(well19937a1.equals((Object)well19937a0));
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well19937a0, list0);
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertNotNull(discreteDistribution1);
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertFalse(well19937a0.equals((Object)well19937a1));
      
      Object[] objectArray1 = discreteDistribution0.sample(2768);
      assertEquals(2768, objectArray1.length);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(well19937a0, well19937a1);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertEquals(2, linkedList0.size());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(well19937a0.equals((Object)well19937a1));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      
      Random.setNextRandom(3742);
      // Undeclared exception!
      discreteDistribution1.sample(3742);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(4.634817120492781E-114);
      assertEquals(4.634817120492781E-114, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Pair<String, Double> pair2 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair2);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      
      boolean boolean0 = linkedList0.add(pair2);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertNotSame(pair2, pair0);
      assertNotSame(pair2, pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      assertEquals(1, linkedList0.size());
      
      System.setCurrentTimeMillis(0L);
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList1.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair1));
      assertEquals(1, linkedList1.size());
      
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair0));
      assertEquals(1, linkedList1.size());
      
      Double double1 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>("N.y0", double1);
      assertNotNull(pair1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      
      boolean boolean1 = linkedList1.add(pair0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.contains(pair1));
      assertNotSame(pair0, pair1);
      assertEquals(2, linkedList1.size());
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair0.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(linkedList1.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList1.size());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2750);
      assertEquals(2750, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2768);
      assertEquals(2768.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double0, double0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      assertNotNull(pair2);
      assertFalse(pair2.equals((Object)pair1));
      
      boolean boolean1 = linkedList0.add(pair2);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertNotSame(pair2, pair1);
      assertEquals(2, linkedList0.size());
      assertFalse(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2768);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.5031275745854005);
      assertEquals(0.5031275745854005, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      assertNotNull(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      
      Double double2 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-928.2923220679));
      assertEquals((-928.2923220679), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>("", double0);
      assertNotNull(pair2);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      
      boolean boolean1 = linkedList1.add(pair1);
      assertTrue(boolean1);
      assertFalse(linkedList1.contains(pair2));
      assertTrue(linkedList1.contains(pair0));
      assertNotSame(pair0, pair2);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair2);
      assertNotSame(pair1, pair0);
      assertEquals(2, linkedList1.size());
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertFalse(pair0.equals((Object)pair2));
      assertFalse(pair1.equals((Object)pair2));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      assertFalse(linkedList1.contains(pair2));
      assertTrue(linkedList1.contains(pair0));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList1.size());
      
      double double4 = discreteDistribution0.probability("");
      assertEquals(1.0, double4, 0.01);
      assertFalse(linkedList1.contains(pair2));
      assertTrue(linkedList1.contains(pair0));
      assertEquals(2, linkedList1.size());
      
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      byte byte0 = (byte)54;
      Byte byte1 = Byte.valueOf((byte)54);
      assertEquals((byte)54, (byte)byte1);
      assertNotNull(byte1);
      
      Double double5 = new Double(0.18668769999182722);
      assertEquals(0.18668769999182722, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      Double double6 = new Double(1.0);
      assertEquals(1.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      
      Double double7 = new Double((-162.62));
      assertEquals((-162.62), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(byte1, double7);
      assertNotNull(pair3);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      Pair<Byte, Double> pair4 = new Pair<Byte, Double>(pair3);
      assertNotNull(pair4);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertTrue(pair4.equals((Object)pair3));
      
      linkedList2.addFirst(pair4);
      assertTrue(linkedList2.contains(pair4));
      assertNotSame(pair3, pair4);
      assertNotSame(pair4, pair3);
      assertEquals(1, linkedList2.size());
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertTrue(pair3.equals((Object)pair4));
      assertTrue(pair4.equals((Object)pair3));
      
      Pair<Byte, Double> pair5 = new Pair<Byte, Double>(byte1, double6);
      assertNotNull(pair5);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double7, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertFalse(pair5.equals((Object)pair4));
      assertFalse(pair5.equals((Object)pair3));
      
      boolean boolean2 = linkedList2.add(pair5);
      assertTrue(boolean2);
      assertTrue(linkedList2.contains(pair5));
      assertNotSame(pair5, pair4);
      assertNotSame(pair5, pair3);
      assertEquals(2, linkedList2.size());
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double7, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertFalse(pair5.equals((Object)pair4));
      assertFalse(pair5.equals((Object)pair3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Pair<Byte, Double> pair6 = linkedList2.remove();
      assertTrue(linkedList2.contains(pair5));
      assertFalse(linkedList2.contains(pair3));
      assertNotNull(pair6);
      assertNotSame(pair6, pair5);
      assertSame(pair6, pair4);
      assertNotSame(pair6, pair3);
      assertEquals(1, linkedList2.size());
      assertFalse(pair6.equals((Object)pair5));
      assertTrue(pair6.equals((Object)pair3));
      
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.5031275745854005);
      assertEquals(0.5031275745854005, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      assertNotNull(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair1));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair1));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      
      Double double2 = new Double(1.0);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>("N.y0", double3);
      assertNotNull(pair2);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      
      boolean boolean1 = linkedList1.add(pair0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.contains(pair2));
      assertNotSame(pair0, pair1);
      assertNotSame(pair0, pair2);
      assertEquals(2, linkedList1.size());
      assertEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertTrue(pair0.equals((Object)pair1));
      assertFalse(pair0.equals((Object)pair2));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.contains(pair2));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList1.size());
      
      double double4 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double4, 0.01);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.contains(pair2));
      assertEquals(2, linkedList1.size());
      
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      Byte byte0 = Byte.valueOf((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      Double double5 = new Double(0.9166666666666666);
      assertEquals(0.9166666666666666, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(byte0, double3);
      assertNotNull(pair3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double4, 0.01);
      assertEquals((double)double3, (double)double5, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      
      boolean boolean2 = linkedList2.add(pair3);
      assertTrue(boolean2);
      assertTrue(linkedList2.contains(pair3));
      assertEquals(1, linkedList2.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double4, 0.01);
      assertEquals((double)double3, (double)double5, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      
      Pair<Byte, Double> pair4 = linkedList2.remove();
      assertFalse(linkedList2.contains(pair4));
      assertNotNull(pair4);
      assertSame(pair4, pair3);
      assertEquals(0, linkedList2.size());
      
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(382.146840961);
      assertEquals(382.146840961, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(".,Xl", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      
      Double double1 = new Double(382.146840961);
      assertEquals(382.146840961, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>(".,Xl", double1);
      assertNotNull(pair2);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      
      boolean boolean1 = linkedList0.add(pair2);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair2));
      assertNotSame(pair2, pair0);
      assertNotSame(pair2, pair1);
      assertEquals(2, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertTrue(linkedList0.contains(pair2));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(382.146840961);
      assertEquals(382.146840961, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(".,Xl", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      
      Double double1 = new Double(382.146840961);
      assertEquals(382.146840961, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>(".,Xl", double1);
      assertNotNull(pair2);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      
      boolean boolean1 = linkedList0.add(pair2);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertNotSame(pair2, pair1);
      assertNotSame(pair2, pair0);
      assertEquals(2, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      double double2 = discreteDistribution0.probability("CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR");
      assertEquals(0.0, double2, 0.01);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Byte byte0 = Byte.valueOf((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(byte0, double3);
      assertNotNull(pair3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      boolean boolean2 = linkedList1.add(pair3);
      assertTrue(boolean2);
      assertTrue(linkedList1.contains(pair3));
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Pair<Byte, Double> pair4 = linkedList1.remove();
      assertFalse(linkedList1.contains(pair3));
      assertNotNull(pair4);
      assertSame(pair4, pair3);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2768);
      assertEquals(2768, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2768);
      assertEquals(2768.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      Object[] objectArray0 = discreteDistribution0.sample(2768);
      assertEquals(2768, objectArray0.length);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(objectArray0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.offer(pair1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution1);
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      List<Pair<Object, Double>> list0 = discreteDistribution1.getSamples();
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertNotNull(list0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      Object object0 = discreteDistribution1.sample();
      assertEquals(2768, object0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(object0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      List<Pair<Object, Double>> list1 = discreteDistribution0.getSamples();
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list1.contains(pair1));
      assertNotNull(list1);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertNotSame(list1, list0);
      assertEquals(2, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertFalse(list1.equals((Object)list0));
      
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<Pair<Pair<Integer, Object>, Double>> linkedList2 = new LinkedList<Pair<Pair<Integer, Object>, Double>>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2768);
      assertEquals(2768, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2768);
      assertEquals(2768.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution1);
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      Double double1 = new Double(2529.401);
      assertEquals(2529.401, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair2 = new Pair<String, Double>("EP]Ix6vitaf:I.%v", double1);
      assertNotNull(pair2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      assertNotNull(pair3);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair3.equals((Object)pair2));
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertFalse(linkedList1.contains(pair3));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = linkedList1.add(pair2);
      assertTrue(boolean2);
      assertTrue(linkedList1.contains(pair3));
      assertNotSame(pair2, pair3);
      assertEquals(1, linkedList1.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(pair2.equals((Object)pair3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) discreteDistribution0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) discreteDistribution0;
      objectArray0[3] = (Object) linkedList1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) double1;
      objectArray0[7] = (Object) pair3;
      Object[] objectArray1 = linkedList1.toArray(objectArray0);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertTrue(linkedList1.contains(pair3));
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(1, linkedList1.size());
      
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      assertTrue(linkedList1.contains(pair3));
      assertNotNull(discreteDistribution2);
      assertEquals(1, linkedList1.size());
      
      String string0 = discreteDistribution2.sample();
      assertEquals("EP]Ix6vitaf:I.%v", string0);
      assertTrue(linkedList1.contains(pair3));
      assertNotNull(string0);
      assertEquals(1, linkedList1.size());
      
      Random.setNextRandom(2768);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2768);
      assertEquals(2768, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2768);
      assertEquals(2768.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(2768);
      assertEquals(2768, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(2768);
      assertEquals(2768.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair1);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution1);
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      Object[] objectArray0 = discreteDistribution1.sample(2761);
      assertEquals(2761, objectArray0.length);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(objectArray0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertEquals(2, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(linkedList0.contains(pair1));
      assertFalse(list0.contains(pair1));
      assertNotNull(list0);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertEquals(2, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      
      LinkedList<Pair<Pair<Integer, Object>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Object>, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(0.167);
      assertEquals(0.167, (double)double0, 0.01);
      assertNotNull(double0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      assertNotNull(pair0);
      
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Pair<Short, Double> pair2 = new Pair<Short, Double>(pair1);
      assertNotNull(pair2);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertFalse(linkedList0.contains(pair1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertNotSame(pair0, pair2);
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair2);
      assertNotSame(pair1, pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair0.equals((Object)pair2));
      assertTrue(pair1.equals((Object)pair0));
      assertTrue(pair1.equals((Object)pair2));
      
      Well44497b well44497b0 = new Well44497b((int[]) null);
      assertNotNull(well44497b0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, linkedList0);
      assertTrue(linkedList0.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      try { 
        discreteDistribution0.sample((int) (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((-527271620));
      assertEquals((-527271620), (int)integer0);
      assertNotNull(integer0);
      
      short short0 = (short)2223;
      Short short1 = new Short((short)2223);
      assertEquals((short)2223, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Double double0 = new Double(0.737322742573747);
      assertEquals(0.737322742573747, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      assertNotNull(pair0);
      assertTrue(short1.equals((Object)short0));
      
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(pair1.equals((Object)pair0));
      
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      assertFalse(linkedList1.contains(pair1));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add(pair0);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair1));
      assertNotSame(pair0, pair1);
      assertEquals(1, linkedList1.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(pair0.equals((Object)pair1));
      
      int[] intArray0 = new int[8];
      int int0 = (-1018);
      intArray0[0] = (-1018);
      intArray0[1] = (-527271620);
      intArray0[2] = 2768;
      intArray0[3] = 2768;
      intArray0[4] = 2768;
      intArray0[5] = (-527271620);
      intArray0[6] = (-527271620);
      intArray0[7] = (-527271620);
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {(-1018), (-527271620), 2768, 2768, 2768, (-527271620), (-527271620), (-527271620)}, intArray0);
      
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, linkedList1);
      assertEquals(8, intArray0.length);
      assertTrue(linkedList1.contains(pair1));
      assertNotNull(discreteDistribution0);
      assertArrayEquals(new int[] {(-1018), (-527271620), 2768, 2768, 2768, (-527271620), (-527271620), (-527271620)}, intArray0);
      assertEquals(1, linkedList1.size());
      
      try { 
        discreteDistribution0.sample((-1018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,018)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Short short0 = new Short((short)2223);
      assertEquals((short)2223, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((-1511));
      assertEquals((-1511), (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(1851.35608714);
      assertEquals(1851.35608714, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-0.0013888888689039883));
      assertEquals((-0.0013888888689039883), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      assertNotNull(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair1));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.001 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(2768);
      short short0 = (short)2223;
      Short short1 = new Short((short)2223);
      Double double0 = new Double(0.167);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      String string0 = "BR";
      int[] intArray0 = new int[2];
      intArray0[0] = 2768;
      intArray0[1] = 2768;
      Well44497b well44497b0 = new Well44497b(intArray0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, linkedList1);
      discreteDistribution0.sample(2768);
      discreteDistribution0.reseedRandomGenerator(679L);
      try { 
        Short.decode("BR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3510.448751915);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.offerLast(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.sample();
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(2768);
      Double double0 = new Double(2768);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(well44497a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(2768);
      short short0 = (short)2223;
      Short short1 = new Short((short)2223);
      Double double0 = new Double(0.167);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      String string0 = "BR";
      int[] intArray0 = new int[2];
      intArray0[0] = 2768;
      intArray0[1] = 2768;
      Well44497b well44497b0 = new Well44497b(intArray0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, linkedList1);
      discreteDistribution0.sample(2768);
      try { 
        Short.decode("BR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(2768);
      Double double0 = new Double(2768);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      Well44497a well44497a0 = new Well44497a(0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(well44497a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      Double double0 = new Double((-1989.5));
      Pair<Pair<Object, Integer>, Double> pair0 = new Pair<Pair<Object, Integer>, Double>((Pair<Object, Integer>) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,989.5 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(Double.NaN);
      linkedList0.pollFirst();
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(690.6146F);
      Double double0 = new Double(0.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 145;
      Well19937c well19937c0 = new Well19937c(145);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)108;
      intArray0[2] = (int) (byte)108;
      intArray0[3] = 1073;
      intArray0[4] = 0;
      well19937c0.setSeed(intArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)122;
      well19937c0.nextBytes(byteArray0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
