/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 01:00:58 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1508.9329184572534);
      Double double1 = new Double(1508.9329184572534);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.probability((Double) null);
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1508.9329184572534);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      long long0 = 2196L;
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(2196L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = Double.valueOf((-1019.795340239893));
      Double double1 = new Double(1508.9329184572534);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      linkedList0.iterator();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = 4994;
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(jDKRandomGenerator0, linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample(4256);
      discreteDistribution1.probability(double1);
      // Undeclared exception!
      discreteDistribution0.sample(4994);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.4536185639528123);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      linkedList0.iterator();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Double double1 = new Double(0.4536185639528123);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.probability(double1);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2544);
      intArray0[1] = (-50439711);
      intArray0[2] = (-5755);
      intArray0[3] = 4459;
      intArray0[4] = (-5);
      intArray0[5] = 1441;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair1 = new Pair<Object, Double>("", double1);
      linkedList2.add(pair1);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList2);
      discreteDistribution1.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(11.282449840426544);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      linkedList0.iterator();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = 4994;
      int int1 = 4256;
      discreteDistribution0.sample(4256);
      discreteDistribution0.probability((Double) null);
      // Undeclared exception!
      discreteDistribution0.sample(4994);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.4536185639528123);
      Double double1 = new Double(0.4536185639528123);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      linkedList1.iterator();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Double double2 = new Double(0.4536185639528123);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample(4994);
      discreteDistribution0.probability(double1);
      // Undeclared exception!
      discreteDistribution0.sample(4994);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.4536185639528123);
      Double double1 = new Double(0.4536185639528123);
      Double double2 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      linkedList1.add(pair0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair1);
      linkedList1.iterator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      int int0 = 569;
      discreteDistribution0.sample(569);
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.4536185639528123);
      Double double1 = new Double(0.4536185639528123);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      linkedList0.iterator();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Double double2 = new Double(0.4536185639528123);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double3 = discreteDistribution0.probability(double2);
      assertEquals(1.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.4536185639528123);
      Double double1 = new Double(0.4536185639528123);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList1.add(pair0);
      linkedList1.iterator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double[] doubleArray0 = discreteDistribution0.sample(569);
      assertEquals(569, doubleArray0.length);
      
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      Double double2 = new Double(3551.243182056089);
      double double3 = discreteDistribution0.probability(double2);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.4536185639528123);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList1.add(pair0);
      linkedList1.iterator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.017346945894962662);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      linkedList0.add(pair0);
      Double double2 = new Double(0.11911099009503334);
      Double double3 = new Double(0.017346945894962662);
      Double double4 = new Double(0.0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
      linkedList0.iterator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      int int0 = 569;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(569);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(803.964012744);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      linkedList0.add(pair0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double1);
      Pair<Double, Double> pair2 = new Pair<Double, Double>((Double) null, double1);
      linkedList0.add(pair2);
      linkedList0.iterator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(569);
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0);
      Double double0 = new Double(2842.0993188635193);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("+KVr5iVU<Cu", double0);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      int int0 = 145;
      discreteDistribution1.sample(145);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0);
      Double double0 = new Double(2842.0993188635193);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("+KVr5iVU<Cu", double0);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(well19937a0, linkedList0);
      Float float1 = discreteDistribution2.sample();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Float float0 = new Float(1.0);
      Double double0 = new Double(1.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0);
      Double double0 = new Double(2842.0993188635193);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("+KVr5iVU<Cu", double0);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      discreteDistribution1.reseedRandomGenerator(0L);
      try { 
        discreteDistribution1.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1707);
      Well44497b well44497b0 = new Well44497b((-1707));
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.clone();
      Double double0 = new Double((-1707));
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,707 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0);
      Double double0 = new Double(2842.0993188635193);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("+KVr5iVU<Cu", double0);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      try { 
        discreteDistribution1.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(1373.617312344);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.iterator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(3871);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3871);
      Double double0 = null;
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, (Double) null);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short) (-916));
      Double double0 = new Double((short) (-916));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      linkedList0.listIterator();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -916 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1400L);
      well1024a0.clear();
      well1024a0.setSeed(4591L);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well1024a0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      Float float0 = new Float((float) 4591L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Float float1 = new Float((-1572.3868F));
      predicate1.test(float1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      linkedList0.removeIf(predicate3);
      linkedList0.parallelStream();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(synchronizedRandomGenerator0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a(3067);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
