/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:32:09 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((float) 248);
      Double double0 = new Double(248);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(248);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double1);
      linkedList0.add(pair2);
      linkedList0.offer(pair2);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      linkedList0.pollFirst();
      Float float1 = new Float(0.0F);
      Double double2 = new Double((-1642.052986));
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float0, double2);
      linkedList0.add(pair1);
      linkedList0.offer(pair1);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution1.sample();
      discreteDistribution1.reseedRandomGenerator((-3512299194304650054L));
      List<Pair<Float, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(linkedList0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Float> discreteDistribution3 = new DiscreteDistribution<Float>(jDKRandomGenerator0, list0);
      discreteDistribution3.sample(2878);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1472.93);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      int int0 = 1132;
      discreteDistribution0.sample(1132);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.probability("wp[.fo");
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(575);
      Double double0 = new Double(750.19477909475);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((float) 248);
      Double double0 = new Double(248);
      Float float1 = new Float(0.3289340027691756);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("TANGENT_TABLE_B", double0);
      linkedList1.add(pair1);
      discreteDistribution0.reseedRandomGenerator((-15L));
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.probability(float1);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(248);
      Double double1 = new Double(192.74028004);
      Integer integer1 = new Integer(248);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double0);
      linkedList2.add(pair2);
      Double double2 = new Double(0.0F);
      linkedList0.offer(pair0);
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample(6262);
      discreteDistribution1.getSamples();
      LinkedList<Pair<Short, Double>> linkedList3 = new LinkedList<Pair<Short, Double>>();
      // Undeclared exception!
      discreteDistribution2.sample(6262);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Float float1 = new Float(Float.POSITIVE_INFINITY);
      Double double1 = new Double(Float.POSITIVE_INFINITY);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double1);
      linkedList1.offer(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int[] intArray0 = new int[2];
      intArray0[0] = 2625;
      intArray0[1] = 2974;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2974);
      Double double1 = new Double((-1179.06373432856));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) 2974, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
      discreteDistribution0.probability(pair0);
      System.setCurrentTimeMillis(1664525L);
      discreteDistribution0.sample();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2625);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[8];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2071.353);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Double double1 = new Double(2071.353);
      Double double2 = new Double(3060.563831192547);
      Integer integer0 = new Integer(719);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.probability((Object) null);
      System.setCurrentTimeMillis(719);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 237;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(237);
      Double double1 = new Double(237);
      Double double2 = new Double(237);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double2);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
      discreteDistribution0.reseedRandomGenerator((-448L));
      discreteDistribution0.sample();
      mersenneTwister0.nextInt();
      linkedList1.clone();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(mersenneTwister0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 237;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(237);
      Double double1 = new Double(237);
      Double double2 = new Double(237);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double2);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
      mersenneTwister0.nextInt();
      linkedList1.clone();
      discreteDistribution0.probability((Object) null);
      discreteDistribution0.reseedRandomGenerator((-1920L));
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 248;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-872.44));
      Double double1 = new Double(166.0);
      Double double2 = new Double(0.54125972829224);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double2);
      linkedList0.add(pair0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) 248, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 248;
      intArray0[1] = 248;
      intArray0[2] = 0;
      intArray0[3] = (-814);
      Double double0 = new Double(248);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(248);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, double1);
      linkedList0.push(pair2);
      Double double2 = new Double((-2359.100437967558));
      Double double3 = new Double(0);
      Double double4 = new Double(20.934647250028075);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double4);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair3);
      Pair<Double, Double> pair5 = new Pair<Double, Double>(pair3);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair6 = new Pair<Double, Double>(pair2);
      linkedList1.add(pair6);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Pair<Double, Double> pair7 = new Pair<Double, Double>(double4, double3);
      linkedList0.add(pair7);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample(285);
      discreteDistribution1.reseedRandomGenerator(0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 248;
      intArray0[1] = 248;
      intArray0[2] = 0;
      intArray0[3] = (-814);
      Double double0 = new Double(248);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(248);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, double1);
      linkedList0.push(pair2);
      Double double2 = new Double((-2359.100437967558));
      Double double3 = new Double(0);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
      discreteDistribution0.probability(pair2);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(2173L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 248;
      intArray0[1] = 248;
      intArray0[2] = 0;
      intArray0[3] = (-814);
      Double double0 = new Double(248);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.push(pair0);
      Double double1 = new Double(0);
      linkedList0.add(pair1);
      Double double2 = new Double((-1706.2965870642968));
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair3);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(13);
      discreteDistribution0.reseedRandomGenerator(0);
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList2 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Byte, String>>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 248;
      intArray0[1] = 248;
      intArray0[2] = 0;
      intArray0[3] = (-814);
      Double double0 = new Double(248);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.push(pair0);
      Double double1 = new Double(0);
      Double double2 = new Double((-1706.2965870642968));
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair3);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(13);
      discreteDistribution0.reseedRandomGenerator(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.push(pair1);
      Double double2 = new Double(2420.555992);
      Pair<Double, Double> pair2 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      try { 
        discreteDistribution0.sample((-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-15)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 166;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(560.785604);
      Integer integer0 = new Integer(2134624464);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.probability(double0);
      discreteDistribution0.reseedRandomGenerator(252L);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-1182.9086));
      Double double0 = new Double((-1182.9086));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      Float float1 = new Float((-3415.37));
      Well19937a well19937a0 = new Well19937a(0L);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,182.909 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.push(pair1);
      Double double2 = new Double(2420.555992);
      Pair<Double, Double> pair2 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double((-889.2));
      Double double1 = new Double(0.0);
      Double double2 = new Double((-889.2));
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.push(pair1);
      Double double3 = new Double(0.0);
      Double double4 = new Double(0.0);
      Double double5 = new Double(1100.87652387);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double4, double5);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -889.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 248;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-814);
      intArray0[4] = 142;
      intArray0[5] = 166;
      intArray0[6] = 1571;
      intArray0[7] = (-1774);
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(166);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) (-1774), double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.probability(mersenneTwister0);
      discreteDistribution0.reseedRandomGenerator(0L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.push(pair1);
      Double double2 = new Double(2420.555992);
      Pair<Double, Double> pair2 = new Pair<Double, Double>((Double) null, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1025L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, (Double) null);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well512a0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      linkedList0.toArray();
      linkedList0.listIterator();
      Long long0 = new Long(752L);
      Double double0 = new Double(752L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.addFirst(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
