/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:14:51 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(1048.208700572188);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1605.2538);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample(1512);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("FN_A=*rT]T#+", double0);
      linkedList1.offerFirst(pair2);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(jDKRandomGenerator0, list0);
      Object object1 = discreteDistribution1.sample();
      Pair<Object, Double> pair3 = new Pair<Object, Double>(object1, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList0);
      Object object2 = new Object();
      Integer integer0 = new Integer(1512);
      linkedList0.removeFirstOccurrence(integer0);
      discreteDistribution0.probability(object2);
      discreteDistribution1.sample(1512);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(1048.208700572188);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1605.2538);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double1, double0);
      linkedList0.add(pair0);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(189.22391726057603);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      // Undeclared exception!
      discreteDistribution1.sample(182732116);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      linkedList0.removeFirstOccurrence((Object) null);
      Object object0 = new Object();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      linkedList0.removeLastOccurrence(double0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      discreteDistribution0.sample(320);
      discreteDistribution0.probability((Object) null);
      Well44497b well44497b0 = new Well44497b((long) 320);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Well512a well512a0 = new Well512a((long) 320);
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well512a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(1048.208700572188);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1605.2538);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.sample(1465);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Object object1 = new Object();
      Pair<Object, Double> pair2 = new Pair<Object, Double>(object1, double0);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2.3501806259155273);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      linkedList0.removeFirstOccurrence((Object) null);
      Object object0 = new Object();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution1.getSamples();
      discreteDistribution1.sample();
      discreteDistribution0.sample(320);
      try { 
        discreteDistribution1.sample((-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,480)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(190.6054);
      Float float0 = new Float(190.6054);
      Pair<String, Float> pair0 = new Pair<String, Float>("", float0);
      Pair<String, Float> pair1 = new Pair<String, Float>(pair0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability(pair1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      Object object0 = new Object();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution1.probability(double0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      LinkedList<Pair<Pair<Float, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, Double>, Double>>();
      DiscreteDistribution<Pair<Float, Double>> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Pair<Float, Double>>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(1048.208700572188);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1605.2538);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample(1465);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution1.probability(pair2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      linkedList0.removeFirstOccurrence((Object) null);
      Object object0 = new Object();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      linkedList0.removeLastOccurrence(double0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      discreteDistribution0.sample(1);
      Short short0 = new Short((short) (-3139));
      discreteDistribution0.probability(short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      Object object0 = new Object();
      Pair<String, Double> pair0 = new Pair<String, Double>("`=eU#C`u4o.+S;Je+", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(1048.208700572188);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.offerLast(pair1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair2);
      Double double1 = new Double(1605.2538);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(double1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1465);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.util.LinkedList
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 320;
      intArray0[0] = 320;
      intArray0[1] = (-1274);
      intArray0[2] = (-2031);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.07250232994556427);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.offerLast(pair0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double1 = new Double(320);
      Object object0 = new Object();
      Pair<Object, Double> pair1 = new Pair<Object, Double>(object0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(1048.208700572188);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1605.2538);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(double1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 1465;
      discreteDistribution0.sample(1465);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 350;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(0.5194856608806926);
      Short short0 = new Short((short)876);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(0.4864732542283743);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(0.4864732542283743);
      Byte byte0 = new Byte((byte)0);
      Pair<Byte, Byte> pair1 = new Pair<Byte, Byte>(byte0, byte0);
      Pair<Byte, Byte> pair2 = new Pair<Byte, Byte>(pair1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 1465;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1465);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextGaussian();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.7362563493239922);
      Pair<String, Double> pair0 = new Pair<String, Double>("C", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextGaussian();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(576.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("w.LB-BoF)y(Z!)", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair0);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      discreteDistribution1.sample();
      discreteDistribution1.getSamples();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      intArray0[1] = (-1254);
      intArray0[2] = (-2031);
      intArray0[3] = 0;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(348.1569169);
      Object object0 = new Object();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample(513);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      intArray0[1] = (-1254);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double0 = new Double(320);
      Short short0 = new Short((short) (-2726));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      try { 
        discreteDistribution0.sample((-96));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-96)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.6012291978252082);
      Object object0 = new Object();
      Float float0 = new Float((-1.1036542789147287E-244));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(float0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample((-648969875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-648,969,875)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      intArray0[1] = (-1254);
      intArray0[2] = (-2031);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextGaussian();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3407.50326269849);
      Double double1 = new Double((-2031));
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("C", double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,031 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      intArray0[1] = (-1254);
      intArray0[2] = (-2031);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(320);
      linkedList0.removeFirstOccurrence((Object) null);
      Object object0 = new Object();
      byte byte0 = (byte)80;
      Byte byte1 = new Byte((byte)80);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.sample((int) (byte)80);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Long>, Double>>();
      Pair<Integer, Long> pair0 = (Pair<Integer, Long>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Integer, Long> pair1 = new Pair<Integer, Long>(pair0);
      linkedList0.clone();
      Double double0 = new Double(1046.746);
      Pair<Pair<Integer, Long>, Double> pair2 = new Pair<Pair<Integer, Long>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Long>>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-386L));
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      intArray0[1] = (-1254);
      intArray0[2] = (-2031);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextGaussian();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3407.50326269849);
      Pair<String, Double> pair0 = new Pair<String, Double>("C", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2031));
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Pair<Double, Short> pair0 = (Pair<Double, Short>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Double, Short> pair1 = new Pair<Double, Short>(pair0);
      Double double0 = new Double((-295.344015));
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.containsAll(linkedList1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -295.344 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(24.53640666188759);
      Double double1 = new Double((-1.0));
      Pair<Object, Double> pair0 = new Pair<Object, Double>("", double1);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      int int0 = 0;
      Byte byte0 = new Byte((byte)104);
      Double double0 = new Double(0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(0, pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 320;
      intArray0[1] = (-1254);
      intArray0[2] = (-2031);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextGaussian();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3407.50326269849);
      Pair<String, Double> pair0 = new Pair<String, Double>("C", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-99516416));
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(413);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well44497a0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) null);
      linkedList0.add(pair0);
      Double double0 = new Double(0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(980L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
