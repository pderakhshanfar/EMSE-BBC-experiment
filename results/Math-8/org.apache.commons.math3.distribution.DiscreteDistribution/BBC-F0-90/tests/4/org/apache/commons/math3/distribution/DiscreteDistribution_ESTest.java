/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:18:43 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1608);
      Double double0 = new Double(1608);
      Double double1 = new Double(1608);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double1);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer.getInteger("Vu/P~s`07@Hm|q-");
      discreteDistribution0.probability((Integer) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair2);
      Integer integer1 = new Integer(1);
      Double double1 = new Double(1);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer1, double1);
      linkedList0.addFirst(pair3);
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[0];
      well1024a0.nextBytes(byteArray0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(2237);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(linkedList0);
      // Undeclared exception!
      discreteDistribution3.sample(2237);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Integer integer1 = new Integer(1);
      Double double1 = new Double(1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double1);
      linkedList0.addFirst(pair2);
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[0];
      well1024a0.nextBytes(byteArray0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      Well19937c well19937c0 = new Well19937c(1);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      discreteDistribution0.probability((Integer) null);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair2);
      Integer integer1 = new Integer(1);
      Double double1 = new Double(1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(1);
      System.setCurrentTimeMillis(863L);
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2564));
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      LinkedList<Pair<Pair<Integer, Byte>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Byte>, Double>>();
      DiscreteDistribution<Pair<Integer, Byte>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Integer, Byte>>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(207.018);
      linkedList0.removeLastOccurrence(double0);
      Double double1 = new Double(1);
      Double double2 = new Double(1);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double2);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList1.offerFirst(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution0.sample();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-1298);
      intArray0[3] = (-1298);
      intArray0[4] = 236;
      intArray0[5] = 274;
      intArray0[6] = 1;
      intArray0[7] = 236;
      intArray0[8] = (-1298);
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList2 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Long, Integer>>(well44497b0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      well1024a0.nextBoolean();
      Double double0 = new Double(0);
      Double double1 = new Double(1);
      Pair<String, Double> pair0 = new Pair<String, Double>("G<):*K(gGj%", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      well44497b0.setSeed(intArray0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList1);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.clear();
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.probability("'se8X}BAAJ:x");
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Integer integer1 = new Integer(1);
      Double double1 = new Double(1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double1);
      linkedList0.addFirst(pair2);
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[0];
      well1024a0.nextBytes(byteArray0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      discreteDistribution1.probability(integer1);
      System.setCurrentTimeMillis(152);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(0.7854973316336329);
      Integer integer0 = new Integer(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.addLast(pair0);
      System.setCurrentTimeMillis(0L);
      Well19937c well19937c0 = new Well19937c(1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.probability(integer0);
      System.setCurrentTimeMillis(4607182418800017408L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      well1024a0.nextBoolean();
      Double double0 = new Double(0);
      Double double1 = new Double(1);
      Pair<String, Double> pair0 = new Pair<String, Double>("G<):*K(gGj%", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      linkedList1.clone();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList1);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.removeLastOccurrence(well44497b0);
      discreteDistribution0.sample();
      linkedList2.clear();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Integer integer1 = new Integer(1);
      Double double1 = new Double(1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer1, double1);
      linkedList0.addFirst(pair2);
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[0];
      well1024a0.nextBytes(byteArray0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      discreteDistribution0.sample(2237);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2247);
      intArray0[1] = 54;
      intArray0[2] = (-831);
      intArray0[3] = 0;
      Integer integer0 = new Integer((-831));
      Double double0 = new Double(54);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) (-2247), double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double1 = new Double((-1.0));
      Integer integer1 = new Integer(248);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer1, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer2 = new Integer(145);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer2, double0);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair2);
      linkedList1.addFirst(pair3);
      Well512a well512a0 = new Well512a((-2247));
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(207.018);
      linkedList0.removeLastOccurrence(double0);
      Integer integer0 = new Integer(1);
      Double double1 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      linkedList0.addFirst(pair0);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1);
      discreteDistribution0.sample(2237);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[5];
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((float) 0);
      Double double0 = new Double(0.3885392499061715);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      intArray0[0] = 0;
      intArray0[1] = (-1298);
      intArray0[2] = 236;
      intArray0[3] = 274;
      intArray0[4] = 0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Pair<Long, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Long, Integer>, Double>>();
      DiscreteDistribution<Pair<Long, Integer>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Long, Integer>>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(0.097);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.addFirst(pair0);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      int int0 = 2237;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2237);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2247);
      intArray0[1] = 54;
      Integer integer0 = new Integer((-831));
      Double double0 = new Double(1.1795268640216787E-8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.addFirst(pair0);
      Well512a well512a0 = new Well512a((-1));
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.nextBoolean();
      discreteDistribution0.sample(1272);
      discreteDistribution0.sample(156);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(1272);
      Double double2 = new Double((-1));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double2, double1);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      linkedList2.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497b0, linkedList2);
      discreteDistribution1.sample();
      LinkedList<Pair<Byte, Double>> linkedList3 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(well512a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      well1024a0.nextBoolean();
      Double double0 = new Double(0);
      Double double1 = new Double(1);
      Pair<String, Double> pair0 = new Pair<String, Double>("G<):*K(gGj%", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      linkedList1.clone();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList1);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.clear();
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Short, Double>> linkedList3 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well44497b0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      int int0 = 2;
      Integer integer1 = new Integer(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      linkedList0.addFirst(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
      well44497b0.nextBoolean();
      try { 
        discreteDistribution0.sample((-1010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,010)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(0.097);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.addFirst(pair0);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      discreteDistribution0.sample(2237);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2247);
      intArray0[1] = 54;
      intArray0[2] = (-831);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      well1024a0.nextBoolean();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double((-2247));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) (-2247), double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.addFirst(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,247 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2247);
      intArray0[1] = 54;
      intArray0[2] = (-831);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      well1024a0.nextBoolean();
      Double double0 = new Double(0);
      Pair<String, Double> pair0 = new Pair<String, Double>("G<):*K(gGj%", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.clone();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-1127.2));
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.addLast(pair1);
      Double double1 = new Double(0.0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double1);
      linkedList0.offer(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,127.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well512a well512a0 = new Well512a((-3274L));
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair0 = null;
      linkedList0.add((Pair<Short, Double>) null);
      linkedList0.stream();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 247;
      Well19937c well19937c0 = new Well19937c(247);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
