/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:22:42 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(5218);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(5218);
      assertNotNull(double0);
      assertEquals(5218.0, (double)double0, 0.01);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample((-565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-565)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(5.2240336371356666E-9);
      assertNotNull(double0);
      assertEquals(5.2240336371356666E-9, (double)double0, 0.01);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      Well19937a well19937a0 = new Well19937a((-816447270));
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(596);
      assertNotNull(double0);
      assertEquals(596.0, (double)double0, 0.01);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(")IMm@n", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      String string0 = discreteDistribution0.sample();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(string0);
      assertEquals(")IMm@n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(447);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(447);
      assertNotNull(double0);
      assertEquals(447.0, (double)double0, 0.01);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1712280761);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1));
      assertNotNull(mersenneTwister0);
      
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      Double double0 = new Double((byte) (-98));
      assertNotNull(double0);
      assertEquals((-98.0), (double)double0, 0.01);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -98 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(2312L);
      assertNotNull(well44497a0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497a0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(605);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long((-2309L));
      assertNotNull(long0);
      assertEquals((-2309L), (long)long0);
      
      Double double0 = new Double(3586.6305369635);
      assertNotNull(double0);
      assertEquals(3586.6305369635, (double)double0, 0.01);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      Long[] longArray0 = discreteDistribution0.sample(885);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertEquals(885, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(5.2240336371356666E-9);
      assertNotNull(double0);
      assertEquals(5.2240336371356666E-9, (double)double0, 0.01);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(pair0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertTrue(boolean0);
      
      Well19937a well19937a0 = new Well19937a((-816447270));
      assertNotNull(well19937a0);
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      assertNotNull(discreteDistribution0);
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(8388608);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(447);
      well44497a0.nextDouble();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      well44497a0.nextInt();
      Double double0 = new Double(447);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList0.offer(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497a0, linkedList0);
      Long long0 = discreteDistribution0.sample();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(596);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.33953672647476196);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double double1 = new Double(750.91918);
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.2344403131711057);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(2501.9853303796035);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.33953672647476196);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability(double0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-1677.325));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,677.325 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(1379);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
