/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:50:49 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(1664525L);
      assertEquals(1664525L, (long)long0);
      assertNotNull(long0);
      
      Double double0 = new Double(1664525L);
      assertEquals(1664525.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      try { 
        discreteDistribution0.sample((-1221985044));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,221,985,044)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[7];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well19937a0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      String string0 = discreteDistribution0.sample();
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, linkedList0.size());
      assertNull(string0);
      assertTrue(linkedList0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(468.5122876548112);
      assertEquals(468.5122876548112, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(1261.30725);
      assertEquals(1261.30725, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(1339);
      assertEquals(1339, (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(integer0, (Double) null);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(467.8956760658621);
      assertEquals(467.8956760658621, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("L>f!pNk", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      String[] stringArray0 = discreteDistribution0.sample(269);
      assertEquals(269, stringArray0.length);
      assertEquals(1, linkedList0.size());
      assertNotNull(stringArray0);
      assertTrue(linkedList0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double(468.5122876548112);
      assertEquals(468.5122876548112, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("L>f!pNk", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      assertTrue(linkedList0.contains(pair0));
      
      String string0 = discreteDistribution0.sample();
      assertEquals("L>f!pNk", string0);
      assertEquals(2, linkedList0.size());
      assertNotNull(string0);
      assertTrue(linkedList0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.9415836737238308);
      Pair<String, Double> pair0 = new Pair<String, Double>("cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(63283785);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.9415836737238308);
      Pair<String, Double> pair0 = new Pair<String, Double>("cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(1.0);
      int[] intArray0 = new int[7];
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = new Pair<String, Double>("lRdG", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      double double1 = discreteDistribution0.probability("NOT_POSITIVE_SAMPLE_SIZE");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(1.0);
      int[] intArray0 = new int[7];
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      Well1024a well1024a0 = new Well1024a(658);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.9415836737238308);
      Pair<String, Double> pair0 = new Pair<String, Double>("cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution0.probability("cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible");
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-680.4));
      Pair<String, Double> pair0 = new Pair<String, Double>("QYT]", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -680.4 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      Well1024a well1024a0 = new Well1024a(658);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(658);
  }
}
