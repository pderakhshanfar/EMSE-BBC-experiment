/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:23:36 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well512a well512a0 = new Well512a(1860L);
      Byte byte0 = new Byte((byte)0);
      Pair<String, Byte> pair0 = new Pair<String, Byte>("", byte0);
      Double double0 = new Double(1860L);
      Pair<Pair<String, Byte>, Double> pair1 = new Pair<Pair<String, Byte>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>(well512a0, linkedList0);
      try { 
        discreteDistribution0.sample((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(22.0);
      Pair<Pair<String, Byte>, Double> pair0 = new Pair<Pair<String, Byte>, Double>((Pair<String, Byte>) null, double0);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      linkedList0.add(pair0);
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>(iSAACRandom0, linkedList0);
      Pair<String, Byte> pair1 = discreteDistribution0.sample();
      assertNull(pair1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-115));
      Double double0 = new Double(277.0284);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample(3409);
      // Undeclared exception!
      discreteDistribution0.sample(3407);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0.8521699116512564);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample((int) (byte)36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(277.0284);
      Pair<Pair<String, Byte>, Double> pair0 = new Pair<Pair<String, Byte>, Double>((Pair<String, Byte>) null, double0);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-43));
      Double double0 = new Double(1.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(355L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-2064));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(mersenneTwister0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,064 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      mersenneTwister0.setSeed(1181L);
      Pair<String, Byte> pair0 = new Pair<String, Byte>("org.apache.commons.math3.distribution.DiscreteDistribution", (Byte) null);
      Double double0 = new Double(1181L);
      Pair<Pair<String, Byte>, Double> pair1 = new Pair<Pair<String, Byte>, Double>(pair0, double0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>(mersenneTwister0, linkedList0);
      Pair<String, Byte> pair2 = discreteDistribution0.sample();
      assertSame(pair2, pair0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-85));
      Double double0 = new Double(277.0284);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      try { 
        discreteDistribution0.sample((int) (byte) (-85));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-85)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-43));
      Double double0 = new Double(1.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-115));
      Double double0 = new Double(277.0284);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = new Byte((byte)72);
      double double1 = discreteDistribution0.probability(byte1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(22.0);
      Pair<Pair<String, Byte>, Double> pair0 = new Pair<Pair<String, Byte>, Double>((Pair<String, Byte>) null, double0);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      linkedList0.add(pair0);
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>(iSAACRandom0, linkedList0);
      double double1 = discreteDistribution0.probability((Pair<String, Byte>) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      Pair<String, Byte> pair0 = new Pair<String, Byte>("org.apache.commons.math3.distribution.DiscreteDistribution", (Byte) null);
      Double double0 = new Double(1181L);
      Pair<Pair<String, Byte>, Double> pair1 = new Pair<Pair<String, Byte>, Double>(pair0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>(mersenneTwister0, linkedList0);
      double double1 = discreteDistribution0.probability((Pair<String, Byte>) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(1860L);
      Byte byte0 = new Byte((byte) (-43));
      Pair<String, Byte> pair0 = new Pair<String, Byte>("", byte0);
      Pair<Pair<String, Byte>, Double> pair1 = new Pair<Pair<String, Byte>, Double>(pair0, double0);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      linkedList0.add(pair1);
      ISAACRandom iSAACRandom0 = new ISAACRandom(846);
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Byte>>(iSAACRandom0, linkedList0);
      double double1 = discreteDistribution0.probability(pair0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double((-1510.97435));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,510.974 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a(1860L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1860L);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well512a0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
  }
}
