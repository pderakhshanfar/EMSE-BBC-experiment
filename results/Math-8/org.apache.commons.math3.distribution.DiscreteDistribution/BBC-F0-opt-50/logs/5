* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-50
* Going to generate test cases for class: org.apache.commons.math3.distribution.DiscreteDistribution
* Starting Client-0
* Connecting to master process on port 15969
* Analyzing classpath: 
  - subjects/buggy-versions/Math-8/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.distribution.DiscreteDistribution
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 245
* Using seed 2998627705
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 62 / 245
[MASTER] 23:09:40.174 [logback-2] ERROR TestCluster - Failed to check cache for org.apache.commons.math3.util.Pair<K, V> : Type points to itself
[MASTER] 23:15:47.042 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 602s and 593 generations, 252098 statements, best individual has fitness: 34.0
* Minimizing test suite
[MASTER] 23:20:42.136 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 38
* Number of covered goals: 36
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 127
* Number of covered goals: 116
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 14
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 26
* Number of covered goals: 25
* Generated 28 tests with total length 552
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:21:44.309 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 23:22:00.626 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:22:01.722 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:22:02.304 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:22:02.856 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:22:19.464 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 23:22:19.465 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
long long0 = 1L;
Long long1 = new Long(1L);
Double double0 = new Double(1.0);
Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
linkedList1.add(pair0);
DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
discreteDistribution0.sample();
Well512a well512a0 = new Well512a(434);
DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well512a0, linkedList1);
discreteDistribution0.sample(702005309);

* Writing tests to file
* Writing JUnit test case 'DiscreteDistribution_ESTest' to results/Math-8/org.apache.commons.math3.distribution.DiscreteDistribution/BBC-F0-opt-50/tests/5
* Done!

* Computation finished
