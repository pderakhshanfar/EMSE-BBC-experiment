/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:11:09 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2576.839474793326);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      well19937c0.nextDouble();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(39.67);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1159;
      intArray0[2] = (-1350);
      intArray0[3] = (-2809);
      intArray0[4] = (-1);
      intArray0[5] = 132;
      intArray0[6] = 486;
      Well1024a well1024a0 = new Well1024a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well1024a0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1L);
      Double double0 = new Double(2717.0);
      Long long1 = new Long(1746L);
      Long long2 = new Long(1L);
      Double double1 = new Double((-2651.20006));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long2, double1);
      Double double2 = new Double(1907.650678306095);
      Double double3 = new Double(1746L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double3);
      Double double4 = new Double(2717.0);
      Double double5 = new Double(1907.650678306095);
      Pair<Long, Double> pair2 = new Pair<Long, Double>((Long) null, double5);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      Well19937a well19937a0 = new Well19937a();
      Well19937c well19937c0 = new Well19937c(706);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(well19937c0, linkedList0);
      Long.getLong("yz:he*@$jv/v,k-h", (Long) null);
      discreteDistribution0.probability((Long) null);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(5424L);
      Long long1 = new Long(1746L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Double double1 = new Double(5424L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long1, double0);
      Double double2 = new Double((-2746.7144086966));
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long1, double2);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      double double3 = discreteDistribution1.probability((Long) null);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(5424L);
      long long1 = 1746L;
      Long long2 = new Long(1746L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long2, double0);
      Long long3 = new Long(4607182418800017408L);
      Double double1 = new Double(4607182418800017408L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double1);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(pair1);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(229);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(1.0);
      Long long1 = new Long(2655L);
      Double double1 = new Double(1.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample();
      Long long2 = new Long(5424L);
      Well19937a well19937a0 = new Well19937a((-1839));
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      discreteDistribution1.probability(long2);
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(5424L);
      Long long1 = new Long(1746L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Long long2 = new Long(4607182418800017408L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long2, double0);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(pair1);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList1);
      discreteDistribution0.sample(229);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList2 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      Well512a well512a0 = new Well512a((-826));
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well512a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(5424L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(330.76);
      Long long1 = new Long(5424L);
      Double double1 = new Double(330.76);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      Long long2 = new Long(0L);
      discreteDistribution0.probability(long2);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2120);
      intArray0[1] = (-515);
      intArray0[2] = 890;
      intArray0[3] = 727;
      intArray0[4] = (-805);
      intArray0[5] = (-1303);
      intArray0[6] = (-2145181434);
      intArray0[7] = (-2837);
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(39.67);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      try { 
        discreteDistribution0.sample((-2777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,777)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(125.8);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
      DiscreteDistribution<Long> discreteDistribution2 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution2.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(125.8);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(330.76);
      Long long1 = new Long(5424L);
      Double double1 = new Double(330.76);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      System.setCurrentTimeMillis(5424L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(5424L);
      Double double0 = new Double(39.67);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Pair<Integer, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Float>, Double>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1.4E-45F);
      Double double0 = new Double(1.4E-45F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(31L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-698);
      int int0 = (-2862);
      intArray0[1] = (-2862);
      int int1 = (-1355);
      intArray0[2] = (-1355);
      Well19937a well19937a0 = new Well19937a(intArray0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double((-1355));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) (-698), double0);
      linkedList0.addFirst(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(synchronizedRandomGenerator0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,355 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.listIterator();
      Double double0 = new Double((-68.2));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.push(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -68.2 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(971);
      Integer integer1 = new Integer(971);
      Double double0 = new Double(971);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.remove((Object) integer0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(0.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      Well19937c well19937c0 = new Well19937c(0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      well19937c0.nextBoolean();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
