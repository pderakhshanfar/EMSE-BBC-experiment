/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:22:32 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(827.3);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample(1);
      List<Pair<Double, Double>> list0 = linkedList0.subList(1, 1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-2454L));
      Random.setNextRandom(2426);
      Random.setNextRandom(152);
      Random.setNextRandom(152);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.3606464059428694E-8);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, linkedList0);
      linkedList0.pollLast();
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator((-2454L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.SynchronizedRandomGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.676321029663086);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.probability((Double) null);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      Random.setNextRandom(1);
      LinkedList<Pair<Pair<Long, Short>, Double>> linkedList0 = new LinkedList<Pair<Pair<Long, Short>, Double>>();
      Pair<Long, Short> pair0 = (Pair<Long, Short>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Long, Short> pair1 = new Pair<Long, Short>(pair0);
      Double double0 = new Double(1);
      Pair<Pair<Long, Short>, Double> pair2 = new Pair<Pair<Long, Short>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Long, Short>> discreteDistribution0 = new DiscreteDistribution<Pair<Long, Short>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(1);
      System.setCurrentTimeMillis((-1140L));
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 1);
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(mersenneTwister0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1273.306921052832);
      Long long0 = Long.valueOf(5180L);
      Double double1 = new Double(1234.78280401511);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList1);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(jDKRandomGenerator0, linkedList1);
      discreteDistribution1.sample(1479);
      discreteDistribution0.sample(1479);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      linkedList2.removeAll(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(827.3);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(827.3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.probability((Double) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(827.3);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability(double0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(827.3);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      Double double1 = new Double(199.231623);
      discreteDistribution0.probability(double1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(651.0F);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      Float float0 = new Float(651.0F);
      linkedList0.removeFirstOccurrence(float0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      int int0 = 294733218;
      // Undeclared exception!
      discreteDistribution0.sample(294733218);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(458.0338935643931);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      Well1024a well1024a0 = new Well1024a((int[]) null);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = new Double(502018240);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.5023649429337562);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(0.3302552714712039);
      Double double2 = new Double((-465.6258));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double2);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.5023649429337562);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Long long0 = new Long(1077L);
      Long.getLong("L*", long0);
      Double double1 = new Double(1081.6);
      Long.valueOf(1077L);
      Double double2 = new Double(1913.410420836224);
      Pair<Long, Double> pair1 = new Pair<Long, Double>((Long) null, double2);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(pair1);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair1);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 399;
      intArray0[2] = 399;
      intArray0[3] = 399;
      intArray0[4] = 399;
      intArray0[5] = 399;
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(399);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Long long0 = Long.valueOf((-1625L));
      Double double0 = new Double(0.7685163909227797);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Double double1 = new Double((-1625L));
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, double1);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      linkedList1.remove((Object) double1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      linkedList1.retainAll(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(2543);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-849));
      Double double0 = new Double(1521.5119553656);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Long long0 = new Long(1L);
      Long.getLong("B!Lb&fKJ", long0);
      Double double0 = new Double(1L);
      Long long1 = Long.valueOf(1L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[2];
      linkedList1.add(pair0);
      intArray0[0] = (-770);
      intArray0[1] = (-1721);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      int int0 = (-746);
      discreteDistribution0.sample(475);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        linkedList2.remove((-608));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -608, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Long long0 = new Long(1L);
      Long.getLong("B!Lb&fKJ", long0);
      Double double0 = new Double(1L);
      Long long1 = Long.valueOf(1L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-770);
      intArray0[1] = (-1721);
      Well19937a well19937a0 = new Well19937a(intArray0);
      linkedList1.remove((Object) long1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.sample(2597);
      int int0 = (-746);
      discreteDistribution0.sample(475);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Long long0 = new Long(1L);
      Long.getLong("B!Lb&fKJ", long0);
      Double double0 = new Double(1L);
      Long long1 = Long.valueOf(1L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-770);
      intArray0[1] = (-1721);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      discreteDistribution0.sample(2613);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Long long0 = new Long(1L);
      Long.getLong("B!Lb&fKJ", long0);
      Double double0 = new Double(1L);
      Long long1 = Long.valueOf(1L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-770);
      intArray0[1] = (-1721);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      discreteDistribution0.reseedRandomGenerator((-770));
      int int0 = (-746);
      Well512a well512a0 = new Well512a(2);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well512a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Long long0 = new Long(1L);
      Long.getLong("B!Lb&fKJ", long0);
      Double double0 = new Double(1L);
      Long long1 = Long.valueOf(1L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-770);
      intArray0[1] = (-1721);
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList1);
      int int0 = (-746);
      try { 
        discreteDistribution0.sample((-746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-746)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      Double double0 = new Double((byte) (-1));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 30;
      intArray0[1] = 1777;
      intArray0[2] = 1007;
      intArray0[3] = (-1185);
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.setSeed((long) 1007);
      well19937a0.setSeed((long) (-1185));
      well19937a0.nextLong();
      well19937a0.setSeed(0L);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double((-1178.59807674638));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,178.598 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("Y+Dr", long0);
      Double double0 = new Double(0.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(iSAACRandom0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 111;
      intArray0[7] = 149;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
