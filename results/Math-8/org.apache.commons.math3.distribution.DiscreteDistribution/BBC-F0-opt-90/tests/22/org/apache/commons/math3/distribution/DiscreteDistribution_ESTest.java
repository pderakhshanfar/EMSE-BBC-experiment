/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:00:37 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1041L);
      Double double0 = new Double(1041L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.addLast(pair0);
      Long long1 = new Long(3279L);
      Double double1 = new Double(1L);
      Long long2 = new Long(1L);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long2, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 499;
      discreteDistribution1.sample(499);
      System.setCurrentTimeMillis((-1371L));
      discreteDistribution0.getSamples();
      DiscreteDistribution<Long> discreteDistribution2 = new DiscreteDistribution<Long>(linkedList0);
      long long3 = 695L;
      DiscreteDistribution<Long> discreteDistribution3 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution3.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.18327074698083146);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.offerFirst(pair1);
      Double double1 = new Double(0.18327074698083146);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2055);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(282.3F);
      Double double0 = new Double(282.3F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.getSamples();
      Well44497a well44497a0 = new Well44497a((-781));
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("\"8$}SljZJ*");
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497a0, linkedList1);
      discreteDistribution1.sample();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 200;
      Integer integer0 = new Integer(200);
      Double double0 = new Double(1812433253L);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair0);
      int int1 = (-31);
      linkedList0.add(pair1);
      Integer integer1 = new Integer((-31));
      linkedList0.add(pair0);
      linkedList0.removeLastOccurrence(integer1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      discreteDistribution0.sample(1762);
      Integer integer2 = new Integer(1073741824);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution1.sample(1762);
      // Undeclared exception!
      discreteDistribution1.sample(2468);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1715.52);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList0.addLast(pair0);
      Long long0 = new Long(1L);
      Double double1 = new Double(1L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(276);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(355.4123434929);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      Integer integer0 = new Integer(8388607);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Integer integer1 = new Integer(3115);
      discreteDistribution0.probability((Integer) null);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1812433242L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(0.8496551817178755);
      Integer integer0 = new Integer(256);
      Double double1 = new Double(3130.08);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Float float0 = new Float((float) 1812433242L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.removeLastOccurrence(float0);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList1);
      discreteDistribution0.sample();
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      well19937a0.nextFloat();
      discreteDistribution0.reseedRandomGenerator(256);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(list0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("L~", double0);
      linkedList2.add(pair1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList2);
      discreteDistribution2.reseedRandomGenerator(256);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(6.283185307179586);
      Integer integer0 = new Integer(200);
      Double double1 = new Double(200);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.add(pair1);
      Integer integer1 = new Integer((-1011913566));
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(2);
      Integer integer2 = new Integer(14);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      Integer integer3 = Integer.getInteger("", (-1011913566));
      discreteDistribution1.probability(integer3);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(7910884519577875640L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1812433253L);
      Double double0 = new Double(2731.7076);
      Integer integer0 = new Integer((-151));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair0);
      Integer integer1 = new Integer(14);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(14);
      Pair<String, Double> pair2 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double1);
      linkedList1.add(pair2);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.sample();
      discreteDistribution1.reseedRandomGenerator(0L);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(well19937a0, list0);
      discreteDistribution2.sample(254);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      discreteDistribution2.sample();
      Integer integer2 = discreteDistribution0.sample();
      assertEquals((-151), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1812433242L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(1812433242L);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.offer(pair0);
      Integer integer0 = new Integer((-2577));
      Double double1 = new Double(1812433242L);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      Float float0 = new Float((float) 1812433242L);
      linkedList0.removeLastOccurrence(float0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(6.283185307179586);
      Integer integer0 = new Integer(200);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.add(pair1);
      Integer integer1 = new Integer(14);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(200);
      Integer integer2 = new Integer(2);
      discreteDistribution0.probability(integer2);
      discreteDistribution0.reseedRandomGenerator(2);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Byte.valueOf((byte)0);
      Double double0 = new Double((byte)0);
      Byte byte0 = new Byte((byte)0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(6.283185307179586);
      Integer integer0 = new Integer(200);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.add(pair1);
      Integer integer1 = new Integer(14);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Integer integer2 = new Integer(2);
      discreteDistribution0.probability(integer2);
      discreteDistribution0.reseedRandomGenerator(2);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1812433253L);
      Double double0 = new Double(2731.7076);
      Integer integer0 = new Integer((-151));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair0);
      Integer integer1 = new Integer(14);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer integer2 = new Integer(3115);
      discreteDistribution0.probability((Integer) null);
      discreteDistribution0.reseedRandomGenerator(14);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1812433253L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-2577));
      Double double0 = new Double(1812433253L);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Float float0 = new Float((float) 1812433253L);
      linkedList0.removeLastOccurrence(float0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      well19937a0.nextFloat();
      Integer integer1 = new Integer(1300);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      Integer integer2 = new Integer(1300);
      discreteDistribution0.probability(integer0);
      discreteDistribution0.reseedRandomGenerator(9193070505571053912L);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(6.283185307179586);
      Integer integer0 = new Integer(200);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.add(pair1);
      Integer integer1 = new Integer(14);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      Integer integer2 = new Integer(2);
      discreteDistribution0.probability(integer2);
      discreteDistribution0.reseedRandomGenerator(2);
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(3832);
      Double double0 = new Double((-1048.0));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.addLast(pair1);
      Integer.getInteger("0~wO]Kh:l~;WqG2");
      Double double1 = new Double((-1.0));
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>((Integer) null, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,048 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1812433253L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-2577);
      Integer integer0 = new Integer((-2577));
      Double double0 = new Double(1812433253L);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Float float0 = new Float((float) 1812433253L);
      linkedList0.removeLastOccurrence(float0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      well19937a0.nextFloat();
      discreteDistribution0.reseedRandomGenerator((-2577));
      discreteDistribution0.getSamples();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("`'!5rbkx(?a\"k91wiD", double0);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.reseedRandomGenerator(0L);
      try { 
        discreteDistribution0.sample((-2577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,577)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, (List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      synchronizedRandomGenerator0.nextDouble();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-740.392623742684));
      Pair<String, Double> pair0 = new Pair<String, Double>(" XE#SFH;XNPcwH1kG7", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -740.393 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
