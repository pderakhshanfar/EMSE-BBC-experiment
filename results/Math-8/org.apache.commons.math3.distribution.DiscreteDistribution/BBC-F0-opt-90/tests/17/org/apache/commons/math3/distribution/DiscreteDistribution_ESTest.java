/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:53:53 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 781;
      Random.setNextRandom(781);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int1 = (-820935526);
      Integer integer0 = new Integer((-820935526));
      Double double0 = new Double(781);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>("y-_n%q/", double0);
      linkedList0.add(pair1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(781);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(1.2697387466033403);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(945.2);
      Double double1 = new Double(945.2);
      Pair<String, Double> pair0 = new Pair<String, Double>("NAN_VALUE_CONVERSION", double1);
      linkedList1.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator((-1073741824L));
      discreteDistribution0.sample(3512);
      linkedList1.add(pair0);
      Double double2 = new Double((-1063.3615));
      double double3 = (-1760.707553968);
      Float float0 = new Float((-1760.707553968));
      Float float1 = new Float(4.983191803254889E-7);
      Double double4 = new Double(4.983191803254889E-7);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double4);
      linkedList1.offer(pair0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(list0);
      discreteDistribution0.reseedRandomGenerator(750);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      int int0 = 3519;
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
      // Undeclared exception!
      discreteDistribution3.sample(3512);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(448.92);
      Double double1 = new Double(448.92);
      String string0 = "org.apache.commons.math3.distribution.DiscreteDistribution";
      double double2 = 8.0;
      Double double3 = new Double(8.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double3);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double4 = new Double(690.21);
      Pair<String, Double> pair1 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double4);
      linkedList1.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, list0);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.7359361306242886);
      Double double1 = new Double(0.7359361306242886);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      linkedList1.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution1.probability((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Float float0 = new Float((-4115.56));
      Double double1 = new Double(0.9921976327896118);
      String string0 = "2=&'20Q++i Aot";
      Double double2 = new Double(0.11573404825903988);
      Pair<String, Double> pair1 = new Pair<String, Double>("2=&'20Q++i Aot", double2);
      linkedList1.add(pair1);
      Float float1 = new Float(0.0F);
      Double double3 = new Double(0.0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float1, double3);
      Double double4 = new Double(0.4794255495071411);
      Double double5 = new Double(0.0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float1, double5);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair2);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      linkedList3.add(pair2);
      linkedList3.add(pair4);
      LinkedList<Pair<String, Double>> linkedList4 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(3707L);
      Pair<String, Double> pair1 = new Pair<String, Double>("F]<DpAPCF`od", double1);
      linkedList1.offer(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution2.probability((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Double double1 = new Double(1.8272156548756153);
      Double double2 = new Double(1.8272156548756153);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double2);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3707.0);
      Double double1 = new Double(448.92);
      Pair<String, Double> pair0 = new Pair<String, Double>("UV~|Hh>QE$[SD", double1);
      Double double2 = new Double(3707.0);
      Pair<String, Double> pair1 = new Pair<String, Double>("overflow in fraction {0}/{1}, cannot negate", double2);
      linkedList1.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.getSamples();
      Double double3 = new Double((-1063.3615));
      Float float0 = new Float(2937.8);
      Double double4 = new Double(2937.8);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double2);
      Double double5 = new Double(2174.0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float0, double5);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      linkedList3.add(pair3);
      LinkedList<Pair<String, Double>> linkedList4 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList5 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      discreteDistribution0.probability("overflow in fraction {0}/{1}, cannot negate");
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3707.0);
      Double double1 = new Double(448.92);
      Pair<String, Double> pair0 = new Pair<String, Double>("UV~|Hh>QE$[SD", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>("overflow in fraction {0}/{1}, cannot negate", double1);
      linkedList1.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.getSamples();
      String[] stringArray0 = discreteDistribution0.sample(750);
      //  // Unstable assertion: assertEquals(750, stringArray0.length);
      
      Double double2 = new Double((-1063.3615));
      Float float0 = new Float(2937.8);
      Double double3 = new Double(2937.8);
      linkedList1.add(pair0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double0);
      Double double4 = new Double(2174.0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float0, double4);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      linkedList3.add(pair3);
      LinkedList<Pair<String, Double>> linkedList4 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList5 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList6 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      String string0 = discreteDistribution1.sample();
      //  // Unstable assertion: assertEquals("UV~|Hh>QE$[SD", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3707.0);
      Double double1 = new Double(448.92);
      Pair<String, Double> pair0 = new Pair<String, Double>("UV~|Hh>QE$[SD", double1);
      Double double2 = new Double(3707.0);
      Pair<String, Double> pair1 = new Pair<String, Double>("overflow in fraction {0}/{1}, cannot negate", double2);
      linkedList1.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      Double double3 = new Double((-1063.3615));
      Float float0 = new Float(2937.8);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double2);
      Double double4 = new Double(2174.0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float0, double4);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList4 = new LinkedList<Pair<Float, Double>>();
      linkedList2.add(pair3);
      LinkedList<Pair<String, Double>> linkedList5 = new LinkedList<Pair<String, Double>>();
      int[] intArray0 = new int[1];
      intArray0[0] = 2002;
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well512a0, list0);
      discreteDistribution1.sample();
      LinkedList<Pair<Double, Double>> linkedList6 = new LinkedList<Pair<Double, Double>>();
      System.setCurrentTimeMillis((-508L));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3707.0);
      Double double1 = new Double(448.92);
      Pair<String, Double> pair0 = new Pair<String, Double>("UV~|Hh>QE$[SD", double1);
      Double double2 = new Double(3707.0);
      Pair<String, Double> pair1 = new Pair<String, Double>("overflow in fraction {0}/{1}, cannot negate", double2);
      linkedList1.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
      
      String[] stringArray0 = discreteDistribution0.sample(750);
      assertEquals(750, stringArray0.length);
      
      Double double3 = new Double((-1063.3615));
      Float float0 = new Float(2937.8);
      Double double4 = new Double(2937.8);
      linkedList1.add(pair0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double2);
      Double double5 = new Double(2174.0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float0, double5);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      linkedList3.add(pair3);
      LinkedList<Pair<String, Double>> linkedList4 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList5 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.sample();
      double double6 = discreteDistribution0.probability("UV~|Hh>QE$[SD");
      assertEquals(0.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-123));
      Double double0 = new Double((byte) (-123));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -123 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 5;
      discreteDistribution0.sample(5);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      long long0 = 3707L;
      Long long1 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2358L));
      int int0 = (-36);
      try { 
        discreteDistribution0.sample((-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-36)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3707.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("overflow in fraction {0}/{1}, cannot negate", double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      Double double1 = new Double(0);
      Float float0 = new Float((-1218.281689411));
      Double double2 = new Double(0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double2);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair1);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList3 = new LinkedList<Pair<Double, Double>>();
      assertEquals(0, linkedList3.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 5;
      discreteDistribution0.sample(5);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3707.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("overflow in fraction {0}/{1}, cannot negate", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.getSamples();
      Double double1 = new Double(0);
      Float float0 = new Float((-1218.281689411));
      Double double2 = new Double(0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double2);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair2);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4294967291L);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-395L));
      iSAACRandom0.setSeed((-1790));
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(iSAACRandom0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 28L;
      System.setCurrentTimeMillis(28L);
      System.setCurrentTimeMillis((-1828L));
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2146904499;
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long1 = new Long(2146904499);
      Double double0 = new Double((-874.091118307846));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double((-2500.0));
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long1, double1);
      Pair<Long, Double> pair3 = new Pair<Long, Double>(pair2);
      linkedList0.offerFirst(pair3);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well512a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,500 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      jDKRandomGenerator0.nextInt();
      LinkedList<Pair<Pair<Integer, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Double>, Double>>();
      Pair<Integer, Double> pair0 = (Pair<Integer, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Double double0 = new Double(0);
      Pair<Pair<Integer, Double>, Double> pair2 = new Pair<Pair<Integer, Double>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Double>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Double>>(jDKRandomGenerator0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3707L);
      Double double0 = new Double(3707L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 0;
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2427;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-2438);
      intArray0[4] = (-3658);
      intArray0[5] = 0;
      intArray0[6] = 49;
      intArray0[7] = 0;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Pair<Object, Float>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Float>, Double>>();
      DiscreteDistribution<Pair<Object, Float>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Object, Float>>(well19937a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
