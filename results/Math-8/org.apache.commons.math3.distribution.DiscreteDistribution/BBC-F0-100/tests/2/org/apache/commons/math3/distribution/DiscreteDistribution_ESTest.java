/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 02:03:31 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1384;
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1384);
      well19937c0.nextBoolean();
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>("", double0);
      linkedList0.add(pair1);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Short short0 = new Short((short)1626);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(short0, double0);
      linkedList1.offerFirst(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double((-1.0));
      Double double2 = new Double(994.3650341963886);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double1, double0);
      linkedList2.add(pair3);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>(jDKRandomGenerator0, linkedList2);
      discreteDistribution2.reseedRandomGenerator(1384);
      discreteDistribution2.sample((int) (short)1626);
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(jDKRandomGenerator0, list0);
      assertEquals(2, list0.size());
      
      String[] stringArray0 = discreteDistribution3.sample(1384);
      assertEquals(1384, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1038);
      Double double0 = new Double((short)1038);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.offerFirst(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double((-3849.618708));
      Double double2 = new Double((-3849.618708));
      Double double3 = new Double((-1.3331969720555312E-35));
      Double double4 = new Double(3.220665454652531E-8);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double3, double4);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList2.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList2);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double0);
      well1024a0.clear();
      linkedList0.add(pair0);
      Double double1 = new Double((-4492.92997));
      Pair<Short, Double> pair1 = new Pair<Short, Double>((Short) null, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      discreteDistribution0.sample();
      double double2 = discreteDistribution0.probability((Short) null);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.768819808959961);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      well1024a0.clear();
      linkedList0.add(pair0);
      well1024a0.clear();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(5458);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB6bX", double0);
      well1024a0.clear();
      linkedList0.add(pair0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2250;
      Well1024a well1024a1 = new Well1024a(intArray0);
      well1024a0.clear();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample(2250);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution1.sample(2250);
      discreteDistribution0.probability("w:iB6bX");
      // Undeclared exception!
      discreteDistribution0.sample(2250);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = "w:iB;bX";
      Double double0 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double0);
      well1024a0.clear();
      int[] intArray0 = new int[1];
      Well1024a well1024a1 = new Well1024a(intArray0);
      well1024a0.clear();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      try { 
        discreteDistribution1.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1L);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair0);
      Well1024a well1024a1 = new Well1024a();
      int[] intArray0 = new int[6];
      intArray0[0] = 592;
      intArray0[1] = (-2183);
      intArray0[2] = (-1224);
      intArray0[3] = 1119;
      intArray0[4] = 272;
      intArray0[5] = 2250;
      Well1024a well1024a2 = new Well1024a(intArray0);
      well1024a2.clear();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution1.sample(272);
      discreteDistribution1.probability((String) null);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution0.probability("");
      System.setCurrentTimeMillis(592);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 1L;
      Well1024a well1024a0 = new Well1024a(1L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = "w:iB;bX";
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      Double double0 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      well1024a0.clear();
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample((-2013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,013)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2262.97732);
      Double double1 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      well1024a0.clear();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(1L);
      double double2 = discreteDistribution0.probability("");
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(657.465);
      Pair<String, Double> pair0 = new Pair<String, Double>(".iB&]1", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Well1024a well1024a0 = new Well1024a((-2341L));
      well1024a0.clear();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      well1024a0.clear();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      linkedList0.add(pair0);
      Well44497a well44497a0 = new Well44497a(1415);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497a0, linkedList0);
      discreteDistribution1.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1L);
      Well1024a well1024a1 = new Well1024a(0L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = "w:iB;bX";
      Double double0 = new Double(1L);
      Double double1 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      well1024a1.clear();
      Pair<String, Double> pair2 = new Pair<String, Double>("EXP_FRAC_TABLE_A", double1);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(657.465);
      Pair<String, Double> pair0 = new Pair<String, Double>(".iB&]1", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Well1024a well1024a0 = new Well1024a((-2341L));
      well1024a0.clear();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      well1024a0.clear();
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2341L));
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      List<Pair<String, Double>> list0 = new LinkedList<Pair<String, Double>>();
      discreteDistribution2.probability((String) null);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Object>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 1L;
      Well1024a well1024a0 = new Well1024a(1L);
      Double double0 = new Double((-5791.235559695788));
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      well1024a0.clear();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,791.236 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(657.465);
      Pair<String, Double> pair0 = new Pair<String, Double>(".iB&]1", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Well1024a well1024a0 = new Well1024a((-2341L));
      well1024a0.clear();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>(pair0);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-2133L));
      discreteDistribution0.getSamples();
      discreteDistribution0.probability("Rl9");
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well1024a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2262.97732);
      Pair<String, Double> pair0 = new Pair<String, Double>("w:iB;bX", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      well1024a0.clear();
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(1L);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability("w:iB;bX");
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well1024a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-62);
      Byte byte1 = new Byte((byte) (-62));
      Double double0 = new Double((byte) (-62));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -62 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)1022);
      Double double0 = new Double((short)1022);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Short short1 = discreteDistribution0.sample();
      assertEquals((short)1022, (short)short1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("L&CPyQT", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1406.8);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      int[] intArray0 = new int[4];
      int int0 = (-2675);
      intArray0[0] = (-2675);
      intArray0[1] = 1116;
      intArray0[2] = 4682;
      intArray0[3] = 1652;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(iSAACRandom0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1470));
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3652.72321);
      Pair<String, Double> pair0 = new Pair<String, Double>("ZKk$l2.}", double0);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("ZKk$l2.}", (Double) null);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2197));
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.stream();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
