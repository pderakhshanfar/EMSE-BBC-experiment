/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:23:16 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Float float0 = new Float(Float.NaN);
      Double double0 = new Double(Float.NaN);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair0);
      linkedList1.iterator();
      Float float1 = new Float((-1124.208509972427));
      Double double1 = new Double(0.0);
      Float float2 = new Float((float) 3455L);
      Double double2 = new Double((-1124.208509972427));
      Float float3 = new Float((-1124.208509972427));
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float3, double1);
      Double double3 = new Double(1.0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>((Float) null, double3);
      Double double4 = new Double(3455L);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(float0, double4);
      linkedList1.add(pair3);
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      int int0 = 3173;
      // Undeclared exception!
      discreteDistribution0.sample(3173);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1L);
      Double double0 = new Double(0.8539124358567505);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.getSamples();
      Long long1 = new Long(1L);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)9);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double0);
      linkedList1.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3464L);
      Double double0 = new Double(3464L);
      Float float0 = new Float(Float.NaN);
      Double double1 = new Double(Float.NaN);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      Float float1 = new Float(Float.NaN);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float1, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair0);
      Double double2 = new Double(Float.NaN);
      Float float2 = new Float((double) Float.NaN);
      Double double3 = new Double(Float.NaN);
      Double double4 = new Double(3.405124925700107E-8);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double4);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair0);
      linkedList1.add(pair2);
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      discreteDistribution0.sample(3173);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3441L);
      Double double0 = new Double(3441L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      Long.getLong("QAbaFEj");
      double double1 = discreteDistribution0.probability((Long) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Well19937a well19937a0 = new Well19937a(0L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(807.864567);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-995586027));
      well1024a0.nextBoolean();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0381848020926893E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      well1024a0.nextBoolean();
      linkedList0.parallelStream();
      Double double1 = new Double((-1.0));
      Double double2 = new Double(463.3872848);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double2);
      linkedList0.add(pair0);
      linkedList0.add(pair1);
      Well1024a well1024a1 = new Well1024a((-2003));
      well1024a1.nextBoolean();
      linkedList0.parallelStream();
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1636));
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      well1024a0.nextFloat();
      Byte byte0 = new Byte((byte)113);
      discreteDistribution0.probability(pair0);
      discreteDistribution0.reseedRandomGenerator((-2003));
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double((-4.6490379071586397E-10));
      Double double1 = new Double(1372.8040847071686);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList1);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-995586027));
      well1024a0.nextBoolean();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0381848020926893E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      well1024a0.nextBoolean();
      linkedList0.parallelStream();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
      byte byte0 = (byte)113;
      well1024a0.nextFloat();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(3273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3441L);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(2512.648);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(integer0, double0);
      linkedList1.add(pair0);
      Well1024a well1024a0 = new Well1024a();
      well1024a0.nextBoolean();
      linkedList1.parallelStream();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList1);
      well1024a0.nextFloat();
      Byte byte0 = new Byte((byte)113);
      discreteDistribution0.probability((Object) null);
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1371.107);
      Double double0 = new Double(3402.821280850974);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 3871;
      int int1 = 1846;
      discreteDistribution0.sample(1846);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1371.107);
      Double double0 = new Double(3402.821280850974);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 2015;
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(2015);
      System.setCurrentTimeMillis((-2003));
      try { 
        discreteDistribution0.sample((-2003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,003)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-995586027);
      Well1024a well1024a0 = new Well1024a((-995586027));
      well1024a0.nextBoolean();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.0381848020926893E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      well1024a0.nextBoolean();
      linkedList0.parallelStream();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
      well1024a0.nextFloat();
      Byte byte0 = new Byte((byte)113);
      discreteDistribution0.probability(byte0);
      discreteDistribution0.reseedRandomGenerator(3824L);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1371.107);
      Double double0 = new Double(3402.821280850974);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 135;
      discreteDistribution0.sample(135);
      int int1 = (-2003);
      int int2 = 1127;
      discreteDistribution0.sample(1127);
      discreteDistribution0.reseedRandomGenerator(0L);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3441L);
      Double double0 = new Double(0.6100198679923552);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      Long long1 = discreteDistribution0.sample();
      assertEquals(3441L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1371.107);
      Double double0 = new Double(3402.821280850974);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 135;
      discreteDistribution0.sample(135);
      int int1 = (-2003);
      System.setCurrentTimeMillis((-2003));
      try { 
        discreteDistribution0.sample((-2003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,003)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      Well19937a well19937a0 = new Well19937a(0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-8));
      Double double0 = new Double((byte) (-8));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -8 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1371.107);
      Double double0 = new Double(3402.821280850974);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 135;
      discreteDistribution0.sample(135);
      int int1 = (-2003);
      try { 
        discreteDistribution0.sample((-2003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,003)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-93.432367));
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -93.432 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      linkedList0.add((Pair<Short, Double>) null);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 1680L;
      MersenneTwister mersenneTwister0 = new MersenneTwister(1680L);
      mersenneTwister0.nextFloat();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, (List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1079);
      intArray0[1] = 8;
      intArray0[2] = (-2081);
      intArray0[3] = (-1);
      intArray0[4] = 4855;
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      Well1024a well1024a0 = new Well1024a(0);
      well1024a0.nextInt();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0);
      Pair<String, Double> pair0 = new Pair<String, Double>("LCM*S&]n;r", double0);
      linkedList0.add(pair0);
      well1024a0.nextBoolean();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
