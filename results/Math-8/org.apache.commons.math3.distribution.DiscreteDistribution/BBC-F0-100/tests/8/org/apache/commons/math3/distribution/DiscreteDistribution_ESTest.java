/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:25:57 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(2760.889502374487);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float(0.0);
      Double double1 = new Double(0.5685512369966348);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(float0, double1);
      linkedList0.add(pair1);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 329185421;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(int0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Float
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(2791.64554);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.add(pair0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 329185421;
      // Undeclared exception!
      discreteDistribution0.sample(int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.3957740466013935);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.probability((Object) null);
      Object object0 = new Object();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2791.64554);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 1158;
      Integer integer0 = Integer.getInteger("org.apache.commons.math3.distribution.DiscreteDistribution", 1158);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double0);
      linkedList1.add(pair2);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2791.64554);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Integer integer0 = null;
      Double double0 = new Double(3.3894811576571423E179);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair2);
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      long long0 = 1L;
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2791.64554);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.probability((Object) null);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 4;
      Well44497a well44497a0 = new Well44497a(4);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Double double0 = new Double(1686.85854458797);
      Pair<String, Double> pair0 = new Pair<String, Double>("{0} is smaller than, or equal to, the minimum ({1})", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      try { 
        discreteDistribution1.sample((-1071505478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,071,505,478)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(296);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte)49);
      double double0 = 880.5014338178814;
      Double double1 = new Double(880.5014338178814);
      Double double2 = new Double(0.5032794714561295);
      Pair<String, Double> pair0 = new Pair<String, Double>("standard deviation ({0})", double2);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample((int) (byte)49);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      double double0 = 2791.64554;
      Double double1 = new Double(2791.64554);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double1);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.getSamples();
      int int0 = 292;
      try { 
        discreteDistribution0.sample((-2394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,394)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2791.64554);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample(292);
      Well44497b well44497b0 = new Well44497b(34);
      well44497b0.nextDouble();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.getInteger(">hZ*];.", 34);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList2.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList2);
      Object[] objectArray0 = discreteDistribution0.sample(1560);
      assertEquals(1560, objectArray0.length);
      
      discreteDistribution1.sample();
      discreteDistribution1.sample();
      discreteDistribution0.reseedRandomGenerator(3191L);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      discreteDistribution2.sample();
      Integer integer1 = discreteDistribution1.sample();
      discreteDistribution0.reseedRandomGenerator(2799L);
      double double1 = discreteDistribution1.probability(integer1);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Well44497a well44497a0 = new Well44497a(0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Double double0 = new Double(1686.85854458797);
      Double double1 = new Double(1686.85854458797);
      Pair<String, Double> pair0 = new Pair<String, Double>("{0} is smaller than, or equal to, the minimum ({1})", double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      try { 
        discreteDistribution1.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2791.64554);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample(292);
      Well44497b well44497b0 = new Well44497b(34);
      well44497b0.nextDouble();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.getInteger(">hZ*];.", 34);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList2.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList2);
      discreteDistribution1.sample();
      discreteDistribution1.sample();
      discreteDistribution0.reseedRandomGenerator(3191L);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(list0);
      discreteDistribution2.sample();
      discreteDistribution1.sample();
      discreteDistribution0.reseedRandomGenerator(2799L);
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution2));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      Well44497a well44497a0 = new Well44497a(0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Double double0 = new Double(1686.85854458797);
      Double double1 = new Double(1686.85854458797);
      Pair<String, Double> pair0 = new Pair<String, Double>("{0} is smaller than, or equal to, the minimum ({1})", double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair2);
      linkedList0.containsAll(linkedList1);
      linkedList0.remove(0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-3612L));
      discreteDistribution0.probability(double1);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well44497a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double((-1840.371165));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well512a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,840.371 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 296;
      MersenneTwister mersenneTwister0 = new MersenneTwister(296);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte)49);
      Double double0 = new Double(880.5014338178814);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample(296);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 1890L;
      Well44497a well44497a0 = new Well44497a(1890L);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(1890L);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(1890L);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well44497a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      short short0 = (short)2617;
      Short short1 = new Short((short)2617);
      Float float0 = new Float(1070.5F);
      Pair<Object, Float> pair0 = new Pair<Object, Float>(short1, float0);
      Double double0 = new Double(1070.5F);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.push(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.getSamples();
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double((byte)0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      List<Pair<Object, Double>> list0 = null;
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-30));
      Double double0 = new Double((byte) (-30));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -30 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-2979);
      Well44497a well44497a0 = new Well44497a((-2979));
      LinkedList<Pair<Pair<Integer, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Double>, Double>>();
      DiscreteDistribution<Pair<Integer, Double>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Double>>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
