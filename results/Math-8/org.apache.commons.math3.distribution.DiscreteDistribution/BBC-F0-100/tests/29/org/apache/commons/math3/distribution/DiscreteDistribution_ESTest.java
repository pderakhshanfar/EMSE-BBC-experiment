/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 02:07:10 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(689);
      Double double0 = new Double(689);
      Pair<Byte, String> pair0 = new Pair<Byte, String>((Byte) null, "DEGREES_OF_FREEDOM");
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      Pair<Pair<Byte, String>, Double> pair1 = new Pair<Pair<Byte, String>, Double>(pair0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>(well1024a0, linkedList0);
      try { 
        discreteDistribution0.sample((-2002));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,002)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      Pair<Byte, String> pair0 = (Pair<Byte, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Byte, String> pair1 = new Pair<Byte, String>(pair0);
      Double double0 = new Double(0.0);
      Pair<Pair<Byte, String>, Double> pair2 = new Pair<Pair<Byte, String>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1787.77F);
      Double double0 = new Double(0.3443359724656283);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(1.0F);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double1);
      linkedList0.add(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(4210);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(689);
      Double double0 = new Double(689);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well1024a0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      Pair<Byte, String> pair0 = (Pair<Byte, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Byte, String> pair1 = new Pair<Byte, String>(pair0);
      Double double0 = new Double(1078.384151623569);
      Pair<Pair<Byte, String>, Double> pair2 = new Pair<Pair<Byte, String>, Double>(pair1, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1));
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-1.0));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(689);
      Double double0 = new Double(689);
      Pair<Byte, String> pair0 = new Pair<Byte, String>((Byte) null, "DEGREES_OF_FREEDOM");
      Pair<Pair<Byte, String>, Double> pair1 = new Pair<Pair<Byte, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>(well1024a0, linkedList0);
      Pair<Byte, String> pair2 = discreteDistribution0.sample();
      assertSame(pair2, pair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.03942068372296026);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      String string0 = discreteDistribution0.sample();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(4937.0);
      Double double0 = new Double(4937.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1787.77F);
      Double double0 = new Double(0.3443359724656283);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
      Float[] floatArray0 = discreteDistribution0.sample(4210);
      assertEquals(4210, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.03942068372296026);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(4937.0);
      Double double0 = new Double(1618.248893335);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
      Float float1 = new Float((double) 4294967295L);
      double double1 = discreteDistribution0.probability(float1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(5.771457643937893E237);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well512a0, linkedList0);
      double double1 = discreteDistribution0.probability((Float) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(689);
      Float float0 = new Float((float) 689);
      Double double0 = Double.valueOf(689.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well1024a0, linkedList0);
      double double1 = discreteDistribution0.probability(float0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(689);
      Double double0 = new Double(689);
      Float float0 = new Float((double) 689);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well1024a0, linkedList0);
      double double1 = discreteDistribution0.probability((Float) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double((-2863.942386));
      Byte byte0 = new Byte((byte)56);
      Pair<Byte, String> pair0 = new Pair<Byte, String>(byte0, "`#WfM'Fw}](WTv]@3X");
      Pair<Pair<Byte, String>, Double> pair1 = new Pair<Pair<Byte, String>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Byte, String>, Double>> linkedList0 = new LinkedList<Pair<Pair<Byte, String>, Double>>();
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<Byte, String>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Byte, String>>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,863.942 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(689);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(689);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well1024a0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
  }
}
