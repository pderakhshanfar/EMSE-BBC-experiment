/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:28:08 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      Double double0 = new Double(9223372036854775807L);
      Short short0 = new Short((short)3351);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Short short1 = new Short((short)3351);
      Double double1 = new Double(9223372036854775807L);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double1);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      linkedList0.add(pair0);
      Double double2 = new Double(0.26093213315345354);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair2);
      linkedList0.addFirst(pair1);
      Short short2 = new Short((short)3351);
      Pair<Short, Double> pair3 = new Pair<Short, Double>(short2, double0);
      linkedList0.add(pair1);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.sample((int) (short)3351);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Well19937c well19937c0 = new Well19937c();
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      LinkedList<Pair<Short, Double>> linkedList3 = new LinkedList<Pair<Short, Double>>();
      linkedList3.addAll((Collection<? extends Pair<Short, Double>>) list0);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList3);
      discreteDistribution1.sample((int) byte0);
      int int0 = 0;
      Random.setNextRandom(int0);
      LinkedList<Pair<Float, Double>> linkedList4 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(well19937c0, linkedList4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(9223372036854775807L);
      Double double1 = new Double(9223372036854775807L);
      short short0 = (short)3605;
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.clear();
      Short short1 = new Short((short)3605);
      Double double2 = new Double(9223372036854775807L);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double2);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short1, double1);
      linkedList1.add(pair1);
      Double double3 = new Double(0.14851480796054117);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(short1, double3);
      Pair<Short, Double> pair3 = new Pair<Short, Double>(pair0);
      Double double4 = new Double(9223372036854775807L);
      Pair<Short, Double> pair4 = new Pair<Short, Double>(short1, double4);
      linkedList1.add(pair4);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample((int) (short)3605);
      // Undeclared exception!
      discreteDistribution0.sample((int) (short)3605);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(9223372036854775807L);
      Double double1 = new Double(9223372036854775807L);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.clear();
      Short short0 = new Short((short)3605);
      Double double2 = new Double(9223372036854775807L);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double2);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(short0, double1);
      linkedList1.add(pair1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("", double0);
      linkedList3.add(pair2);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList3.add(pair3);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList3);
      String string0 = discreteDistribution0.sample();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(4390.70731382);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability((Double) null);
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.7111492580143326);
      Double double1 = new Double(0.4359864373662572);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)11);
      Double double0 = new Double((byte)11);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = new Byte((byte)1);
      double double1 = discreteDistribution0.probability((Byte) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-53));
      Double double0 = new Double(0.2020949133005352);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      Byte byte1 = new Byte((byte)1);
      double double1 = discreteDistribution0.probability(byte0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)11);
      Double double0 = new Double((byte)11);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      Byte byte1 = new Byte((byte) (-56));
      double double1 = discreteDistribution0.probability(byte1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(9223372036854775807L);
      Double double1 = new Double(9223372036854775807L);
      Double double2 = new Double(1.2469532489776611);
      Double double3 = new Double(1.2469532489776611);
      Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double3);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair0);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      linkedList2.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      List<Pair<Short, Double>> list0 = discreteDistribution0.getSamples();
      linkedList1.add(pair0);
      Well44497b well44497b0 = new Well44497b((-4179222));
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(list0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)3);
      Double double0 = new Double((-1322.387));
      Double double1 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample((-3230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,230)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)3);
      Double double0 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = discreteDistribution0.sample();
      assertEquals((byte)3, (byte)byte1);
      
      discreteDistribution0.sample((int) (byte)3);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      Well19937c well19937c0 = new Well19937c((int) (byte)3);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(well19937c0, linkedList0);
      discreteDistribution2.sample();
      int int0 = 1450;
      Well512a well512a0 = new Well512a(965);
      LinkedList<Pair<Pair<String, Byte>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, Byte>, Double>>();
      well512a0.nextBoolean();
      DiscreteDistribution<Pair<String, Byte>> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Pair<String, Byte>>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Byte byte0 = new Byte((byte)3);
      Double double0 = new Double(796.7833);
      Double double1 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double1);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      Byte byte1 = discreteDistribution0.sample();
      assertNull(byte1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      Double double0 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample((int) (byte)3);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution1.sample();
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3604L));
      discreteDistribution1.getSamples();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Short>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)3);
      Double double0 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(796.7833);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(2283L);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = discreteDistribution1.sample();
      assertEquals((byte)3, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)3);
      Double double0 = new Double(796.7833);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(1L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      byte byte0 = (byte)26;
      Byte byte1 = new Byte((byte)26);
      Double double0 = new Double((-827.884378));
      Double double1 = new Double((-827.884378));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double1);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -827.884 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((List<Pair<Long, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("C!", double0);
      linkedList0.add(pair0);
      Double double1 = new Double((-728.8));
      Pair<String, Double> pair1 = new Pair<String, Double>("IBJ1Q<?~M,HAx:3h9", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      linkedList0.clone();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -728.8 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)2289;
      Short short1 = new Short((short)2289);
      Double double0 = new Double((short)2289);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.getSamples();
      Well44497b well44497b0 = new Well44497b((int) (short)2289);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.pollFirst();
      well44497b0.nextBoolean();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
