/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:31:23 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(0.18975848090518732);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability((String) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2.6192569732666016);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      linkedList0.removeLastOccurrence("DIGEST_NOT_INITIALIZED");
      long long0 = (-312L);
      Well19937c well19937c0 = new Well19937c((-312L));
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
      discreteDistribution0.sample();
      int int0 = (-760925016);
      try { 
        discreteDistribution0.sample((-760925016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-760,925,016)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1.7295331954956055);
      Double double1 = new Double(1.7295331954956055);
      Pair<String, Double> pair0 = new Pair<String, Double>("OUT_OF_BOUND_SIGNIFICANCE_LEVEL", double1);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      linkedList1.removeLastOccurrence("OUT_OF_BOUND_SIGNIFICANCE_LEVEL");
      long long0 = (-312L);
      Well19937c well19937c0 = new Well19937c((-2297L));
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList1);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.sample(4527);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution4 = new DiscreteDistribution<String>(linkedList1);
      // Undeclared exception!
      discreteDistribution2.sample(4527);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.2681078395459533);
      Pair<String, Double> pair0 = new Pair<String, Double>("-/+>}9&uhN;ejm&_\"F$", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      Integer integer0 = new Integer(2);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      discreteDistribution0.sample();
      double double1 = discreteDistribution0.probability("-/+>}9&uhN;ejm&_\"F$");
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(95.817);
      Pair<String, Double> pair0 = new Pair<String, Double>("g}Vh]72?$SakK", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      String[] stringArray0 = discreteDistribution0.sample(817);
      assertEquals(817, stringArray0.length);
      
      Integer integer0 = new Integer((-36421731));
      Double double1 = new Double((-1410.6846234));
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer0, double1);
      discreteDistribution0.sample();
      double double2 = discreteDistribution0.probability((String) null);
      assertEquals(0.0, double2, 0.01);
      
      Well44497b well44497b0 = new Well44497b(817);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(0.2681078395459533);
      Pair<String, Double> pair0 = new Pair<String, Double>("-/+>}9&uhN;ejm&_\"F$", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample(817);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      discreteDistribution0.sample();
      discreteDistribution0.probability("Y@N9&/FNV{oz!A8f");
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(3.814697265625E-6);
      Pair<String, Double> pair0 = new Pair<String, Double>("{|!Zg<CH-dXZA", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      Double double1 = new Double((-1718.579));
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      discreteDistribution0.sample();
      List<Pair<Float, Double>> list0 = null;
      Well44497b well44497b0 = new Well44497b(1);
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(well44497b0, (List<Pair<Float, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(34.62541178757409);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      Well19937c well19937c0 = new Well19937c(0L);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(799);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(37.121052612560995);
      Pair<String, Double> pair0 = new Pair<String, Double>("DIGEST_NOT_INITIALIZED", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(34.62541178757409);
      Pair<String, Double> pair0 = new Pair<String, Double>("DIGEST_NOT_INITIALIZED", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      int int0 = 799;
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(3.814697265625E-6);
      Pair<String, Double> pair0 = new Pair<String, Double>("{|!Zg<CH-dXZA", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(817);
      Double double1 = new Double(817);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>((Integer) null, double0);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList3 = new LinkedList<Pair<Byte, Double>>();
      System.setCurrentTimeMillis(817);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(3.814697265625E-6);
      Pair<String, Double> pair0 = new Pair<String, Double>("{|!Zg<CH-dXZA", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.sample(817);
      Double double1 = new Double(817);
      Integer integer0 = new Integer(817);
      Double double2 = new Double(1.8307188599677033E-8);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double2);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      linkedList3.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList3);
      System.setCurrentTimeMillis(2935890503282001226L);
      Random.setNextRandom(817);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(3.814697265625E-6);
      Pair<String, Double> pair0 = new Pair<String, Double>("{|!Zg<CH-dXZA", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(817);
      Double double1 = new Double(817);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>((Integer) null, double0);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      linkedList3.add(pair2);
      Well44497b well44497b0 = new Well44497b();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList3);
      discreteDistribution1.reseedRandomGenerator(787L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1));
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-1));
      Double double0 = new Double((-1));
      well44497a0.nextFloat();
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well44497a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(3.814697265625E-6);
      Pair<String, Double> pair0 = new Pair<String, Double>("{|!Zg<CH-dXZA", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(817);
      Double double1 = new Double(817);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>((Integer) null, double0);
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      linkedList3.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(34.62541178757409);
      Pair<String, Double> pair0 = new Pair<String, Double>("DIGEST_NOT_INITIALIZED", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      int int0 = (-1);
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(12);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(12);
      Double double0 = new Double(12);
      float float0 = new Integer(12);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497a0, linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1));
      Double double0 = new Double(3155.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1870L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.clone();
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, (Double) null);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well19937c0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.addFirst(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(283L);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1));
      Double double0 = new Double((-1));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((int[]) null);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
