/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:48:54 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      Float float0 = new Float(1.0F);
      Long long0 = new Long((-763L));
      Pair<Float, Long> pair0 = (Pair<Float, Long>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(pair0).getKey();
      doReturn(long0).when(pair0).getValue();
      Pair<Float, Long> pair1 = new Pair<Float, Long>(pair0);
      Double double0 = new Double(0.44088986624441073);
      Pair<Pair<Float, Long>, Double> pair2 = new Pair<Pair<Float, Long>, Double>(pair0, double0);
      linkedList1.offerLast(pair2);
      Double double1 = new Double(0.8602437790383914);
      Pair<Pair<Float, Long>, Double> pair3 = new Pair<Pair<Float, Long>, Double>(pair1, double1);
      linkedList1.addLast(pair3);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(49);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.21780096);
      Double double1 = new Double(4.6424556110307644E-91);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      MersenneTwister mersenneTwister0 = new MersenneTwister(118);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList1);
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList2 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(631);
      Double double0 = new Double(0.21780096006340088);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList1.offer(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList2 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.21780096006340088);
      Pair<String, Double> pair0 = new Pair<String, Double>("5rss/r)BAgZ9", double0);
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(4581);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      linkedList0.offerLast(pair1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(337.4);
      Double double1 = new Double(0);
      Float float0 = new Float(337.4);
      Long long0 = new Long((-1446L));
      Float float1 = new Float((float) 0L);
      Pair<Float, Long> pair0 = new Pair<Float, Long>(float1, long0);
      Pair<Float, Long> pair1 = new Pair<Float, Long>(pair0);
      Pair<Pair<Float, Long>, Double> pair2 = new Pair<Pair<Float, Long>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      linkedList0.offerLast(pair2);
      Pair<Pair<Float, Long>, Double> pair3 = new Pair<Pair<Float, Long>, Double>(pair2);
      linkedList0.addLast(pair3);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList0);
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution1 = new DiscreteDistribution<Pair<Float, Long>>(well44497a0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution2 = new DiscreteDistribution<Pair<Float, Long>>(well44497a0, linkedList0);
      discreteDistribution2.getSamples();
      int int0 = 4562;
      discreteDistribution0.sample(4562);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.clear();
      // Undeclared exception!
      discreteDistribution2.sample(4562);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Float float0 = new Float((float) 0);
      Long long0 = new Long(0);
      Pair<Float, Long> pair0 = new Pair<Float, Long>(float0, long0);
      Double double0 = new Double(1.0);
      Pair<Pair<Float, Long>, Double> pair1 = new Pair<Pair<Float, Long>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      linkedList0.offerLast(pair1);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList0);
      Well44497a well44497a0 = new Well44497a(0L);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution1 = new DiscreteDistribution<Pair<Float, Long>>(well19937a0, linkedList0);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution2 = new DiscreteDistribution<Pair<Float, Long>>(well44497a0, linkedList0);
      Pair<Float, Long> pair2 = new Pair<Float, Long>(float0, long0);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution3 = new DiscreteDistribution<Pair<Float, Long>>(well19937a0, linkedList0);
      discreteDistribution3.getSamples();
      try { 
        discreteDistribution2.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      double double0 = 337.4;
      Double double1 = new Double(337.4);
      Double double2 = new Double(337.4);
      Pair<Pair<Float, Long>, Double> pair0 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double2);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      int int0 = (-1177);
      Integer integer0 = new Integer((-1177));
      Double double3 = new Double((-1177));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double3);
      linkedList1.offer(pair1);
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,177 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      Pair<Float, Long> pair0 = (Pair<Float, Long>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Float, Long> pair1 = new Pair<Float, Long>(pair0);
      Double double0 = new Double(0.44088986624441073);
      Pair<Pair<Float, Long>, Double> pair2 = new Pair<Pair<Float, Long>, Double>(pair1, double0);
      linkedList1.offerLast(pair2);
      Double double1 = new Double(0.8602437790383914);
      Pair<Pair<Float, Long>, Double> pair3 = new Pair<Pair<Float, Long>, Double>(pair1, double1);
      linkedList1.addLast(pair3);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      discreteDistribution0.sample(49);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      Pair<Long, Double> pair4 = new Pair<Long, Double>((Long) null, double1);
      Pair<Long, Double> pair5 = new Pair<Long, Double>(pair4);
      linkedList2.add(pair5);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList2);
      try { 
        discreteDistribution1.sample((-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-122)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      int int0 = (-860);
      Integer integer0 = new Integer((-860));
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.34819380580206216);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.offerLast(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      try { 
        discreteDistribution0.sample((-860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-860)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.21780096006340088);
      Pair<String, Double> pair0 = new Pair<String, Double>("5rss/r)BAgZ9", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample(4581);
      discreteDistribution0.sample(128);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(4581);
      Double double1 = new Double(4581);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      linkedList1.offer(pair1);
      int[] intArray0 = new int[1];
      intArray0[0] = 49;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      well19937a0.setSeed(4581);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList2.addFirst(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList2);
      discreteDistribution1.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      double double0 = 0.21780096006340088;
      Double double1 = new Double(0.21780096006340088);
      Pair<String, Double> pair0 = new Pair<String, Double>("5rss/r)BAgZ9", double1);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      int int0 = 4581;
      discreteDistribution0.sample(4581);
      discreteDistribution0.sample(87);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(128);
      Double double2 = new Double(0.21780096006340088);
      Integer integer1 = new Integer(2179);
      Double double3 = new Double(1806.7594587);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer1, double3);
      linkedList1.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      linkedList1.add(pair1);
      discreteDistribution1.getSamples();
      linkedList1.addFirst(pair1);
      discreteDistribution1.getSamples();
      discreteDistribution1.probability(integer0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      Double double0 = new Double(337.4);
      Double double1 = new Double((-948.1263209512341));
      Double double2 = new Double(337.4);
      Pair<Pair<Float, Long>, Double> pair0 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double0);
      linkedList0.offerLast(pair0);
      Pair<Pair<Float, Long>, Double> pair1 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double1);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -948.126 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.21780096006340088);
      Pair<String, Double> pair0 = new Pair<String, Double>("5rss/r)BAgZ9", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample(4581);
      int int0 = 128;
      discreteDistribution0.sample(128);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(4581);
      Double double1 = new Double(4581);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      linkedList1.offer(pair1);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      linkedList1.add(pair1);
      discreteDistribution1.getSamples();
      linkedList1.addFirst(pair1);
      discreteDistribution1.getSamples();
      discreteDistribution1.probability(integer0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      Double double0 = new Double(337.4);
      Double double1 = new Double(337.4);
      Pair<Pair<Float, Long>, Double> pair0 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double1);
      linkedList0.offerLast(pair0);
      Pair<Pair<Float, Long>, Double> pair1 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      int[] intArray0 = new int[7];
      intArray0[1] = 49;
      intArray0[2] = 49;
      intArray0[3] = 49;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      well19937a0.setSeed(49);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair0);
      linkedList1.addFirst(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well19937a0, linkedList1);
      discreteDistribution1.getSamples();
      discreteDistribution1.reseedRandomGenerator(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      Double double0 = new Double(337.4);
      Double double1 = new Double(337.4);
      Pair<Pair<Float, Long>, Double> pair0 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double1);
      linkedList0.offerLast(pair0);
      Pair<Pair<Float, Long>, Double> pair1 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1L));
      int int0 = 49;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Pair<Float, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Float, Long>, Double>>();
      Double double0 = new Double(337.4);
      Double double1 = new Double(337.4);
      Pair<Pair<Float, Long>, Double> pair0 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double1);
      linkedList0.offerLast(pair0);
      Pair<Pair<Float, Long>, Double> pair1 = new Pair<Pair<Float, Long>, Double>((Pair<Float, Long>) null, double0);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Pair<Float, Long>> discreteDistribution0 = new DiscreteDistribution<Pair<Float, Long>>(linkedList0);
      discreteDistribution0.sample();
      int int0 = 49;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-1618L));
      Double double0 = new Double(0.5);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.offerFirst(pair0);
      UnaryOperator<Pair<Long, Double>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 20L;
      Well512a well512a0 = new Well512a(20L);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2097);
      int int0 = (-102);
      intArray0[2] = (-102);
      intArray0[3] = 1124;
      intArray0[4] = 4413;
      intArray0[5] = 0;
      intArray0[6] = (-1321);
      intArray0[7] = 0;
      intArray0[8] = (-1264);
      Well1024a well1024a0 = new Well1024a(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("5rss/r)BAgZ9", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
