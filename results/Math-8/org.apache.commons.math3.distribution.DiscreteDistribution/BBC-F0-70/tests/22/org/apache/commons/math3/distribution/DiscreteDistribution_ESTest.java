/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:44:27 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 1665.2;
      Double double1 = new Double(1665.2);
      assertNotNull(double1);
      assertEquals(1665.2, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Float float0 = new Float(0.3930303144761951);
      assertNotNull(float0);
      assertEquals(0.39303032F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.3930303144761951);
      assertNotNull(float1);
      assertEquals(0.39303032F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Double double2 = new Double(0.3930303144761951);
      assertNotNull(double2);
      assertEquals(0.3930303144761951, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double2);
      assertNotNull(pair0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertTrue(linkedList1.contains(pair0));
      
      Float float2 = new Float(1665.2);
      assertNotNull(float2);
      assertEquals(1665.2F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      List<Pair<Float, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertEquals(1, linkedList1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      int int0 = 2690;
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>((RandomGenerator) null, list0);
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      System.setCurrentTimeMillis(459L);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", (Double) null);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair0));
      
      Double double0 = new Double(459L);
      assertNotNull(double0);
      assertEquals(459.0, (double)double0, 0.01);
      
      Double double1 = new Double(459L);
      assertNotNull(double1);
      assertEquals(459.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<Object, Double> pair2 = new Pair<Object, Double>(linkedList0, double1);
      assertNotNull(pair2);
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      linkedList1.addFirst(pair2);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(linkedList1.contains(pair2));
      
      boolean boolean1 = linkedList1.add(pair2);
      assertEquals(1, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(pair0));
      assertTrue(linkedList1.contains(pair2));
      
      Pair<Object, Double> pair3 = new Pair<Object, Double>(double0, double0);
      assertNotNull(pair3);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      
      boolean boolean2 = linkedList1.add(pair3);
      assertEquals(3, linkedList1.size());
      assertTrue(boolean2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(pair3.equals((Object)pair2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(pair3, pair2);
      assertTrue(linkedList1.contains(pair2));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertEquals(3, linkedList1.size());
      assertTrue(linkedList1.contains(pair2));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(1094);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(1977.5552906055);
      assertNotNull(double0);
      assertEquals(1977.5552906055, (double)double0, 0.01);
      
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      
      Double double1 = new Double(Float.POSITIVE_INFINITY);
      assertNotNull(double1);
      assertEquals(Double.POSITIVE_INFINITY, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double1);
      assertNotNull(pair1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      assertNotNull(pair2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      
      boolean boolean0 = linkedList1.offer(pair2);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(pair1.equals((Object)pair2));
      assertTrue(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      assertNotSame(pair1, pair2);
      assertNotSame(pair1, pair0);
      assertNotSame(pair2, pair1);
      assertNotSame(pair2, pair0);
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.contains(pair0));
      
      Spliterator<Pair<Float, Double>> spliterator0 = linkedList1.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair1));
      assertFalse(linkedList1.contains(pair0));
      
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = Double.valueOf(0.44115579207299604);
      assertNotNull(double0);
      assertEquals(0.44115579207299604, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList1.contains(pair0));
      
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      assertNotNull(list0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      discreteDistribution1.reseedRandomGenerator(2665L);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertTrue(linkedList1.contains(pair0));
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(1, linkedList1.size());
      assertEquals(1.0, double1, 0.01);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertTrue(linkedList1.contains(pair0));
      
      List<Pair<String, Double>> list1 = discreteDistribution1.getSamples();
      assertNotNull(list1);
      assertEquals(1, linkedList1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertNotSame(list1, list0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list1.contains(pair0));
      
      Random.setNextRandom(1551391);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-2513.1047F));
      assertNotNull(float0);
      assertEquals((-2513.1047F), (float)float0, 0.01F);
      
      Double double0 = new Double(1660.5);
      assertNotNull(double0);
      assertEquals(1660.5, (double)double0, 0.01);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      Float float1 = discreteDistribution0.sample();
      assertNotNull(float1);
      assertEquals(1, linkedList0.size());
      assertEquals((-2513.1047F), (float)float1, 0.01F);
      assertTrue(linkedList0.contains(pair0));
      
      Float float2 = discreteDistribution0.sample();
      assertNotNull(float2);
      assertEquals(1, linkedList0.size());
      assertEquals((-2513.1047F), (float)float2, 0.01F);
      assertTrue(linkedList0.contains(pair0));
      
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-2513.1047F));
      assertNotNull(float0);
      assertEquals((-2513.1047F), (float)float0, 0.01F);
      
      Double double0 = new Double(80.2247963193781);
      assertNotNull(double0);
      assertEquals(80.2247963193781, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("!o3JoRoZl6h7:Zb", double0);
      assertNotNull(pair0);
      
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair0));
      
      boolean boolean1 = linkedList1.add(pair0);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      String[] stringArray0 = discreteDistribution0.sample(1196);
      assertEquals(1196, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      double double1 = discreteDistribution0.probability((String) null);
      assertEquals(2, linkedList1.size());
      assertEquals(0.0, double1, 0.01);
      assertTrue(linkedList1.contains(pair0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1104;
      intArray0[1] = 1104;
      intArray0[2] = 1104;
      intArray0[3] = (-307534363);
      intArray0[4] = 1196;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {1104, 1104, 1104, (-307534363), 1196}, intArray0);
      
      String string0 = discreteDistribution0.sample();
      assertNotNull(string0);
      assertEquals(2, linkedList1.size());
      assertEquals("!o3JoRoZl6h7:Zb", string0);
      assertTrue(linkedList1.contains(pair0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Float float0 = new Float(1.1920929E-7F);
      assertNotNull(float0);
      assertEquals(1.1920929E-7F, (float)float0, 0.01F);
      
      Double double0 = new Double(1.1920929E-7F);
      assertNotNull(double0);
      assertEquals(1.1920928955078125E-7, (double)double0, 0.01);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList1.add(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(pair0));
      
      Double double1 = new Double((-4267.74));
      assertNotNull(double1);
      assertEquals((-4267.74), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Float float1 = new Float((-857.80817F));
      assertNotNull(float1);
      assertEquals((-857.80817F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Double double2 = new Double(2015.8258615017);
      assertNotNull(double2);
      assertEquals(2015.8258615017, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(3663.6);
      assertNotNull(double3);
      assertEquals(3663.6, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double3);
      assertNotNull(pair1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      
      boolean boolean1 = linkedList1.offer(pair1);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertFalse(pair1.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList1.contains(pair0));
      
      Spliterator<Pair<Float, Double>> spliterator0 = linkedList1.spliterator();
      assertNotNull(spliterator0);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      List<Pair<Float, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertEquals(2, linkedList1.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(list0);
      assertNotNull(discreteDistribution1);
      assertEquals(2, linkedList1.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      Float float2 = discreteDistribution1.sample();
      assertNotNull(float2);
      assertEquals(2, linkedList1.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1.1920929E-7F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      Float[] floatArray0 = discreteDistribution1.sample(2690);
      assertEquals(2690, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(2, linkedList1.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertNotSame(discreteDistribution1, discreteDistribution0);
      assertTrue(linkedList1.contains(pair0));
      assertFalse(list0.contains(pair0));
      
      Well512a well512a0 = new Well512a(2690);
      assertNotNull(well512a0);
      
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(well512a0, linkedList1);
      assertNotNull(discreteDistribution2);
      assertEquals(2, linkedList1.size());
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution1));
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
      assertTrue(linkedList1.contains(pair0));
      
      // Undeclared exception!
      discreteDistribution2.sample(2690);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(1977.5552906055);
      assertNotNull(double0);
      assertEquals(1977.5552906055, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      String string0 = discreteDistribution0.sample();
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals("", string0);
      assertTrue(linkedList0.contains(pair0));
      
      double double1 = discreteDistribution0.probability("");
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 392733669;
      intArray0[1] = 796369264;
      intArray0[2] = 392733669;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {392733669, 796369264, 392733669}, intArray0);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(1977.5552906055);
      assertNotNull(double0);
      assertEquals(1977.5552906055, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution1);
      assertEquals(1, linkedList0.size());
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
      assertTrue(linkedList0.contains(pair0));
      
      double double1 = discreteDistribution0.probability("4IjnCReq@;");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double1, 0.01);
      assertFalse(discreteDistribution0.equals((Object)discreteDistribution1));
      assertNotSame(discreteDistribution0, discreteDistribution1);
      assertTrue(linkedList0.contains(pair0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 796369264;
      intArray0[1] = 796369264;
      intArray0[2] = 796369264;
      intArray0[3] = 392733669;
      intArray0[4] = 796369264;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {796369264, 796369264, 796369264, 392733669, 796369264}, intArray0);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Float> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(1977.5552906055);
      assertNotNull(double0);
      assertEquals(1977.5552906055, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      double double1 = discreteDistribution0.probability("");
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, double1, 0.01);
      assertTrue(linkedList0.contains(pair0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 392733669;
      intArray0[1] = 796369264;
      intArray0[2] = (-986063492);
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {392733669, 796369264, (-986063492)}, intArray0);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-2513.1047F));
      assertNotNull(float0);
      assertEquals((-2513.1047F), (float)float0, 0.01F);
      
      Double double0 = new Double(247.174);
      assertNotNull(double0);
      assertEquals(247.174, (double)double0, 0.01);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair0));
      
      Double double1 = new Double(1660.5);
      assertNotNull(double1);
      assertEquals(1660.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double1);
      assertNotNull(pair2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      
      boolean boolean1 = linkedList0.offer(pair2);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(pair2.equals((Object)pair0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pair2, pair1);
      assertNotSame(pair2, pair0);
      assertTrue(linkedList0.contains(pair2));
      
      Spliterator<Pair<Float, Double>> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      
      List<Pair<Float, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(pair2));
      assertFalse(list0.contains(pair2));
      
      Float float1 = discreteDistribution0.sample();
      assertNotNull(float1);
      assertEquals(2, linkedList0.size());
      assertEquals((-2513.1047F), (float)float1, 0.01F);
      assertTrue(linkedList0.contains(pair2));
      
      Float[] floatArray0 = discreteDistribution0.sample(2690);
      assertEquals(2690, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(pair2));
      
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(well44497a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((-2513.1047F));
      assertNotNull(float0);
      assertEquals((-2513.1047F), (float)float0, 0.01F);
      
      Double double0 = new Double(1660.5);
      assertNotNull(double0);
      assertEquals(1660.5, (double)double0, 0.01);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.offer(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(pair0));
      
      Spliterator<Pair<Float, Double>> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair0));
      
      Float float1 = discreteDistribution0.sample();
      assertNotNull(float1);
      assertEquals(1, linkedList0.size());
      assertEquals((-2513.1047F), (float)float1, 0.01F);
      assertTrue(linkedList0.contains(pair0));
      
      int int0 = (-1);
      try { 
        discreteDistribution0.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0.041666663879186654);
      assertNotNull(double0);
      assertEquals(0.041666663879186654, (double)double0, 0.01);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("oL", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertTrue(linkedList0.contains(pair1));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      discreteDistribution0.reseedRandomGenerator(0L);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(pair1));
      
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(805.8F);
      assertNotNull(float0);
      assertEquals(805.8F, (float)float0, 0.01F);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1913.21265);
      assertNotNull(double1);
      assertEquals(1913.21265, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double1);
      assertNotNull(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(pair0));
      
      boolean boolean0 = linkedList1.offer(pair0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(linkedList1.contains(pair0));
      
      Spliterator<Pair<Float, Double>> spliterator0 = linkedList1.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      Float float1 = discreteDistribution0.sample();
      assertNull(float1);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(pair0));
      
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2682);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      float float0 = (-2513.1047F);
      Float float1 = new Float((-2513.1047F));
      Double double0 = new Double(247.174);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(1660.5);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float1, double1);
      linkedList0.offer(pair2);
      linkedList0.spliterator();
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(2690);
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(well44497a0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-2513.1047F));
      Double double0 = new Double((-2513.1047F));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.offer(pair0);
      linkedList0.spliterator();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,513.105 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-371));
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      RandomGenerator randomGenerator0 = null;
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, (Double) null);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(randomAdaptor0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-2513.1047F));
      Double double0 = new Double(1660.5);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.offer(pair0);
      linkedList0.spliterator();
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int int0 = 2690;
      discreteDistribution0.sample();
      discreteDistribution0.sample(2690);
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = Byte.valueOf((byte)76);
      Double double0 = new Double((-1.0));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      linkedList0.push(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Pair<String, Double>> list0 = null;
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Byte>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Byte>, Double>>();
      DiscreteDistribution<Pair<Integer, Byte>> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Byte>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3029L);
      Double double0 = new Double(3029L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(jDKRandomGenerator0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
