/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:52:16 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Double double0 = new Double(1360.903069);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Long>, Double>>();
      Byte byte0 = new Byte((byte)3);
      Double double0 = new Double((byte)3);
      Long long0 = new Long((byte)3);
      Double double1 = new Double((byte)3);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair1);
      Double double2 = new Double((byte)3);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      linkedList2.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList1);
      Long.valueOf((-2304L));
      Long long1 = new Long((byte)3);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(626L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Long>, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1052.32);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList1.offer(pair0);
      Long long0 = Long.valueOf(773L);
      Double double1 = new Double(773L);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, double1);
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a(773L);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well512a0, linkedList1);
      Long long1 = new Long(773L);
      discreteDistribution0.probability((Long) null);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Pair<Object, Long>> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Object, Long>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Long>, Double>>();
      Double double0 = new Double(2948.7288015);
      Integer.getInteger("");
      Double double1 = new Double(0.9355941057720645);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double1);
      Integer integer0 = new Integer((-2850));
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      Well44497a well44497a0 = new Well44497a((long) (-2850));
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, linkedList1);
      discreteDistribution0.sample();
      Double double2 = new Double(2948.7288015);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Short, Double>> linkedList4 = new LinkedList<Pair<Short, Double>>();
      assertEquals(0, linkedList4.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(2687.9304172);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>("initial capacity ({0}) is not positive", double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair3);
      well512a0.nextLong();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(3646);
      discreteDistribution0.getSamples();
      Well44497b well44497b0 = new Well44497b((-1L));
      discreteDistribution0.sample(3646);
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      well512a0.nextLong();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      // Undeclared exception!
      discreteDistribution1.sample(3646);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      long long0 = 0L;
      Long long1 = new Long(0L);
      Long long2 = Long.getLong("", long1);
      Double double0 = Double.valueOf(1071.73898386073);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long2, double0);
      Double double1 = new Double(388.5918928);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a();
      well512a0.nextLong();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      int int0 = 3646;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(3646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(2687.9304172);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
      discreteDistribution0.sample();
      Double double1 = new Double(2687.9304172);
      Pair<String, Double> pair2 = new Pair<String, Double>("Mh|#CcH12Dd", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution1.getSamples();
      System.setCurrentTimeMillis(0L);
      String string0 = discreteDistribution1.sample();
      assertEquals("Mh|#CcH12Dd", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("", long0);
      Double double0 = Double.valueOf(1071.73898386073);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Double double1 = new Double(0.2767370707189354);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long1, double1);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList0);
      int int0 = 0;
      List<Pair<Long, Double>> list0 = linkedList0.subList(0, 0);
      long long2 = (-1580L);
      Long long3 = new Long((-688L));
      discreteDistribution0.probability((Long) null);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      linkedList2.containsAll(list0);
      LinkedList<Pair<Short, Double>> linkedList3 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("TY", long0);
      Double double0 = Double.valueOf(1071.73898386073);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(0.5);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long0, double1);
      Pair<Long, Double> pair3 = new Pair<Long, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList0);
      int int0 = 0;
      linkedList0.subList(0, 0);
      discreteDistribution0.probability(long0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.containsAll(linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(2687.9304172);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
      discreteDistribution0.sample();
      Double double1 = new Double(2687.9304172);
      Pair<String, Double> pair2 = new Pair<String, Double>("Mh|#CcH12Dd", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(2687.9304172);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>("initial capacity ({0}) is not positive", double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair3);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample(3646);
      Well44497b well44497b0 = new Well44497b((-1L));
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      String string0 = "";
      Long.getLong("", long0);
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double(1.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList1);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well19937c0, linkedList3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 2147483647L;
      Well44497b well44497b0 = new Well44497b(2147483647L);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)41;
      Byte byte1 = new Byte((byte)41);
      Double double0 = new Double(2147483647L);
      Double double1 = new Double(0.0);
      Long long1 = new Long(2147483647L);
      Double double2 = new Double((-145.0));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double2);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -145 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2755.0397868);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.offerFirst(pair0);
      int int0 = 281;
      Well44497a well44497a0 = new Well44497a(281);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well44497a0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(0L);
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2755.0397868);
      Pair<String, Double> pair0 = new Pair<String, Double>("`", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      Pair<String, Double> pair2 = new Pair<String, Double>("`", double0);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      try { 
        discreteDistribution0.sample((-2144272639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,144,272,639)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2755.0397868);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.pollFirst();
      linkedList0.push((Pair<Integer, Double>) null);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("", long0);
      Double double0 = Double.valueOf(1071.73898386073);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(0.5);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long0, double1);
      Pair<Long, Double> pair3 = new Pair<Long, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList0);
      int int0 = 0;
      linkedList0.subList(0, 0);
      long long2 = (-1580L);
      Long long3 = new Long((-1580L));
      discreteDistribution0.probability(long3);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.containsAll(linkedList0);
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well19937c0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)62);
      Double double0 = new Double((-667.791730216214));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -667.792 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("%*&J+-p}H3", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 0L;
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2147483647L);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)41;
      Byte byte1 = new Byte((byte)41);
      Double double0 = new Double(2147483647L);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
