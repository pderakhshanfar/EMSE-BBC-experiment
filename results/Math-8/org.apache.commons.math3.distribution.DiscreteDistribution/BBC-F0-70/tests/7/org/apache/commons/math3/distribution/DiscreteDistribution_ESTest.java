/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:24:32 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      Double double0 = new Double(835.51);
      Pair<Pair<Object, Object>, Double> pair0 = new Pair<Pair<Object, Object>, Double>((Pair<Object, Object>) null, double0);
      linkedList0.offerFirst(pair0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Object>>(linkedList0);
      discreteDistribution0.sample();
      int int0 = (-649);
      try { 
        discreteDistribution0.sample((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-649)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(4612);
      Double.valueOf(0.6187592245498665);
      Integer.getInteger("");
      Double double0 = new Double(2653);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Integer integer1 = new Integer((-896));
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Integer integer2 = new Integer(347);
      discreteDistribution0.probability(integer2);
      LinkedList<Pair<Integer, Double>> linkedList4 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Double, Double>> linkedList5 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Float float0 = new Float((double) 794);
      Pair<String, Float> pair0 = new Pair<String, Float>("", float0);
      Pair<String, Float> pair1 = new Pair<String, Float>(pair0);
      Double double0 = new Double(402.3951294077784);
      Byte byte0 = new Byte((byte)121);
      Double double1 = new Double((byte)121);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(byte0, double1);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair2);
      Double double2 = new Double(1908.31353668);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(double0, double2);
      linkedList1.add(pair3);
      Well44497a well44497a0 = new Well44497a((-4852L));
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList1);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      well512a0.setSeed(0L);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2879);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Double
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(373);
      Double double0 = Double.valueOf((double) 373);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample(1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      Integer integer1 = new Integer(373);
      LinkedList<Pair<Integer, Double>> linkedList4 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Short, Double>> linkedList5 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(linkedList5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2653);
      Double double0 = Double.valueOf((double) 373);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.sample(2653);
      discreteDistribution0.sample(2653);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      Integer integer1 = new Integer(373);
      LinkedList<Pair<Integer, Double>> linkedList4 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.probability(integer1);
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2653);
      Double double0 = Double.valueOf((double) 373);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.sample(2653);
      discreteDistribution0.sample(2653);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      Integer integer1 = new Integer(1507);
      LinkedList<Pair<Integer, Double>> linkedList4 = new LinkedList<Pair<Integer, Double>>();
      discreteDistribution0.probability(integer0);
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("'Y", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      int int0 = 596;
      Well1024a well1024a0 = new Well1024a(596);
      well1024a0.nextFloat();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList1);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      well512a0.setSeed((-1L));
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      int int1 = 0;
      try { 
        discreteDistribution2.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float(0.5787844799);
      Pair<String, Float> pair0 = new Pair<String, Float>((String) null, float0);
      Pair<String, Float> pair1 = new Pair<String, Float>(pair0);
      Double double0 = new Double(0.9196656548260711);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList1.add(pair2);
      linkedList1.add(pair2);
      Well44497a well44497a0 = new Well44497a(0L);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2879;
      intArray0[1] = 5016;
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      discreteDistribution1.sample(1);
      well512a0.setSeed((long) 5016);
      discreteDistribution1.sample(5016);
      long long0 = 0L;
      well512a0.setSeed(0L);
      // Undeclared exception!
      discreteDistribution0.sample(5016);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(6.283185307179586);
      Double double1 = new Double((-5722.341651492097));
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,722.342 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      int[] intArray0 = new int[1];
      int int0 = (-186719593);
      intArray0[0] = (-186719593);
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      Well512a well512a0 = new Well512a((int[]) null);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      well512a0.setSeed(560L);
      int int0 = 1;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(696);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 373;
      Integer integer0 = new Integer(373);
      Double double0 = Double.valueOf((double) 373);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(373);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well512a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      well512a0.setSeed(0L);
      discreteDistribution1.sample(1);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(2188L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      try { 
        discreteDistribution1.sample((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(2188L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(1059.61523329725);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>(double0, integer0);
      LinkedList<Pair<Pair<Object, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Integer>, Double>>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.containsAll(linkedList1);
      Pair<Pair<Object, Integer>, Double> pair1 = new Pair<Pair<Object, Integer>, Double>(pair0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Pair<Object, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Integer>>(linkedList0);
      Well1024a well1024a0 = new Well1024a(1L);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well1024a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 373;
      Integer integer0 = new Integer(373);
      Double double0 = Double.valueOf((double) 373);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      int[] intArray0 = new int[7];
      intArray0[0] = (-4926);
      intArray0[1] = 1278;
      intArray0[2] = 0;
      intArray0[3] = (-2220);
      intArray0[4] = (-2826);
      intArray0[5] = 2443;
      intArray0[6] = (-349);
      well19937a0.setSeed(intArray0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(6.283185307179586);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double((-1423.9521));
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,423.952 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("QU%5.p", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1077L));
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(195.09012);
      Pair<String, Double> pair0 = new Pair<String, Double>("I{^/6^?k", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.addLast(pair1);
      linkedList0.add((Pair<String, Double>) null);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
