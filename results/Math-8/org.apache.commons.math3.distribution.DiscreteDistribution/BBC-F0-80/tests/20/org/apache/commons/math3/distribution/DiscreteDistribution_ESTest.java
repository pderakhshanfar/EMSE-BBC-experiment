/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:42:34 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2187.82521227);
      Pair<String, Double> pair0 = new Pair<String, Double>("!RL", double0);
      Double double1 = new Double(1605.1586426812);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability((String) null);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("");
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>("$',L?lMx;{y", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(1653.474);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      linkedList0.add(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>("$',L?lMx;{y", double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair1);
      linkedList1.addFirst(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("$',L?lMx;{y");
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextBoolean();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-32.682));
      Double double1 = new Double((-32.682));
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double1);
      Double double2 = new Double(2463.593479664984);
      Pair<String, Double> pair1 = new Pair<String, Double>("", double2);
      well44497b0.nextGaussian();
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      well44497b0.nextBoolean();
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      Double double3 = new Double(177);
      Pair<String, Double> pair3 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution1.sample(3986);
      linkedList0.add(pair4);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution2.sample();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Double>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 177;
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextBoolean();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-32.682));
      Double double1 = new Double((-32.682));
      Pair<String, Double> pair0 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double1);
      Double double2 = new Double(2463.593479664984);
      Pair<String, Double> pair1 = new Pair<String, Double>("", double2);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      well44497b0.nextBoolean();
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      Double double3 = new Double(177);
      Pair<String, Double> pair3 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      linkedList0.push(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      Pair<String, Double> pair5 = new Pair<String, Double>("", double3);
      Pair<String, Double> pair6 = new Pair<String, Double>(pair5);
      linkedList0.add(pair6);
      // Undeclared exception!
      discreteDistribution0.sample(4396);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(177);
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>("$',L?lMx;{y", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>("$',L?lMx;{y", double0);
      linkedList0.add(pair1);
      Pair<String, Double> pair2 = new Pair<String, Double>("cannot format a {0} instance as a 3D vector", double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(linkedList0);
      DiscreteDistribution<String> discreteDistribution4 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution3.probability((String) null);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution5 = null;
      try {
        discreteDistribution5 = new DiscreteDistribution<Short>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      int[] intArray0 = new int[3];
      intArray0[0] = 1427;
      intArray0[1] = (-1645);
      intArray0[2] = 177;
      well44497b0.setSeed(intArray0);
      well44497b0.nextBoolean();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>("~91Un%]/4xB", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(2.365953779624783E-8);
      Byte byte0 = new Byte((byte)55);
      Double double2 = new Double((-49.972703777477));
      Byte byte1 = new Byte((byte)21);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte1, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(177);
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>(",L?lMx;{y", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>(",L?lMx;{y", double0);
      linkedList0.add(pair1);
      Pair<String, Double> pair2 = new Pair<String, Double>("cannot format a {0} instance as a 3D vector", double0);
      linkedList0.add(pair2);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      String string0 = discreteDistribution0.sample();
      assertEquals(",L?lMx;{y", string0);
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(list0);
      assertEquals(2, list0.size());
      
      DiscreteDistribution<String> discreteDistribution4 = new DiscreteDistribution<String>(linkedList0);
      double double1 = discreteDistribution4.probability(",L?lMx;{y");
      assertEquals(0.5, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(177);
      well44497b0.nextBoolean();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>("~91Un%]/4xB", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      Double double1 = new Double(177);
      Pair<String, Double> pair2 = new Pair<String, Double>("~91Un%]/4xB", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList0.add(pair3);
      linkedList0.push(pair3);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution1.sample(746);
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      System.setCurrentTimeMillis(177);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Integer>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2187.82521227);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>((Byte) null, double0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2145521780);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(177);
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>(",L?lMx;{y", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>(",L?lMx;{y", double0);
      linkedList0.add(pair1);
      Pair<String, Double> pair2 = new Pair<String, Double>("cannot format a {0} instance as a 3D vector", double0);
      linkedList0.add(pair2);
      Well19937a well19937a0 = new Well19937a();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution2.getSamples();
      DiscreteDistribution<String> discreteDistribution3 = new DiscreteDistribution<String>(list0);
      discreteDistribution2.probability("");
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution4 = null;
      try {
        discreteDistribution4 = new DiscreteDistribution<Pair<Object, Double>>(well44497b0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte) (-5));
      double double0 = 2187.82521227;
      Double double1 = new Double(2187.82521227);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      try { 
        discreteDistribution0.sample((int) (byte) (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-5)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Well44497b well44497b0 = new Well44497b(2047L);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2047L);
      Pair<String, Double> pair0 = new Pair<String, Double>("~91Un%]/4xB", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.add(pair0);
      Double double1 = new Double(2047L);
      Double double2 = new Double(2047L);
      Pair<String, Double> pair2 = new Pair<String, Double>("~91Un%]/4xB", double2);
      linkedList1.add(pair0);
      linkedList0.add(pair0);
      Double double3 = new Double(0.012847851763103213);
      Double double4 = new Double(4.806827797299427E-9);
      Pair<String, Double> pair3 = new Pair<String, Double>("~91Un%]/4xB", double4);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair1);
      linkedList1.add(pair1);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution1.getSamples();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      assertFalse(discreteDistribution2.equals((Object)discreteDistribution0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2524.0651217);
      Pair<String, Double> pair0 = new Pair<String, Double>("~91Un%]/4xB", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(2524.0651217);
      Double double2 = new Double((-1873.1463465));
      Pair<String, Double> pair2 = new Pair<String, Double>("~91Un%]/4xB", double2);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1814.9);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      int[] intArray0 = new int[6];
      intArray0[0] = 760;
      intArray0[1] = (-2555);
      intArray0[2] = 182;
      int int0 = 3;
      intArray0[3] = 3;
      intArray0[4] = 1100;
      intArray0[5] = 1541;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(iSAACRandom0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 177;
      Well44497b well44497b0 = new Well44497b(177);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(177);
      Pair<String, Double> pair0 = new Pair<String, Double>("~91Un%]/4xB", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      well19937a0.nextBytes(byteArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-2961.8563518100846));
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937a0, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,961.856 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      byte[] byteArray0 = new byte[5];
      mersenneTwister0.clear();
      mersenneTwister0.nextFloat();
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)0;
      mersenneTwister0.nextBytes(byteArray0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2580.2);
      UnaryOperator<Pair<Object, Double>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.listIterator();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(mersenneTwister0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(17L);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.retainAll(linkedList0);
      DiscreteDistribution<Long> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(mersenneTwister0, linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-591.17F));
      Double double0 = new Double((-591.17F));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -591.17 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, (Double) null);
      linkedList0.add(pair0);
      well19937c0.setSeed(0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well44497b0, (List<Pair<Short, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4881L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
