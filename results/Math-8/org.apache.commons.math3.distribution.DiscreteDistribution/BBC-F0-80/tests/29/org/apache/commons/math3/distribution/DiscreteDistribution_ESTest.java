/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:55:36 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(4378.60325705);
      Pair<String, Double> pair0 = new Pair<String, Double>("1<fi7g(Jm/B8TRh=", double0);
      linkedList0.add(pair0);
      linkedList0.addLast(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.addLast(pair1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      Well44497b well44497b0 = new Well44497b();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      discreteDistribution0.sample();
      int int0 = 1797;
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well44497b0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution1.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      double double0 = 4378.60325705;
      Double double1 = new Double(4378.60325705);
      Pair<String, Double> pair0 = new Pair<String, Double>("1<fi7g(Jm/B8TRh=", double1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample();
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      discreteDistribution0.sample();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well512a0, linkedList0);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution1.reseedRandomGenerator(0L);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      // Undeclared exception!
      discreteDistribution2.sample(140665946);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(4378.60325705);
      Pair<String, Double> pair0 = new Pair<String, Double>("1<fi7g(Jm/B8TRh=", double0);
      Double double1 = new Double(4378.60325705);
      Double double2 = new Double(0.3286028950789286);
      Double double3 = new Double(0.3333333333333333);
      Double double4 = new Double(317.4182790083);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      Double double5 = new Double((-1.0));
      discreteDistribution0.probability((Double) null);
      System.setCurrentTimeMillis(1452L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      double double0 = 1635.0;
      Double double1 = new Double(0.6679563273992057);
      Double double2 = new Double(1635.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(937.2298081124178);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.addLast(pair0);
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(double0);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      Double double1 = new Double(937.2298081124178);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1390178849);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer1);
      discreteDistribution0.probability((String) null);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1635.0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(2072.99169);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double1);
      linkedList1.addLast(pair0);
      linkedList1.removeFirstOccurrence(linkedList0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList1);
      discreteDistribution0.probability("");
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(927.084078701997);
      Double double1 = new Double(3127.3);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      linkedList1.addLast(pair1);
      linkedList1.add(pair0);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>(pair0);
      linkedList2.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      int int0 = 468297566;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(468297566);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2384.363131);
      Pair<String, Double> pair0 = new Pair<String, Double>("1<fi7g(Jm/B8TRh=", double0);
      linkedList0.add(pair0);
      Double double1 = new Double(4378.60325705);
      Pair<String, Double> pair1 = new Pair<String, Double>("1<fi7g(Jm/B8TRh=", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample();
      int int0 = (-909302102);
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      Float float1 = new Float(0.0F);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float1, double0);
      linkedList2.add(pair2);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(199.0);
      Double double0 = new Double(199.0);
      Double double1 = new Double(2.31374454498291);
      Double double2 = new Double(2.31374454498291);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double2);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.addLast(pair0);
      linkedList1.removeFirstOccurrence(linkedList0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer((-16));
      Integer integer1 = new Integer(0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.sample();
      Double double3 = new Double(2848.9);
      Pair<Object, Double> pair2 = new Pair<Object, Double>((Object) null, double3);
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      boolean boolean0 = linkedList3.offer(pair2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(927.084078701997);
      Pair<String, Double> pair0 = new Pair<String, Double>("9.#PHG>7f%sRcFt", double0);
      linkedList0.addLast(pair0);
      linkedList0.removeFirstOccurrence(mersenneTwister0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.probability("9.#PHG>7f%sRcFt");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(96);
      Integer integer2 = new Integer((-2011));
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer2, integer2);
      Double double1 = new Double(1860.64294903568);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(integer2, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(927.084078701997);
      Pair<String, Double> pair0 = new Pair<String, Double>("9.#PHG>7f%sRcFt", double0);
      linkedList0.addLast(pair0);
      linkedList0.removeFirstOccurrence(mersenneTwister0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample(1);
      discreteDistribution0.probability("t%PxI5rQ5^e.");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.retainAll(linkedList0);
      DiscreteDistribution<Float> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(927.084078701997);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.addLast(pair0);
      linkedList0.removeFirstOccurrence(mersenneTwister0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      int int0 = (-2146846790);
      try { 
        discreteDistribution0.sample((-2146846790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,146,846,790)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(927.084078701997);
      Pair<String, Double> pair0 = new Pair<String, Double>("9.#PHG>7f%sRcFt", double0);
      linkedList0.addLast(pair0);
      linkedList0.removeFirstOccurrence(mersenneTwister0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.probability("t%PxI5rQ5^e.");
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList1.offer(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
      discreteDistribution1.sample();
      discreteDistribution1.reseedRandomGenerator(0L);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(mersenneTwister0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1635.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(199.0);
      Double double0 = new Double(199.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(927.084078701997);
      Pair<String, Double> pair0 = new Pair<String, Double>("9.#PHG>7f%sRcFt", double0);
      linkedList0.addLast(pair0);
      linkedList0.removeFirstOccurrence(mersenneTwister0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.probability("t%PxI5rQ5^e.");
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1, double0);
      linkedList1.offer(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
      discreteDistribution1.reseedRandomGenerator(0L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = Long.valueOf((-681L));
      Double double0 = new Double((-681L));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.addLast(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -681 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextGaussian();
      long long0 = (-2081L);
      well44497b0.setSeed((-2081L));
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, (List<Pair<Object, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 284;
      Well1024a well1024a0 = new Well1024a(284);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short) (-3371);
      Short short1 = new Short((short) (-3371));
      Double double0 = new Double((short) (-3371));
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,371 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
