/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:16:53 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
      Integer.getInteger("");
      discreteDistribution0.probability(linkedList0);
      Random.setNextRandom(2788);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Byte byte0 = new Byte((byte)81);
      Double double2 = new Double((byte)81);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte0, double2);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>("CANNOT_FORMAT_INSANCE_AS_3D_VECTOR", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>("CANNOT_FORMAT_INSANCE_AS_3D_VECTOR", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>("CANNOT_FORMAT_INSANCE_AS_3D_VECTOR", double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<Object, Double> pair4 = new Pair<Object, Double>(pair2);
      linkedList0.add(pair4);
      Well44497b well44497b0 = new Well44497b(0L);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(719);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      Well512a well512a0 = new Well512a((-888361425));
      well512a0.nextGaussian();
      Well512a well512a1 = new Well512a();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a1, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator((-4583L));
      discreteDistribution0.probability(pair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair0);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair4);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      linkedList1.add(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      Pair<String, Double> pair5 = new Pair<String, Double>("CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR", double0);
      Pair<String, Double> pair6 = new Pair<String, Double>("", double0);
      linkedList1.addFirst(pair2);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample(3103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>("CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair5 = new Pair<String, Double>(pair4);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair4);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      linkedList1.add(pair5);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      Pair<String, Double> pair6 = new Pair<String, Double>("CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR", double1);
      Double double2 = new Double(3808.25718);
      Pair<String, Double> pair7 = new Pair<String, Double>("CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR", double2);
      linkedList1.addFirst(pair3);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution2.sample(3110);
      // Undeclared exception!
      discreteDistribution2.sample(3110);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(84);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.addLast(pair0);
      Double double1 = new Double(84);
      Double double2 = new Double(3808.25718);
      Double double3 = new Double(84);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double3);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      well512a0.nextGaussian();
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      System.setCurrentTimeMillis(1L);
      discreteDistribution0.sample();
      System.setCurrentTimeMillis(84);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 84;
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(84);
      Double double1 = new Double(3808.25718);
      Double double2 = new Double(84);
      Double double3 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double3);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("!\\1K?v3JBz", double0);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      linkedList1.add(pair3);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      Pair<String, Double> pair4 = new Pair<String, Double>("!\\1K?v3JBz", double0);
      Pair<String, Double> pair5 = new Pair<String, Double>(pair3);
      linkedList1.addFirst(pair2);
      discreteDistribution0.sample(84);
      discreteDistribution1.sample();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Integer>(well512a0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(84);
      Double double1 = new Double(3808.25718);
      Double double2 = new Double(84);
      Double double3 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double2, double3);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      well512a0.nextGaussian();
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.probability((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a(84);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      well512a0.nextGaussian();
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      discreteDistribution0.getSamples();
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Double double2 = new Double((-1495.8364287121));
      Pair<String, Double> pair2 = new Pair<String, Double>("", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      System.setCurrentTimeMillis((-258L));
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<String, Double> pair2 = new Pair<String, Double>("CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair5 = new Pair<String, Double>(pair4);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair4);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      linkedList1.add(pair5);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      Pair<String, Double> pair6 = new Pair<String, Double>("org.apache.commons.math3.distribution.DiscreteDistribution", double0);
      Pair<String, Double> pair7 = new Pair<String, Double>(pair2);
      linkedList1.addFirst(pair3);
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = discreteDistribution1.sample(3110);
      assertEquals(3110, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Double double2 = new Double(3808.25718);
      Pair<String, Double> pair1 = new Pair<String, Double>("zJs", double2);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      Double double3 = new Double(3808.25718);
      Long.getLong("\"e-6g(H^|3QJ");
      Pair<Long, Double> pair3 = new Pair<Long, Double>((Long) null, double3);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      linkedList2.add(pair3);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList2);
      // Undeclared exception!
      try { 
        discreteDistribution1.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((-4327.5454F));
      Double double0 = new Double(1368.690164253071);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well19937c0, linkedList0);
      Float float1 = new Float(617.8611F);
      discreteDistribution0.probability(float1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.iterator();
      Integer integer0 = new Integer((-217172657));
      Double double1 = new Double(798.0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair2);
      linkedList1.add(pair3);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution1.sample();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(well19937c0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Double double2 = new Double(3808.25718);
      Pair<String, Double> pair1 = new Pair<String, Double>("zJs", double2);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = discreteDistribution0.sample(3110);
      assertEquals(3110, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a(84);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-3854.4120302949));
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      well512a0.nextGaussian();
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,854.412 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well512a well512a0 = new Well512a(84);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      well512a0.nextGaussian();
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator(2551L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      Double double1 = new Double((-3990.194332621));
      Double double2 = new Double((-1774.75610758937));
      Pair<String, Double> pair2 = new Pair<String, Double>("", double2);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair1);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,774.756 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(740.568094);
      Pair<String, Double> pair0 = new Pair<String, Double>("UNPARSEABLE_COMPLEX_NUMBER", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      System.setCurrentTimeMillis(0L);
      try { 
        discreteDistribution0.sample((-497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-497)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well512a well512a0 = new Well512a(84);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      Float float0 = new Float((float) 84);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair2);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
      Float float1 = new Float((double) 84);
      discreteDistribution1.probability(float1);
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(well19937c0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1405.7);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = (-961L);
      Well512a well512a0 = new Well512a((-961L));
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, (List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well512a well512a0 = new Well512a(84);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      Float float0 = new Float((float) 84);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair2);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair3);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
      Float float1 = new Float(1423.71590025);
      discreteDistribution1.probability(float1);
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(well19937c0, linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 84;
      Well512a well512a0 = new Well512a(84);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(3808.25718);
      Double double1 = new Double(3808.25718);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList1.listIterator();
      linkedList1.removeAll(linkedList0);
      Float float0 = new Float(622.3F);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-12);
      well44497b0.nextBytes(byteArray0);
      Double double0 = new Double(0.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList1.poll();
      linkedList0.offerFirst(pair0);
      linkedList0.removeAll(linkedList1);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
