/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:09:20 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2275.650153118957);
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      Double double1 = new Double(Float.POSITIVE_INFINITY);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.1890325426044941);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double0);
      linkedList1.add(pair1);
      Well512a well512a0 = new Well512a((-286L));
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(jDKRandomGenerator0, linkedList1);
      Double double1 = new Double((-2586.4));
      Double double2 = new Double(0.1805474105231617);
      double double3 = discreteDistribution0.probability(double2);
      assertEquals(0.0, double3, 0.01);
      
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair2 = new Pair<String, Double>("Evs]wUTl*M?[.xlvjd", (Double) null);
      Double double4 = new Double(0.1890325426044941);
      Pair<String, Double> pair3 = new Pair<String, Double>("p.-4", double2);
      linkedList2.add(pair3);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
      Double[] doubleArray0 = discreteDistribution0.sample(2052);
      assertEquals(2052, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.18903254);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList1.add(pair0);
      Double double1 = new Double(0.1805474105231617);
      Well512a well512a0 = new Well512a(0L);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList1);
      Double double2 = new Double(0.1805474105231617);
      discreteDistribution0.probability(double0);
      Pair<String, Double> pair1 = new Pair<String, Double>("Evs^]wUTl*M?[.xlvjd", double2);
      Double double3 = new Double(0.0);
      Pair<String, Double> pair2 = new Pair<String, Double>("p.-4", double3);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.getSamples();
      discreteDistribution0.probability((Double) null);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      int int0 = 2584;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(2584);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.1890325426044941);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair0);
      Well44497a well44497a0 = new Well44497a((-5034868814120038111L));
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
      Double double1 = new Double(1042.341503);
      discreteDistribution1.probability((Double) null);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList3 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      DiscreteDistribution<Pair<Object, Object>> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Pair<Object, Object>>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(392.1);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      Double double1 = new Double(0.1805474105231617);
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      Double double2 = new Double(0.6200061382105402);
      discreteDistribution2.probability(double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1);
      well1024a0.setSeed((-1917));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1917));
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      linkedList0.listIterator();
      discreteDistribution0.sample();
      try { 
        discreteDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      double double0 = 392.1;
      Double double1 = new Double(392.1);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      double double2 = 0.1805474105231617;
      // Undeclared exception!
      try { 
        discreteDistribution0.sample();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(392.1);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      Double double1 = new Double(0.1805474105231617);
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      Double double2 = new Double(392.1);
      discreteDistribution2.probability(double2);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      Well1024a well1024a0 = new Well1024a(1);
      Integer integer0 = new Integer((-1073338415));
      Double double0 = new Double(0.765787975053597);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Integer integer1 = new Integer((-533));
      Double double1 = new Double(1.25);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<Integer, Object> pair2 = new Pair<Integer, Object>(integer0, (Object) null);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2, double1);
      linkedList0.add(pair3);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution1.sample();
      Double double2 = new Double(1.25);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double2, double0);
      linkedList1.add(pair4);
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution2.getSamples();
      discreteDistribution1.getSamples();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution3 = null;
      try {
        discreteDistribution3 = new DiscreteDistribution<Long>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      Double double0 = new Double(0.9285714285714286);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.sample();
      Double double1 = new Double(7.511257471572996E-4);
      discreteDistribution0.getSamples();
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, (Double) null);
      linkedList2.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer((-2145440779));
      Double double0 = new Double(255.9357);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2145440779));
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList0);
      discreteDistribution1.sample();
      Double double1 = new Double(0.0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      linkedList2.add(pair2);
      DiscreteDistribution<Double> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1);
      well1024a0.setSeed((-1917));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1917));
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      linkedList0.listIterator();
      discreteDistribution0.sample();
      discreteDistribution0.sample(1);
      discreteDistribution0.reseedRandomGenerator((-1980L));
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, list0);
      discreteDistribution1.sample();
      System.setCurrentTimeMillis(1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList2 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      DiscreteDistribution<Pair<Object, Object>> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<Pair<Object, Object>>(linkedList2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1);
      well1024a0.setSeed((-1917));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1917));
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      linkedList0.listIterator();
      discreteDistribution0.sample();
      long long0 = (-1980L);
      discreteDistribution0.reseedRandomGenerator((-1980L));
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(list0);
      int int0 = (-2663);
      try { 
        discreteDistribution0.sample((-2663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,663)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Object>, Double>>();
      Well19937c well19937c0 = new Well19937c((-1601));
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)49;
      Byte byte1 = new Byte((byte)49);
      Double double0 = new Double((-1.0));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList1.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well19937c0, linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1;
      Well1024a well1024a0 = new Well1024a(1);
      int int1 = (-1917);
      well1024a0.setSeed((-1917));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-1917));
      Double double0 = new Double(1);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well1024a0, linkedList0);
      linkedList0.listIterator();
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1980L));
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well1024a0, list0);
      discreteDistribution1.sample();
      System.setCurrentTimeMillis(1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = null;
      try {
        discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(392.1);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
      try { 
        discreteDistribution0.sample(223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(392.1);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        discreteDistribution0.reseedRandomGenerator(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscreteDistribution<Byte> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.parallelStream();
      Double double0 = new Double((-1050.21));
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,050.21 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-3355L));
      Double double0 = new Double(1696.2643);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 0;
      Well19937c well19937c0 = new Well19937c(0);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      linkedList1.add((Pair<Byte, Double>) null);
      DiscreteDistribution<Byte> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well19937c0, linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1419);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(712);
      Double double0 = new Double(1419);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Integer integer1 = new Integer(1419);
      RandomAdaptor.createAdaptor(mersenneTwister0);
      Integer integer2 = Integer.getInteger("", integer1);
      Double double1 = new Double(0.0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer2, double1);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair2);
      linkedList0.offerFirst(pair3);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(randomAdaptor0, linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
