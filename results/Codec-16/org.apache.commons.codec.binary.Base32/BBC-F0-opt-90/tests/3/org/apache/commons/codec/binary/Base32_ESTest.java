/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:46:10 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)91);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-35);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAABXIAAAAAAAAAAA======", string0);
      assertNotNull(string0);
      assertEquals(11, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      Base32 base32_0 = new Base32(1495, byteArray0, true, (byte)14);
      assertNotNull(base32_0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("0S00000000\u000E\u000E\u000E\u000E\u000E\u000E\u0007\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-30));
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      baseNCodec_Context0.modulus = (int) (byte) (-30);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 8, (int) (byte) (-124), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -30
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32((-2774), byteArray0);
      assertNotNull(base32_0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      base32_0.decode(baseNCodec_Context0.buffer, 61, (int) (byte)0, baseNCodec_Context0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base32_0.isInAlphabet((byte)71);
      assertTrue(boolean0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 54, (int) (byte)0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(false, (byte)0);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 458, 458, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 458
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      byte[] byteArray0 = base32_0.ensureBufferSize(65, baseNCodec_Context0);
      assertNotNull(byteArray0);
      assertEquals(8192, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      String string0 = base32_0.encodeToString(byteArray0);
      assertNotNull(string0);
      assertEquals(8192, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      base32_0.decode(byteArray0, 13, 2398, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(2834, byteArray0, false, (byte)8);
      assertNotNull(base32_0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-97), (int) (byte) (-97), (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32((-2774), byteArray0);
      assertNotNull(base32_0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)0, 453, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(false, (byte)73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      byte[] byteArray0 = base32_0.ensureBufferSize(1227, baseNCodec_Context0);
      assertNotNull(byteArray0);
      assertEquals(8192, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      Base32 base32_1 = new Base32(115, byteArray0, true, (byte)126);
      assertFalse(base32_1.equals((Object)base32_0));
      assertNotNull(base32_1);
      assertEquals(8192, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      Base32 base32_2 = new Base32(4101, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[27];
      byteArray0[1] = (byte)111;
      boolean boolean0 = base32_0.containsAlphabetOrPad(byteArray0);
      assertFalse(boolean0);
      assertEquals(27, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32(1495, byteArray0, true, (byte)14);
      assertNotNull(base32_0);
      assertEquals(6, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = base32_0.isInAlphabet((byte) (-67));
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      byte[] byteArray0 = base32_0.ensureBufferSize(1227, baseNCodec_Context0);
      assertNotNull(byteArray0);
      assertEquals(8192, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      Base32 base32_1 = new Base32(115, byteArray0, true, (byte)126);
      assertFalse(base32_1.equals((Object)base32_0));
      assertNotNull(base32_1);
      assertEquals(8192, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      base32_1.encode(byteArray0, 3, (int) (byte)126, baseNCodec_Context0);
      assertNotSame(base32_0, base32_1);
      assertNotSame(base32_1, base32_0);
      assertFalse(base32_0.equals((Object)base32_1));
      assertFalse(base32_1.equals((Object)base32_0));
      assertEquals(8192, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32((-681), byteArray0, true, (byte)5);
      assertNotNull(base32_0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = new Base32(0, byteArray0);
      assertNotNull(base32_0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base32_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[7];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      base32_0.encode(byteArray0, (int) (byte)1, (int) (byte) (-114), baseNCodec_Context0);
      assertEquals(7, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base32 base32_0 = new Base32(1495, byteArray0, true, (byte)14);
      assertNotNull(base32_0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      base32_0.encode(byteArray0, 10, (int) (byte) (-37), baseNCodec_Context0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      base32_0.encode(byteArray0, (int) (byte) (-67), 354, baseNCodec_Context0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32((-2774), byteArray0);
      assertNotNull(base32_0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      assertNotNull(baseNCodec_Context0);
      
      baseNCodec_Context0.modulus = 61;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (-525), (-525), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 61
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)8);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      Object object0 = base32_0.decode((Object) "UTF-16LE");
      assertNotNull(object0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      Object object0 = base32_0.decode((Object) "UTF-16LE");
      assertNotNull(object0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      Object object0 = base32_0.decode((Object) "8QV+5M)sP|");
      assertNotNull(object0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = base32_0.decode("Parameter supplied to Base-N encode is not a byte[]");
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)120}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[27];
      byteArray0[1] = (byte)111;
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("CRXVGEYJBVYYAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA====");
      assertEquals(27, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(2104, byteArray0, true, (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)65;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(64, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000A\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(1907, (byte[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 1907 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode((byte[]) null, (int) (byte)37, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32((-2774), byteArray0);
      byte[] byteArray1 = base32_0.decode("AA======");
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)33);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-2042), baseNCodec_Context0);
      base32_0.decode(byteArray0);
      // Undeclared exception!
      base32_0.encode(byteArray0, 2613, 6165, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(1227, baseNCodec_Context0);
      Base32 base32_1 = new Base32(4101, byteArray0, false);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }
}
