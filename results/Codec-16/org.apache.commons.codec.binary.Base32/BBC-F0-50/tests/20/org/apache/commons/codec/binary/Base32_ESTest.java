/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 18:34:26 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-864), baseNCodec_Context1);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte byte0 = (byte)13;
      Base32 base32_1 = new Base32(5, byteArray0, false, (byte)13);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((-864), baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray2 = base32_0.encode(byteArray0);
      base32_0.decode(byteArray2);
      base32_0.encode(byteArray2, (-864), (-864), baseNCodec_Context0);
      byte[] byteArray3 = base32_0.decode(byteArray1);
      Base32 base32_1 = new Base32(2);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-7);
      base32_0.encode(byteArray3);
      base32_1.encodeToString(byteArray4);
      base32_0.decode("gpL)BH.4+C2K+|Eo+");
      Base32 base32_2 = new Base32(300);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      base32_0.decode(byteArray1, 17, 2180, baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      int int0 = (-864);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((-864), baseNCodec_Context0);
      baseNCodec_Context0.modulus = (-864);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, (-864), (-864), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -864
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-25);
      base32_0.encode(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte) (-23);
      byteArray1[0] = (byte) (-23);
      base32_0.isInAlphabet(byteArray1, true);
      byte[] byteArray2 = null;
      int int0 = (-3155);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 76;
      baseNCodec_Context0.modulus = (int) (byte) (-23);
      baseNCodec_Context0.modulus = 76;
      // Undeclared exception!
      try { 
        base32_0.decode((byte[]) null, (-2160), (-2337), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 76
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet((byte)86);
      base32_0.isInAlphabet((byte)65);
      Base32 base32_1 = new Base32(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      base32_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet((byte)86);
      base32_0.isInAlphabet((byte)65);
      Base32 base32_1 = new Base32(true);
      int int0 = 1359;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_1.ensureBufferSize((-180), baseNCodec_Context0);
      base32_1.containsAlphabetOrPad(byteArray0);
      byte byte0 = (byte)60;
      Base32 base32_2 = new Base32((-1), byteArray0, true, (byte)60);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_1.isInAlphabet((byte)28);
      base32_2.isInAlphabet((byte)60);
      base32_1.isInAlphabet((byte)86);
      // Undeclared exception!
      base32_2.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(false, (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      base32_0.isInAlphabet((byte)86);
      base32_0.isInAlphabet((byte)65);
      Base32 base32_1 = new Base32(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      base32_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      Base32 base32_0 = new Base32(20, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(8182, baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray1);
      byte[] byteArray2 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte) (-15));
      base32_0.encodeToString(byteArray1);
      base32_0.isInAlphabet((byte) (-107));
      Base32 base32_1 = new Base32();
      base32_1.ensureBufferSize((byte) (-63), baseNCodec_Context0);
      base32_0.decode(byteArray2);
      Base32 base32_2 = new Base32(64, byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      Base32 base32_1 = new Base32((byte)0, byteArray0);
      base32_1.encodeToString(byteArray0);
      base32_0.isInAlphabet("AAAAAAAAAA======");
      base32_1.encodeToString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_1.ensureBufferSize(64, baseNCodec_Context0);
      base32_0.decode(byteArray1);
      byte byte0 = (byte) (-50);
      base32_1.isInAlphabet((byte) (-50));
      base32_1.decode(byteArray0);
      Base32 base32_2 = new Base32(true);
      byte byte1 = (byte) (-117);
      base32_2.isInAlphabet((byte) (-117));
      base32_2.isInAlphabet((byte) (-50));
      int int0 = 2654;
      // Undeclared exception!
      base32_2.encode(byteArray1, 1783, 2654, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-107);
      byteArray0[1] = (byte)37;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32(8169, byteArray0, false);
      byte[] byteArray1 = base32_1.ensureBufferSize(8189, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_1.ensureBufferSize(76, baseNCodec_Context1);
      base32_0.containsAlphabetOrPad(byteArray0);
      Base32 base32_2 = new Base32(8189, byteArray2, true, (byte) (-95));
      byte[] byteArray3 = base32_1.encode(byteArray1);
      base32_0.isInAlphabet((byte)37);
      base32_1.isInAlphabet((byte)54);
      base32_0.isInAlphabet((byte)37);
      // Undeclared exception!
      base32_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      Base32 base32_0 = new Base32(20, byteArray0);
      byte[] byteArray1 = base32_0.decode("2cK] ]x&Qv!m");
      base32_0.encodeAsString(byteArray0);
      base32_0.isInAlphabet((byte) (-15));
      base32_0.isInAlphabet("6HYQ====\uFFFD\uFFFD");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = (int) (byte) (-15);
      base32_0.decode(byteArray1, (int) (byte) (-15), (int) (byte) (-15), baseNCodec_Context0);
      baseNCodec_Context0.toString();
      base32_0.decode("Context[buffer=null, currentLinePos=0, eof=true, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=-15]");
      baseNCodec_Context0.pos = (int) (byte)48;
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.toString();
      base32_0.isInAlphabet(baseNCodec_Context0.buffer, true);
      base32_0.encode(byteArray0, (int) (byte)48, (int) (byte)48, baseNCodec_Context0);
      base32_0.encode(baseNCodec_Context0.buffer, 61, 61, baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-91));
      base32_0.isInAlphabet((byte) (-91));
      base32_0.encode(baseNCodec_Context0.buffer, (-1123), (-15), baseNCodec_Context0);
      base32_0.encode(byteArray0, (-1123), (int) (byte) (-15), baseNCodec_Context0);
      base32_0.decode(baseNCodec_Context0.buffer, (int) (byte)48, 1514, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, 48, (int) (byte) (-15), baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byte byte0 = (byte)48;
      Base32 base32_0 = new Base32(20, byteArray0);
      byte[] byteArray1 = base32_0.decode("2cK] ]?xv!m");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = (int) (byte) (-15);
      base32_0.decode(byteArray1, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      baseNCodec_Context0.toString();
      base32_0.decode("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=-15]");
      baseNCodec_Context0.pos = (int) (byte)48;
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.toString();
      base32_0.isInAlphabet(baseNCodec_Context0.buffer, true);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)48, (int) (byte)48, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32();
      byte byte0 = (byte) (-112);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(20, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(8192, baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray1);
      base32_0.encode(byteArray0);
      byte byte1 = (byte)3;
      base32_0.isInAlphabet((byte)3);
      Base32 base32_1 = new Base32(67, byteArray0);
      base32_1.isInAlphabet((byte)3);
      base32_1.isInAlphabet((byte) (-112));
      Base32 base32_2 = new Base32(12, byteArray2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-107);
      byteArray0[1] = (byte)37;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32(8169, byteArray0, false);
      base32_1.ensureBufferSize(8189, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_1.ensureBufferSize(76, baseNCodec_Context1);
      base32_0.containsAlphabetOrPad(byteArray0);
      Base32 base32_2 = new Base32(8189, byteArray1, true, (byte) (-95));
      byte[] byteArray2 = base32_2.encode(byteArray0);
      boolean boolean0 = base32_2.isInAlphabet((byte)24);
      base32_2.isInAlphabet((byte)5);
      base32_2.isInAlphabet((byte) (-119));
      base32_1.decode(byteArray2);
      boolean boolean1 = base32_0.isInAlphabet((byte) (-119));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)8);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) (byte)8;
      base32_0.decode(byteArray0, (int) (byte)8, 498, baseNCodec_Context0);
      base32_0.encodeToString(byteArray1);
      boolean boolean0 = base32_0.isInAlphabet((byte)8);
      baseNCodec_Context0.modulus = 498;
      Base32 base32_1 = new Base32();
      base32_1.ensureBufferSize(84, baseNCodec_Context0);
      base32_0.decode(byteArray1);
      boolean boolean1 = base32_0.isInAlphabet((byte)16);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte byte0 = (byte)0;
      Base32 base32_0 = new Base32();
      byte byte1 = (byte) (-112);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte) (-112), baseNCodec_Context0);
      byte[] byteArray1 = base32_0.decode("s.4;^.G^");
      base32_0.encodeAsString(byteArray1);
      base32_0.isInAlphabet((byte) (-112));
      base32_0.isInAlphabet("4E======");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray1, (int) (byte)0, (int) (byte) (-112), baseNCodec_Context0);
      baseNCodec_Context0.toString();
      byte[] byteArray2 = base32_0.decode("(-$wZ44KA{FS");
      baseNCodec_Context1.toString();
      base32_0.isInAlphabet(byteArray0, true);
      Base32 base32_1 = new Base32();
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_1.encode(byteArray2, (int) (byte) (-112), 76, baseNCodec_Context2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -112
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      Base32 base32_0 = new Base32(20, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize(8182, baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray1);
      byte[] byteArray2 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte) (-15));
      base32_0.ensureBufferSize(19, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-63));
      base32_0.isInAlphabet((byte) (-63));
      Base32 base32_1 = new Base32(false);
      base32_1.decode(byteArray2);
      boolean boolean1 = base32_0.isInAlphabet((byte) (-63));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte byte0 = (byte) (-112);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(20, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte) (-112), baseNCodec_Context0);
      base32_0.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte)2);
      base32_0.isInAlphabet((byte) (-112));
      base32_0.isInAlphabet((byte) (-112));
      // Undeclared exception!
      base32_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byte byte0 = (byte)48;
      byteArray0[1] = (byte)48;
      Base32 base32_0 = new Base32(20, byteArray0);
      byte[] byteArray1 = base32_0.decode("2cK] ]?xv!m");
      base32_0.encodeAsString(byteArray0);
      base32_0.isInAlphabet((byte)48);
      base32_0.isInAlphabet("6EYA====\uFFFD0");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = (int) (byte) (-15);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, (int) (byte)48, (int) (byte)48, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32((-1898));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)36;
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-103);
      byte[] byteArray2 = null;
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(2553, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 2553 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base32 base32_0 = new Base32((-1154), byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-1);
      base32_0.encodeToString(byteArray1);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("7777777774======", string0);
      
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(2340, baseNCodec_Context0);
      byte[] byteArray3 = base32_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
      
      boolean boolean0 = base32_0.isInAlphabet((byte)51);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)117;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(3932, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0011A\u0014\uFFFD\u0000\uFFFD\u00064u]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-1);
      Base32 base32_0 = new Base32((-558), byteArray0);
      base32_0.encodeToString(byteArray0);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[8];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte) (-1), baseNCodec_Context0);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte)127;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-1);
      base32_0.decode(byteArray1);
      boolean boolean0 = base32_0.isInAlphabet((byte)61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte)0;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, (int) (byte)0, (-1739), baseNCodec_Context1);
      String string0 = baseNCodec_Context1.toString();
      assertEquals("Context[buffer=null, currentLinePos=0, eof=true, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]", string0);
      
      base32_0.isInAlphabet((byte)0);
      baseNCodec_Context1.ibitWorkArea = (-387);
      base32_0.encode(byteArray1, (-1998), (int) (byte)0, baseNCodec_Context1);
      base32_0.isInAlphabet((byte)0);
      base32_0.isInAlphabet((byte)0);
      boolean boolean0 = base32_0.isInAlphabet((byte)91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) (byte)8;
      base32_0.decode(byteArray0, 0, 498, baseNCodec_Context0);
      base32_0.encodeToString(byteArray1);
      base32_0.isInAlphabet((byte)8);
      baseNCodec_Context0.modulus = 498;
      base32_0.decode(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.encode(byteArray1, 8, (int) (byte)8, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)122;
      byte byte0 = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 0, 63, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-58);
      Base32 base32_0 = new Base32((-1675), byteArray0);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_0.decode((Object) "");
      base32_0.isInAlphabet((byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      baseNCodec_Context0.toString();
      baseNCodec_Context0.readPos = (-1675);
      baseNCodec_Context0.lbitWorkArea = 0L;
      baseNCodec_Context0.eof = true;
      base32_0.decode(byteArray0, 12, (int) (byte)0, baseNCodec_Context0);
      base32_0.encode(byteArray1, (int) (byte)14, (int) (byte)44, baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte)44, (-1366), baseNCodec_Context0);
      base32_0.decode(byteArray0, (-1675), (-117), baseNCodec_Context0);
      base32_0.isInAlphabet((byte)44);
      base32_0.isInAlphabet((byte)0);
      base32_0.decode(byteArray0, 0, (-1516), baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-111));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte byte0 = (byte)80;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)61);
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-773), 0, baseNCodec_Context0);
      base32_0.decode(byteArray0, (-773), 0, baseNCodec_Context0);
      base32_0.encode(byteArray0, 6, 0, baseNCodec_Context0);
      int int0 = 572;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 4, 572, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2550;
      byte[] byteArray0 = null;
      byte byte0 = (byte)76;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(2550, (byte[]) null, false, (byte)76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 2550 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte byte0 = (byte)33;
      Base32 base32_0 = new Base32((byte)33);
      byte[] byteArray0 = new byte[8];
      byte byte1 = (byte)61;
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)33;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = (int) (byte)33;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)33, (int) (byte)61, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)12;
      Base32 base32_0 = new Base32((-621), byteArray0);
      base32_0.isInAlphabet(byteArray0, false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 500, (int) (byte) (-103), baseNCodec_Context0);
      base32_0.encodeToString(byteArray0);
      base32_0.encode(byteArray0, (-4508), (int) (byte) (-39), baseNCodec_Context0);
      base32_0.isInAlphabet(byteArray0, true);
      baseNCodec_Context0.pos = (int) (byte)96;
      base32_0.encode(byteArray0, (int) (byte)0, (-2007), baseNCodec_Context0);
      baseNCodec_Context0.readPos = (int) (byte)0;
      base32_0.isInAlphabet((byte) (-103));
      boolean boolean0 = base32_0.isInAlphabet((byte)12);
      base32_0.encode(byteArray0, (int) (byte) (-103), (int) (byte) (-39), baseNCodec_Context0);
      boolean boolean1 = base32_0.isInAlphabet((byte) (-101));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32((-1898));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)106;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      base32_0.encode(byteArray0, 0, (-1511), baseNCodec_Context0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-103);
      baseNCodec_Context0.lbitWorkArea = 0L;
      baseNCodec_Context0.toString();
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte)114;
      byteArray1[5] = (byte)114;
      base32_0.decode(byteArray1, (int) (byte)4, 64, baseNCodec_Context0);
      base32_0.decode(byteArray1);
      baseNCodec_Context0.ibitWorkArea = 76;
      base32_0.encode(byteArray1, 64, 2111, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)114);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)106, (int) (byte)2, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 106
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte) (-112), baseNCodec_Context0);
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((-2100), baseNCodec_Context1);
      base32_0.containsAlphabetOrPad(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte) (-112));
      base32_0.isInAlphabet((byte) (-112));
      base32_0.isInAlphabet((byte)0);
      int int0 = 51;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-623), 51, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -623
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32(0, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (-3681), 0, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)0);
      base32_0.decode(byteArray0, 5, (-3681), baseNCodec_Context0);
      base32_0.encode(byteArray0, (-710), 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[8];
      baseNCodec_Context0.eof = true;
      byteArray1[0] = (byte)0;
      baseNCodec_Context0.readPos = 1776;
      base32_0.decode((String) null);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      baseNCodec_Context0.buffer = byteArray1;
      base32_0.encodeToString(byteArray0);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      base32_0.encode(byteArray1, 0, (-982), baseNCodec_Context0);
      base32_0.encode(byteArray1, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      boolean boolean1 = base32_0.isInAlphabet((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      int int0 = 1436;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int1 = 7;
      baseNCodec_Context0.currentLinePos = 7;
      baseNCodec_Context0.toString();
      baseNCodec_Context0.readPos = 7;
      base32_0.decode(byteArray0, 1436, 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[3];
      baseNCodec_Context0.pos = 1733;
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)61;
      base32_0.readResults(byteArray1, (-1262), 0, baseNCodec_Context0);
      baseNCodec_Context0.readPos = 17;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-977), 2223, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -977
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32((-1720));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)73;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)19, 5, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-2);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(652, byteArray0, false, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\uFFFD\u0005\u0000Y\u0000L\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)0;
      Base32 base32_0 = new Base32(49, byteArray0, true, (byte) (-124));
      int int0 = 0;
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32((-2064));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)7;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)8, (int) (byte)8, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte)80;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(false, (byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)59;
      base32_0.isInAlphabet(byteArray0, true);
      byte byte0 = (byte)67;
      try { 
        base32_0.encode((Object) "|_qk;)<5O_>u");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      base32_0.containsAlphabetOrPad((byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)31;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-685);
      baseNCodec_Context0.eof = true;
      base32_0.encode(byteArray0, 2113, 0, baseNCodec_Context0);
      base32_0.encode(byteArray0, (-685), 2113, baseNCodec_Context0);
      base32_0.decode(byteArray0, 2360, (-685), baseNCodec_Context0);
      baseNCodec_Context0.buffer = null;
      base32_0.encode((byte[]) null, 1468, (-336), baseNCodec_Context0);
      base32_0.decode((byte[]) null, 0, 82, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)13;
      Base32 base32_0 = new Base32(1806, byteArray0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      base32_0.isInAlphabet("");
      byte byte0 = (byte) (-82);
      byteArray0[0] = (byte) (-82);
      int int0 = (-928);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      boolean boolean0 = true;
      try { 
        base32_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }
}
