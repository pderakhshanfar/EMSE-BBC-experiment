/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 20:23:11 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)75;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte) (-128);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 4, 624, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((-241), baseNCodec_Context0);
      base32_0.decode("");
      base32_0.decode(byteArray0);
      Base32 base32_1 = new Base32();
      base32_1.decode(byteArray1);
      base32_1.decode(" > 0, but lineSeparator is null");
      // Undeclared exception!
      base32_0.encode(byteArray1, 13, 2995, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      base32_0.decode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      byte[] byteArray2 = base32_0.decode("");
      base32_0.decode(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)0;
      byteArray3[8] = (byte)0;
      base32_0.encodeToString(byteArray3);
      base32_0.encodeAsString(byteArray2);
      byte[] byteArray4 = base32_0.decode("(Q1nN");
      base32_0.containsAlphabetOrPad(byteArray4);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      base32_0.decode(byteArray1, (int) (byte)0, 2925, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)70;
      base32_0.readResults(byteArray0, 48, 933, baseNCodec_Context0);
      base32_0.encodeAsString(byteArray0);
      base32_0.decode("]");
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 77, (int) (byte)10, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 77
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-241), baseNCodec_Context0);
      Base32 base32_1 = new Base32(756, byteArray0);
      base32_1.decode("");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)27;
      byteArray1[5] = (byte)72;
      byteArray1[6] = (byte)74;
      byteArray1[7] = (byte)0;
      base32_0.decode(byteArray1);
      base32_1.encodeToString(byteArray1);
      Base32 base32_2 = new Base32((byte)84, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[10];
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAA", string0);
      
      Base32 base32_1 = new Base32(true);
      byte[] byteArray1 = base32_1.decode("AAAAAAAAAAAAAAAA");
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-108), (byte) (-91), (byte)41, (byte)74, (byte)82, (byte) (-108), (byte) (-91), (byte)41, (byte)74}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)19;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = false;
      baseNCodec_Context0.modulus = (int) (byte) (-47);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)86, (-500), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -47
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[20];
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte) (-9);
      byteArray1[3] = (byte)61;
      base32_0.encodeAsString(byteArray0);
      base32_0.decode("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte)61;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 10, (int) (byte) (-56), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 61
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("0oBSwWy/z43~}tn({");
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base32_0.isInAlphabet(byteArray1, false);
      base32_0.encodeAsString(byteArray1);
      byte byte0 = (byte)117;
      base32_0.isInAlphabet((byte)117);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)117;
      byteArray2[2] = (byte) (-103);
      baseNCodec_Context0.modulus = 3477;
      byteArray2[3] = (byte)117;
      int int0 = (-51);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray2, (int) (byte)117, (-51), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 3477
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)20);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)20;
      base32_0.decode(byteArray0);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)0;
      Base32 base32_1 = new Base32((int) (byte)20);
      base32_0.decode(byteArray0);
      base32_1.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 6;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      assertFalse(baseNCodec_Context1.equals((Object)baseNCodec_Context0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Base32 base32_1 = new Base32((byte)6);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      Base32 base32_2 = new Base32(64, byteArray0, true);
      byte[] byteArray1 = base32_2.decode("0oBSwWy/z43~}tn({");
      base32_1.encodeToString(byteArray1);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base32 base32_0 = new Base32(534, byteArray0);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, (int) (byte) (-111), (-2382), baseNCodec_Context0);
      base32_0.decode(byteArray0, (-1206), (-51), baseNCodec_Context0);
      base32_0.encode(byteArray1, (int) (byte)64, 0, baseNCodec_Context0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)64;
      base32_0.decode(byteArray2, 205, 51, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)20);
      base32_0.decode(byteArray0, 1857, 255, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-63), (byte)64, (byte)0, (byte) (-111), (byte)0, (byte)0}, byteArray0);
      
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray1, (int) (byte)0, (int) (byte)64, baseNCodec_Context1);
      assertNotSame(baseNCodec_Context1, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("0oBSwWy/z43~}tn({");
      base32_0.encodeAsString(byteArray0);
      byteArray0[1] = (byte)0;
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(64, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 64 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base32 base32_0 = new Base32((byte) (-1), byteArray0, true, (byte) (-1));
      byte[] byteArray1 = base32_0.decode("eTtl)\b;oVVn0w[!!");
      base32_0.encodeAsString(byteArray1);
      base32_0.encodeAsString(byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-2));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      boolean boolean1 = base32_0.isInAlphabet((byte)8);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      Base32 base32_1 = new Base32((-97), byteArray0);
      byte[] byteArray1 = base32_1.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 76, (int) (byte)0, baseNCodec_Context0);
      base32_1.decode(byteArray1, (int) (byte)0, 10, baseNCodec_Context0);
      base32_0.encode(byteArray1, 0, (int) (byte) (-1), baseNCodec_Context0);
      base32_1.decode(byteArray1, (-321), 109, baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-1));
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      base32_0.decode(byteArray2, 121, 64, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-63);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-68);
      Base32 base32_0 = new Base32(2744, byteArray1);
      byte[] byteArray2 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32(false, (byte)0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.pos = 76;
      base32_0.decode(byteArray2, (int) (byte)0, 7, baseNCodec_Context1);
      base32_1.decode(byteArray2, (-1853), (int) (byte)0, baseNCodec_Context0);
      assertNotSame(base32_1, base32_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32((-4701));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byte[] byteArray1 = base32_0.decode("V%5]aUqk");
      base32_0.isInAlphabet(byteArray1, true);
      byte[] byteArray2 = null;
      base32_0.encodeAsString((byte[]) null);
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, (int) (byte)0, (int) (byte)0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1724;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      Base32 base32_0 = new Base32(1724, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      String string0 = "k[FZ@S,qQzj*n3TmOw";
      base32_0.decode("k[FZ@S,qQzj*n3TmOw");
      base32_0.readResults(byteArray0, 7, (byte) (-82), baseNCodec_Context0);
      baseNCodec_Context0.toString();
      base32_0.isInAlphabet((byte) (-82));
      byte byte1 = (byte) (-53);
      base32_0.isInAlphabet((byte) (-53));
      base32_0.isInAlphabet((byte) (-85));
      baseNCodec_Context0.pos = 2213;
      byte byte2 = (byte)4;
      base32_0.isInAlphabet((byte)4);
      int int1 = 2564;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-82);
      byteArray1[3] = (byte)4;
      baseNCodec_Context0.readPos = (int) (byte) (-1);
      try { 
        base32_0.decode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte byte0 = (byte) (-52);
      Base32 base32_0 = new Base32(false, (byte) (-52));
      byte[] byteArray0 = new byte[4];
      base32_0.isInAlphabet("/&3g[(1]IHf(m+)");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = (int) (byte) (-52);
      base32_0.readResults(byteArray0, 0, 3, baseNCodec_Context0);
      byteArray0[0] = (byte) (-52);
      baseNCodec_Context0.lbitWorkArea = 1778L;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      base32_0.encode(byteArray0);
      byteArray0[2] = (byte) (-52);
      base32_0.decode("T]!qU<");
      base32_0.isInAlphabet(byteArray0, false);
      byte[] byteArray1 = null;
      base32_0.encodeAsString((byte[]) null);
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 14, (int) (byte)0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("74AAAAA\uFFFD", string0);
      
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = base32_0.decode("Impossible modulus ");
      assertEquals(0, byteArray1.length);
      
      base32_0.encode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      base32_0.encode(byteArray2);
      boolean boolean0 = base32_0.isInAlphabet((byte)73);
      assertTrue(boolean0);
      
      boolean boolean1 = base32_0.isInAlphabet((byte) (-1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-114);
      Base32 base32_0 = new Base32((-104), byteArray0, false);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)0;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(127, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [x@#\uFFFD@\uFFFD\u0016L\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte byte0 = (byte)10;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(true, (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32((-4701));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)47;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)41, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-106));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      base32_0.decode(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte) (-106);
      byteArray1[5] = (byte) (-106);
      byteArray1[6] = (byte) (-106);
      base32_0.containsAlphabetOrPad((byte[]) null);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, (int) (byte) (-106), (int) (byte) (-106), baseNCodec_Context0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("0oBSwWy/z43~}tn({");
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      base32_0.isInAlphabet(byteArray1, false);
      base32_0.encodeAsString(byteArray1);
      base32_0.isInAlphabet((byte)117);
      int int0 = 2703;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = (-536);
      baseNCodec_Context0.currentLinePos = (-536);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, 2703, 2217, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2703
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32((-652));
      base32_0.encodeAsString((byte[]) null);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults((byte[]) null, (-652), 4571, baseNCodec_Context0);
      base32_0.encode((byte[]) null, 6, (-2879), baseNCodec_Context0);
      baseNCodec_Context0.buffer = null;
      baseNCodec_Context0.lbitWorkArea = (long) (-652);
      base32_0.decode((byte[]) null, 0, 207, baseNCodec_Context0);
      base32_0.decode((byte[]) null, 207, 207, baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-8));
      base32_0.decode((byte[]) null, 0, 661, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte)4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = (int) (byte)0;
      base32_0.decode(byteArray0, (int) (byte)0, 0, baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)0);
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.encode(byteArray0, 0, 0, baseNCodec_Context0);
      baseNCodec_Context0.ibitWorkArea = 64;
      base32_0.decode(byteArray0, 87, 0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 1135, 0, baseNCodec_Context1);
      base32_0.decode(byteArray0, 0, 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, (int) (byte)0, 44, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[0];
      int int0 = (-2063);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 76;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      int int1 = 0;
      baseNCodec_Context0.modulus = 0;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 76, 76, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = (byte)125;
      Base32 base32_0 = new Base32(true, (byte)125);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte)125, baseNCodec_Context0);
      byte byte1 = (byte)88;
      base32_0.isInAlphabet((byte)88);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)88;
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 0, (int) (byte)125, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte byte0 = (byte)71;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byte byte0 = (byte)117;
      byteArray0[1] = (byte)117;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(51, byteArray0, false, (byte) (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\uFFFDu\u0000\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base32 base32_0 = new Base32(534, byteArray0);
      base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.eof = false;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 205, 76, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 205
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 476;
      byte[] byteArray0 = null;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(476, (byte[]) null, true, (byte) (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 476 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)34);
      byte byte0 = (byte)32;
      base32_0.isInAlphabet((byte)32);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) (byte)32;
      baseNCodec_Context0.currentLinePos = 2210;
      int int0 = 2;
      baseNCodec_Context0.pos = 2;
      base32_0.ensureBufferSize(2, baseNCodec_Context0);
      baseNCodec_Context0.pos = (int) (byte)32;
      baseNCodec_Context0.ibitWorkArea = (int) (byte)34;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-2444), 2774, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2444
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      base32_0.encodeToString(byteArray0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      base32_0.decode("Impossible modulus ");
      base32_0.encode(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-1);
      base32_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-1), 10, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)23;
      Base32 base32_0 = new Base32(0, byteArray0, true, (byte)23);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 1004;
      baseNCodec_Context0.ibitWorkArea = (int) (byte)23;
      base32_0.readResults(byteArray0, (byte)0, (-3464), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.readResults(byteArray0, (byte)78, (byte)64, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte byte0 = (byte)0;
      Base32 base32_0 = new Base32((byte)0);
      byte byte1 = (byte) (-35);
      base32_0.isInAlphabet((byte) (-35));
      byte[] byteArray0 = null;
      int int0 = 1732;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.readResults((byte[]) null, 1732, 84, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode((byte[]) null, 1732, (int) (byte)0, baseNCodec_Context1);
      baseNCodec_Context1.ibitWorkArea = 53;
      baseNCodec_Context1.currentLinePos = (-159);
      // Undeclared exception!
      try { 
        base32_0.decode((byte[]) null, (int) (byte)0, 1732, baseNCodec_Context1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte byte0 = (byte) (-105);
      Base32 base32_0 = new Base32(true, (byte) (-105));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 0;
      baseNCodec_Context0.lbitWorkArea = 1105L;
      base32_0.decode(byteArray0, 9, (-3291), baseNCodec_Context0);
      baseNCodec_Context0.readPos = 262;
      baseNCodec_Context0.currentLinePos = 13;
      baseNCodec_Context0.modulus = 64;
      base32_0.decode(byteArray0, 0, (-3291), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 0, 0, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-1));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode((byte[]) null, 7, (-1455), baseNCodec_Context0);
      base32_0.decode((byte[]) null, (int) (byte) (-1), (-1455), baseNCodec_Context0);
      base32_0.decode((byte[]) null, (int) (byte) (-1), (int) (byte) (-1), baseNCodec_Context0);
      base32_0.encode((byte[]) null, 69, 68, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte)0;
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base32_0.decode("Tn*z8s");
      int int0 = 0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.lbitWorkArea = 255L;
      int int1 = (-1711);
      try { 
        base32_0.decode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }
}
