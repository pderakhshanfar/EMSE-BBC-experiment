/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:33:33 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte) (-69), baseNCodec_Context0);
      baseNCodec_Context0.ibitWorkArea = 2919;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (-954), 32, baseNCodec_Context1);
      byteArray0[0] = (byte) (-69);
      base32_0.isInAlphabet(byteArray1, true);
      base32_0.encode(byteArray1, (int) (byte)0, (int) (byte)101, baseNCodec_Context1);
      byte[] byteArray2 = base32_0.ensureBufferSize(2160, baseNCodec_Context1);
      Base32 base32_1 = new Base32();
      byte[] byteArray3 = base32_1.decode(byteArray2);
      base32_1.isInAlphabet((byte) (-78));
      baseNCodec_Context1.buffer = byteArray1;
      base32_1.encode(byteArray0, 64, (-756), baseNCodec_Context1);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      baseNCodec_Context2.toString();
      base32_0.encode(byteArray3, 64, (-756), baseNCodec_Context2);
      // Undeclared exception!
      base32_1.decode(byteArray2, 64, 2160, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte byte0 = (byte)76;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)76;
      base32_0.encodeAsString(byteArray0);
      Base32 base32_1 = new Base32(true);
      byte[] byteArray1 = base32_1.decode("JQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
      base32_0.containsAlphabetOrPad(byteArray1);
      Base32 base32_2 = new Base32(true, (byte) (-99));
      base32_2.encodeToString(byteArray1);
      base32_1.isInAlphabet(byteArray1, false);
      byte[] byteArray2 = base32_2.decode("+p4s<!ICU6f>1~H");
      base32_0.containsAlphabetOrPad(byteArray2);
      int int0 = (-735);
      byte byte1 = (byte) (-104);
      Base32 base32_3 = new Base32(true, (byte) (-104));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int1 = 700;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, 700, 700, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 700
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)109;
      byte byte0 = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)38;
      int int0 = 3097;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-2238);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 3097, (int) (byte) (-1), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -2238
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-111);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 1948;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 55, (int) (byte) (-29), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 1948
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte) (-69), baseNCodec_Context0);
      baseNCodec_Context0.ibitWorkArea = 2919;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (-917), 32, baseNCodec_Context1);
      byteArray0[0] = (byte) (-69);
      base32_0.isInAlphabet(byteArray1, true);
      base32_0.encode(byteArray1, (int) (byte)0, (int) (byte)101, baseNCodec_Context1);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray2 = base32_0.ensureBufferSize(2160, baseNCodec_Context1);
      Base32 base32_1 = new Base32();
      base32_1.decode(byteArray2);
      base32_0.decode("XMAAAAAAAA======");
      base32_1.isInAlphabet((byte) (-78));
      int int0 = (-756);
      base32_0.containsAlphabetOrPad(byteArray1);
      Base32 base32_2 = new Base32(76, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[9];
      Base32 base32_1 = new Base32(false);
      byte[] byteArray1 = base32_0.decode("org.apache.commons.codec.binary.Base32");
      base32_1.containsAlphabetOrPad(byteArray1);
      base32_1.encodeToString(byteArray0);
      base32_1.decode("AAAAAAAAAAAAAAA=");
      base32_0.containsAlphabetOrPad(byteArray0);
      Base32 base32_2 = null;
      try {
        base32_2 = new Base32(76, byteArray0, false, (byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      boolean boolean0 = false;
      Base32 base32_1 = new Base32(false);
      String string0 = "org.apache.commons.codec.binary.Base32";
      byte[] byteArray0 = base32_0.decode("org.apache.commons.codec.binary.Base32");
      base32_1.containsAlphabetOrPad(byteArray0);
      byte byte0 = (byte)9;
      Base32 base32_2 = null;
      try {
        base32_2 = new Base32(false, (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (byte)0, 32, baseNCodec_Context1);
      byteArray0[0] = (byte)0;
      base32_0.encode(byteArray1, (int) (byte)0, (int) (byte)101, baseNCodec_Context1);
      base32_0.encodeToString(byteArray0);
      base32_0.ensureBufferSize(2160, baseNCodec_Context1);
      Base32 base32_1 = new Base32();
      byte[] byteArray2 = baseNCodec_Context1.buffer;
      base32_0.decode(byteArray2, 42, 657, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_1.encode(byteArray2, (int) (byte)0, 262, baseNCodec_Context1);
      base32_1.isInAlphabet((byte)91);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 1354, 2192, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1354
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = (byte)9;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (-917), 32, baseNCodec_Context1);
      byteArray0[0] = (byte)0;
      base32_0.isInAlphabet(byteArray1, true);
      base32_0.encode(byteArray1, (int) (byte)0, (int) (byte)101, baseNCodec_Context1);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray2 = base32_0.ensureBufferSize(2160, baseNCodec_Context1);
      Base32 base32_1 = new Base32();
      byte[] byteArray3 = baseNCodec_Context1.buffer;
      base32_0.decode(byteArray3, 42, 657, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      base32_0.encode(byteArray2, 42, 64, baseNCodec_Context2);
      base32_0.isInAlphabet((byte) (-81));
      base32_1.decode(byteArray0, 4, (-1143), baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-81));
      // Undeclared exception!
      try { 
        base32_1.encode((byte[]) null, 255, 255, baseNCodec_Context1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32();
      base32_1.ensureBufferSize(56, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      Base32 base32_2 = null;
      try {
        base32_2 = new Base32((byte)66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32(155);
      byte[] byteArray0 = new byte[4];
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAAAAA=\r\n", string0);
      
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)100;
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = (-260);
      baseNCodec_Context0.eof = false;
      base32_0.readResults(byteArray0, (byte)3, (byte)9, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-237), (-1374), baseNCodec_Context1);
      baseNCodec_Context1.modulus = (-3029);
      base32_0.encode(byteArray0, 3896, 0, baseNCodec_Context1);
      base32_0.isInAlphabet((byte)9);
      base32_0.isInAlphabet((byte)121);
      base32_0.encode(byteArray1, 1579, 1611, baseNCodec_Context1);
      assertArrayEquals(new byte[] {(byte)66, (byte)72, (byte)51, (byte)65, (byte)71, (byte)90, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      base32_0.isInAlphabet(byteArray0, true);
      byte byte0 = (byte)48;
      byteArray0[5] = (byte)48;
      baseNCodec_Context0.lbitWorkArea = (long) (byte)55;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      base32_0.encode(byteArray0, (-1143), (int) (byte)0, baseNCodec_Context0);
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = base32_0.ensureBufferSize(0, baseNCodec_Context0);
      base32_0.decode(byteArray1);
      base32_0.decode(byteArray1, (int) (byte)23, 159, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)23);
      base32_0.decode(byteArray1, 0, (int) (byte)23, baseNCodec_Context0);
      int int0 = 384;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      base32_0.encode(byteArray1, (int) (byte)0, 2270, baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (-917), 32, baseNCodec_Context1);
      byteArray0[0] = (byte)0;
      Base32 base32_1 = new Base32(0, byteArray0, false);
      byte[] byteArray1 = base32_1.encode(byteArray0);
      base32_1.decode((Object) "X");
      BaseNCodec.Context baseNCodec_Context2 = new BaseNCodec.Context();
      Base32 base32_2 = new Base32();
      byte[] byteArray2 = base32_2.ensureBufferSize(76, baseNCodec_Context1);
      BaseNCodec.Context baseNCodec_Context3 = new BaseNCodec.Context();
      Base32 base32_3 = new Base32((byte)0);
      base32_3.encodeToString(byteArray1);
      base32_3.decode(byteArray2, (-5283), (-5283), baseNCodec_Context2);
      boolean boolean0 = base32_3.isInAlphabet((byte)101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      Object object0 = base32_0.decode((Object) "cLB55j");
      base32_0.encode(object0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (-1L);
      baseNCodec_Context0.eof = true;
      base32_0.encode(byteArray0, 4373, 3599, baseNCodec_Context0);
      baseNCodec_Context0.toString();
      byte[] byteArray1 = new byte[0];
      base32_0.decode(byteArray1, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte)0, 6, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)79;
      byteArray1[0] = (byte)79;
      base32_0.decode(byteArray1);
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = base32_0.encode(byteArray0);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)32;
      base32_0.containsAlphabetOrPad(byteArray2);
      byteArray0[5] = (byte)0;
      base32_0.encode(byteArray0);
      Base32 base32_1 = new Base32(true);
      byte[] byteArray3 = base32_1.decode(byteArray2);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_1.encode(byteArray3, (int) (byte)0, (int) (byte)76, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      Base32 base32_1 = new Base32((-4988), (byte[]) null, false);
      base32_1.encode((byte[]) null);
      base32_0.decode((Object) "cL3B55j");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-1292), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.encodeToString(byteArray0);
      base32_1.decode(byteArray0, 0, 5, baseNCodec_Context1);
      boolean boolean0 = base32_1.isInAlphabet((byte)28);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[1];
      base32_0.isInAlphabet(byteArray0, true);
      base32_0.encodeToString(byteArray0);
      base32_0.decode((Object) "AA======");
      byte byte0 = (byte)0;
      try { 
        base32_0.encode((Object) "ELu");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 971;
      byte[] byteArray0 = null;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(971, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 971 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(38, (byte[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 38 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)79;
      base32_0.decode(byteArray1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = base32_0.encode(byteArray0);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)32;
      base32_0.containsAlphabetOrPad(byteArray2);
      byteArray0[5] = (byte)0;
      byte[] byteArray3 = base32_0.encode(byteArray0);
      base32_0.isInAlphabet((byte)76);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.ibitWorkArea = (int) (byte)0;
      base32_0.decode(byteArray0, (int) (byte)1, (int) (byte)1, baseNCodec_Context0);
      baseNCodec_Context0.ibitWorkArea = 14;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray3, 46, (int) (byte)32, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-16), (int) (byte) (-16), (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base32 base32_0 = new Base32(3);
      base32_0.isInAlphabet((byte)61);
      base32_0.isInAlphabet((byte)61);
      base32_0.isInAlphabet((byte)81);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)81;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-4170), (int) (byte)81, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4170
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)0;
      Base32 base32_0 = new Base32(24, byteArray0, true);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      base32_0.decode((Object) "X");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((-5283), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.pos = (-683);
      base32_0.encodeToString(byteArray1);
      baseNCodec_Context1.buffer = byteArray0;
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)5, baseNCodec_Context1);
      boolean boolean0 = base32_0.isInAlphabet((byte)28);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-55);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(64, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\uFFFDMI\u0000\u0000[\u0000\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, false, (byte)0);
      base32_0.isInAlphabet(byteArray0, true);
      byte[] byteArray1 = base32_0.decode("#s4IjsY");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = (int) (byte)0;
      base32_0.encode(byteArray0, (int) (byte)122, (int) (byte)0, baseNCodec_Context0);
      baseNCodec_Context0.pos = 0;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      baseNCodec_Context0.ibitWorkArea = 7;
      byteArray2[1] = (byte)0;
      base32_0.decode(byteArray2, (int) (byte) (-1), (int) (byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.decode(byteArray2, (int) (byte)0, 0, baseNCodec_Context1);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, 76, (int) (byte)122, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)126;
      Base32 base32_0 = new Base32((-2356), byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = 3669;
      baseNCodec_Context0.toString();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 0, (int) (byte)75, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base32 base32_0 = new Base32(0, byteArray0, true);
      int int1 = 0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      try { 
        base32_0.encode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, 0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-63);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)98, (int) (byte)98, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte byte0 = (byte)8;
      Base32 base32_0 = new Base32(false, (byte)8);
      base32_0.isInAlphabet((byte)8);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)8, (int) (byte)8, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)55;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 663, 3493, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 663
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-69));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte byte0 = (byte) (-111);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      base32_0.isInAlphabet("");
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-111);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      base32_0.isInAlphabet((byte) (-111));
      byte[] byteArray2 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((byte) (-111), baseNCodec_Context0);
      baseNCodec_Context0.buffer = byteArray1;
      int int0 = 1470;
      baseNCodec_Context0.readPos = 1470;
      try { 
        base32_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-62);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((-1), byteArray0, false, (byte)55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1), baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byte byte0 = (byte)112;
      byteArray0[2] = (byte)112;
      byte byte1 = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)18;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = (int) (byte)112;
      baseNCodec_Context0.readPos = (int) (byte) (-89);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 42, (int) (byte)18, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      Object object0 = base32_0.decode((Object) "cL3B55j");
      base32_0.encode(object0);
      base32_0.isInAlphabet((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (-1L);
      baseNCodec_Context0.eof = true;
      base32_0.encode(byteArray0, 4373, 3599, baseNCodec_Context0);
      baseNCodec_Context0.toString();
      byte[] byteArray1 = new byte[0];
      base32_0.decode(byteArray1, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte)0, 6, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      base32_0.isInAlphabet(byteArray0, true);
      byteArray0[2] = (byte) (-29);
      byte byte1 = (byte)2;
      byteArray0[3] = (byte)2;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) (byte) (-29);
      try { 
        base32_0.encode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }
}
