/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:29:32 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)91;
      Base32 base32_0 = new Base32(8192, byteArray0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32(63, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 9, (int) (byte)0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-13));
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (int) (byte) (-13);
      base32_0.decode(byteArray1, (int) (byte)1, (int) (byte)1, baseNCodec_Context0);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(0, byteArray0, false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 1413, 0, baseNCodec_Context0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32(15, byteArray0, false, (byte)113);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-2011), baseNCodec_Context0);
      base32_0.encodeToString(byteArray0);
      // Undeclared exception!
      base32_0.encode(byteArray0, 126, 8192, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32(2902);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, (int) (byte) (-97), 1199, baseNCodec_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32((-168));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize(1273, baseNCodec_Context0);
      base32_0.encodeToString(byteArray0);
      base32_0.encode(byteArray0, 341, 1273, baseNCodec_Context0);
      // Undeclared exception!
      base32_0.decode(byteArray0, 1767, 1767, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-26));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode((byte[]) null, 1253, (int) (byte)110, baseNCodec_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base32 base32_0 = new Base32(0, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-10), (int) (byte)63, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(9, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [E\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = base32_0.containsAlphabetOrPad(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-74));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet((byte)52);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[25];
      byteArray0[2] = (byte) (-97);
      String string0 = base32_0.encodeToString(byteArray0);
      assertEquals("AAAJ6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[2];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-7);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 126, (-4500), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -7
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte) (-85));
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32(1479);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[7];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (-487), (-1313), baseNCodec_Context0);
      base32_0.encode(byteArray0, 4087, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-26));
      byte[] byteArray0 = base32_0.decode("Hb`+cnL'[(4Dh:OP");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-8), (byte)55}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(9);
      byte[] byteArray0 = base32_0.decode("org.apache.commons.codec.binary.BaseNCodec$Context");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 9, (int) (byte) (-73), baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)11, (byte)68}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32(8192, byteArray0, false);
      byte[] byteArray1 = base32_0.decode("L_)V|$d`xC");
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)93}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32();
      Object object0 = base32_0.decode((Object) "IEQJ6B2MDLKPXEAAAAAAAAAAAAAAAAAAAAAAAAAA");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-26));
      byte[] byteArray0 = base32_0.decode("RWKN{BC=P^l");
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-108), (byte) (-48), (byte) (-119)}, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)5);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 0, (int) (byte)5, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[9];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 0, (int) (byte) (-66), baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte) (-66), (int) (byte)0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(true, (byte)32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(9);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      Base32 base32_1 = null;
      try {
        base32_1 = new Base32(76, byteArray1, false, (byte)71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [AAAAAAAA\r
         // AA======\r
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(16, (byte[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 16 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32(63, byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-2390), 1212, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2390
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32((-168));
      byte[] byteArray0 = new byte[6];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 116;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 13, (-213), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 116
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-13));
      boolean boolean0 = base32_0.isInAlphabet("lineSeparator must not contain Base32 characters: [");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32((byte)0, byteArray0, false);
      byte[] byteArray1 = base32_0.decode("8A56)6aw6-");
      assertArrayEquals(new byte[] {(byte)7, (byte)125, (byte) (-17)}, byteArray1);
      assertEquals(3, byteArray1.length);
  }
}
