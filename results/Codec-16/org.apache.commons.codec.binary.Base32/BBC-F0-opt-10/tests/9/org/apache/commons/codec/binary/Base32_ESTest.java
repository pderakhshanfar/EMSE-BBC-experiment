/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:32:50 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Base32 base32_0 = new Base32((byte)34);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.buffer = byteArray0;
      base32_0.ensureBufferSize(76, baseNCodec_Context0);
      byte[] byteArray2 = base32_0.decode(byteArray1);
      Base32 base32_1 = new Base32();
      byte[] byteArray3 = base32_1.encode(byteArray1);
      base32_0.encodeAsString(byteArray3);
      baseNCodec_Context0.pos = 1236;
      Base32 base32_2 = new Base32((byte)55, byteArray2);
      byte[] byteArray4 = new byte[11];
      byteArray4[0] = (byte)34;
      byteArray4[1] = (byte)34;
      byteArray4[2] = (byte) (-123);
      byteArray4[3] = (byte) (-123);
      byteArray4[4] = (byte)55;
      byteArray4[5] = (byte)34;
      base32_1.encodeAsString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = (byte) (-102);
      Base32 base32_0 = new Base32((byte) (-102));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-102), (int) (byte) (-102), baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.eof = false;
      baseNCodec_Context1.modulus = (int) (byte) (-102);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 1467, (int) (byte) (-102), baseNCodec_Context1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -102
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte byte0 = (byte)91;
      Base32 base32_1 = new Base32((byte)91);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((byte)91, baseNCodec_Context1);
      base32_0.isInAlphabet("");
      base32_0.decode(byteArray0);
      Base32 base32_2 = new Base32();
      base32_0.decode("");
      // Undeclared exception!
      base32_2.encode(byteArray0, 64, 3536, baseNCodec_Context1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Base32 base32_0 = new Base32((byte)64);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32((byte)64);
      baseNCodec_Context0.eof = true;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(76, baseNCodec_Context0);
      base32_1.decode(byteArray1);
      Base32 base32_2 = new Base32();
      base32_0.encode(byteArray2, 1416, (-2672), baseNCodec_Context1);
      base32_2.encode(byteArray1);
      base32_1.encodeAsString(byteArray0);
      base32_0.isInAlphabet((byte)55);
      base32_1.isInAlphabet((byte)55);
      base32_2.encodeAsString(byteArray2);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)64;
      byteArray3[1] = (byte)55;
      byteArray3[2] = (byte)64;
      Base32 base32_3 = new Base32(true);
      base32_3.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Base32 base32_0 = new Base32((byte)64);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32((byte)64);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize(25, baseNCodec_Context0);
      base32_0.decode(byteArray0);
      Base32 base32_2 = new Base32();
      Base32 base32_3 = new Base32(true, (byte)64);
      byte[] byteArray3 = base32_3.encode(byteArray2);
      base32_2.encodeAsString(byteArray1);
      base32_0.isInAlphabet((byte)64);
      Base32 base32_4 = new Base32((byte)64, byteArray3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)110;
      Base32 base32_0 = new Base32((byte)110);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32((byte)110);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((-1629), baseNCodec_Context0);
      base32_1.decode(byteArray1);
      Base32 base32_2 = new Base32();
      byte[] byteArray2 = new byte[6];
      baseNCodec_Context1.modulus = 64;
      byteArray2[0] = (byte)110;
      byteArray2[1] = (byte)110;
      byteArray2[2] = (byte)84;
      byteArray2[2] = (byte)110;
      byteArray2[4] = (byte)110;
      byteArray2[5] = (byte)110;
      base32_1.encodeAsString(byteArray2);
      // Undeclared exception!
      try { 
        base32_1.encode(byteArray1, 356, (-376), baseNCodec_Context1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 64
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base32_0.ensureBufferSize((-1629), baseNCodec_Context0);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      Base32 base32_1 = new Base32((-8));
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_1.encode(byteArray1);
      // Undeclared exception!
      base32_1.decode(byteArray0, 3, 4254, baseNCodec_Context0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int0 = (-1629);
      byte[] byteArray0 = base32_0.ensureBufferSize((-1368), baseNCodec_Context0);
      base32_0.decode(byteArray0);
      Base32 base32_1 = new Base32((-1368));
      base32_1.containsAlphabetOrPad(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)75;
      byte byte0 = (byte) (-22);
      byteArray1[2] = (byte) (-22);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)19;
      baseNCodec_Context0.modulus = 55;
      byteArray1[5] = (byte)64;
      byteArray1[6] = (byte) (-112);
      base32_1.encode(byteArray1);
      base32_1.decode(byteArray0, 76, 17, baseNCodec_Context0);
      Base32 base32_2 = new Base32(17, byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32((byte)110);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32();
      baseNCodec_Context0.eof = false;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray2 = base32_0.ensureBufferSize((-1629), baseNCodec_Context0);
      byte[] byteArray3 = base32_1.ensureBufferSize(8175, baseNCodec_Context0);
      base32_0.decode(byteArray1);
      Base32 base32_2 = new Base32(8187);
      base32_2.containsAlphabetOrPad(byteArray3);
      base32_1.encode(byteArray3);
      base32_2.decode(byteArray3, 8187, (-1629), baseNCodec_Context1);
      Base32 base32_3 = new Base32(64, byteArray2, false, (byte)111);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray1, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      base32_0.readResults(byteArray0, (-1274), 1984, baseNCodec_Context1);
      Base32 base32_1 = new Base32(3);
      byte[] byteArray2 = base32_1.decode("wOz$:Q[3f\"DNTX^x)2");
      base32_0.readResults(byteArray2, 64, (-2264), baseNCodec_Context1);
      base32_1.encodeAsString(byteArray1);
      base32_0.encodeToString(byteArray0);
      Base32 base32_2 = new Base32(true);
      base32_2.isInAlphabet((byte) (-23));
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-23);
      byteArray3[1] = (byte) (-23);
      byteArray3[2] = (byte)0;
      base32_2.decode(byteArray3, 0, (-433), baseNCodec_Context1);
      assertEquals(3, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = new Base32(25);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte)2;
      Base32 base32_1 = new Base32(13, byteArray1);
      base32_1.decode("-TJlv+v");
      Base32 base32_2 = new Base32(51);
      base32_2.encodeAsString(byteArray1);
      base32_1.encodeToString(byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte) (-55));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte) (-55), 0, baseNCodec_Context0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.decode("rBSDv$sFt}acU");
      Base32 base32_1 = new Base32(78);
      byte byte0 = (byte)103;
      Base32 base32_2 = null;
      try {
        base32_2 = new Base32(119, byteArray1, false, (byte)103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\f\uFFFDZ]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)4);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      byte byte0 = (byte)82;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)123;
      base32_0.encodeAsString(byteArray0);
      Base32 base32_1 = new Base32(false);
      base32_1.decode("AQCFE6Y\u0004");
      Base32 base32_2 = null;
      try {
        base32_2 = new Base32(1604, byteArray0, true, (byte)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0004\u0004R{]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(25);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      byte byte0 = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)28;
      base32_0.decode(byteArray0);
      base32_0.decode("org.apache.commons.codec.binary.Base32");
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.toString();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)3;
      base32_0.encodeAsString(byteArray1);
      Base32 base32_1 = new Base32(true);
      Base32 base32_2 = null;
      try {
        base32_2 = new Base32((-218), byteArray0, false, (byte)82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte) (-55));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base32 base32_1 = new Base32();
      base32_1.decode(byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.toString();
      base32_1.encodeAsString(byteArray0);
      boolean boolean0 = true;
      Base32 base32_2 = new Base32(true);
      Base32 base32_3 = null;
      try {
        base32_3 = new Base32(520, byteArray0, true, (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte) (-55));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte) (-55), 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte) (-55);
      byteArray1[4] = (byte) (-55);
      base32_0.readResults(byteArray1, (-9), 2725, baseNCodec_Context0);
      byte[] byteArray2 = base32_0.decode(",lq|*KSdU<pO5E");
      base32_0.readResults(byteArray1, 2725, (byte) (-55), baseNCodec_Context0);
      base32_0.encodeAsString(byteArray1);
      base32_0.encodeToString(byteArray2);
      Base32 base32_1 = new Base32(true);
      boolean boolean0 = base32_1.isInAlphabet((byte) (-55));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte) (-80));
      Base32 base32_1 = new Base32();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      base32_0.encodeAsString(byteArray0);
      base32_0.encodeToString(byteArray0);
      base32_1.isInAlphabet((byte)47);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-80));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byte byte0 = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)2;
      byteArray0[3] = (byte)2;
      byte byte2 = (byte)1;
      byteArray0[4] = (byte)1;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.ensureBufferSize((-1305), baseNCodec_Context0);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-64);
      base32_0.decode(byteArray0);
      byte byte3 = (byte) (-18);
      byteArray0[7] = (byte) (-18);
      BaseNCodec.Context baseNCodec_Context1 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 61, 84, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      boolean boolean0 = base32_0.containsAlphabetOrPad(byteArray0);
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)52;
      byte[] byteArray1 = base32_0.decode(byteArray0);
      byteArray0[3] = (byte) (-68);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) (byte)77;
      baseNCodec_Context0.toString();
      base32_0.encodeAsString((byte[]) null);
      Base32 base32_1 = new Base32(true);
      String string0 = base32_1.encodeToString(byteArray1);
      assertEquals("CS======", string0);
      
      Base32 base32_2 = new Base32(true);
      boolean boolean1 = base32_2.isInAlphabet((byte) (-3));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(25);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)97;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 34, (-1656), baseNCodec_Context0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)61;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)61;
      base32_0.encodeAsString(byteArray2);
      byteArray1[4] = (byte)0;
      base32_0.encodeToString(byteArray1);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-81));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Base32 base32_1 = new Base32();
      String string0 = base32_1.encodeAsString(byteArray0);
      assertEquals("AA======", string0);
      
      base32_0.encodeToString(byteArray1);
      boolean boolean0 = base32_0.isInAlphabet((byte)47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      Base32 base32_0 = new Base32(7, byteArray0, false);
      base32_0.isInAlphabet("");
      BaseNCodec.Context baseNCodec_Context0 = null;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-1138), 34, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte byte0 = (byte)89;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte byte0 = (byte) (-55);
      Base32 base32_0 = new Base32(false, (byte) (-55));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      int int0 = 0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte) (-55), 0, baseNCodec_Context0);
      base32_0.readResults(byteArray0, (-232), 9, baseNCodec_Context0);
      base32_0.decode("LmL&XZY2ehcg[Fg");
      base32_0.readResults(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.decode(byteArray0, 0, (int) (byte) (-55), baseNCodec_Context0);
      base32_0.encode(byteArray0, (int) (byte) (-55), 1531, baseNCodec_Context0);
      try { 
        base32_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-3);
      Base32 base32_0 = new Base32((-1889), byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.ibitWorkArea = 64;
      baseNCodec_Context0.readPos = 64;
      baseNCodec_Context0.pos = 13;
      base32_0.decode(byteArray0);
      base32_0.decode(byteArray0, 438, (-1989), baseNCodec_Context0);
      base32_0.isInAlphabet((byte)84);
      base32_0.decode(byteArray0, 2394, (int) (byte)84, baseNCodec_Context0);
      base32_0.isInAlphabet((byte) (-63));
      base32_0.isInAlphabet((byte) (-119));
      base32_0.isInAlphabet((byte) (-106));
      base32_0.ensureBufferSize(1841, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)71);
      base32_0.encode(byteArray0, (int) (byte)84, 50, baseNCodec_Context0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byte byte0 = (byte)56;
      base32_0.containsAlphabetOrPad(byteArray0);
      byteArray0[2] = (byte)56;
      base32_0.decode(byteArray0);
      byteArray0[3] = (byte) (-68);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = (long) (byte)77;
      baseNCodec_Context0.toString();
      baseNCodec_Context0.pos = (-153);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, 1864, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      base32_0.encodeAsString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      base32_0.encodeToString(byteArray1);
      boolean boolean0 = base32_0.isInAlphabet((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte byte0 = (byte)0;
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[0];
      int int0 = 0;
      int int1 = 3179;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = base32_0.decode("WBaM{1dqbw%K1");
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray1, 1564, 3179, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1564
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(1977);
      base32_0.isInAlphabet((byte) (-42));
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 1175;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-42), (-2989), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 1175
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(false, (byte)75);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)61;
      base32_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 7;
      base32_0.encode(byteArray1, 86, 0, baseNCodec_Context0);
      base32_0.encodeAsString(byteArray0);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.eof = false;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray1, 255, 255, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 39;
      byte[] byteArray0 = null;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(39, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 39 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base32 base32_0 = new Base32(false, (byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, (int) (byte)0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byte byte0 = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-2);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(5, byteArray0, true, (byte)105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0000ZVdi\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-59);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, 61, (int) (byte)76, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = new Base32(25);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-96), baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      Base32 base32_0 = new Base32((-2071), byteArray0, true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-83), 0, baseNCodec_Context0);
      baseNCodec_Context0.eof = true;
      base32_0.encodeAsString(byteArray0);
      base32_0.decode(byteArray0, (int) (byte)0, (-3770), baseNCodec_Context0);
      base32_0.decode(byteArray0, (int) (byte)0, 986, baseNCodec_Context0);
      base32_0.encode(byteArray0, 986, (int) (byte)0, baseNCodec_Context0);
      base32_0.decode(byteArray0, 0, 0, baseNCodec_Context0);
      base32_0.encode(byteArray0, 61, (-2071), baseNCodec_Context0);
      base32_0.decode(byteArray0, 0, 0, baseNCodec_Context0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte) (-83);
      base32_0.decode(byteArray1, 0, 0, baseNCodec_Context0);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)113;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)31, (int) (byte)31, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)8;
      Base32 base32_0 = new Base32(0, byteArray0, false, (byte)8);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base32 base32_0 = new Base32(true);
      byte[] byteArray0 = null;
      int int0 = 4;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int1 = 0;
      base32_0.readResults((byte[]) null, (-1519), 0, baseNCodec_Context0);
      baseNCodec_Context0.eof = false;
      // Undeclared exception!
      try { 
        base32_0.decode((byte[]) null, 4, 4, baseNCodec_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)108, (-2457), baseNCodec_Context0);
      base32_0.decode(byteArray0, 339, 61, baseNCodec_Context0);
      base32_0.decode(byteArray0, 13, (-2232), baseNCodec_Context0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-53));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, 1819, (int) (byte) (-53), baseNCodec_Context0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte) (-53);
      byteArray1[2] = (byte) (-40);
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      baseNCodec_Context1.lbitWorkArea = (long) (byte) (-53);
      baseNCodec_Context1.buffer = byteArray1;
      base32_0.encode(byteArray1, (-885), (int) (byte) (-53), baseNCodec_Context1);
      base32_0.decode(byteArray0, 1612, 1015, baseNCodec_Context0);
      base32_0.isInAlphabet((byte)3);
      base32_0.decode(byteArray1, 43, 0, baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)38;
      Base32 base32_0 = new Base32((-405), byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)61;
      byteArray1[6] = (byte)61;
      byteArray1[7] = (byte)56;
      byteArray1[8] = (byte)91;
      base32_0.containsAlphabetOrPad(byteArray1);
      boolean boolean0 = base32_0.isInAlphabet((byte)91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-78);
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(17, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [}4B\u0000\uFFFD\u0013\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-128);
      byteArray0[0] = (byte) (-128);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray1, 1, 1, baseNCodec_Context0);
      byteArray0[1] = (byte)0;
      BaseNCodec.Context baseNCodec_Context1 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, 61, baseNCodec_Context1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte)41;
      byteArray1[5] = (byte)41;
      byteArray1[6] = (byte)41;
      byteArray1[7] = (byte)41;
      baseNCodec_Context0.buffer = byteArray1;
      baseNCodec_Context0.lbitWorkArea = 313L;
      base32_0.decode(byteArray0, 5, 0, baseNCodec_Context0);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)9;
      byteArray0[1] = (byte)9;
      Base32 base32_0 = new Base32((-1040), byteArray0);
      base32_0.containsAlphabetOrPad(byteArray0);
      base32_0.isInAlphabet((byte)9);
      base32_0.isInAlphabet("*+RAw/h5ZAd");
      base32_0.isInAlphabet((byte) (-1));
      base32_0.isInAlphabet((byte)9);
      base32_0.encode(byteArray0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.lbitWorkArea = 1070L;
      base32_0.decode(byteArray0, 66, 0, baseNCodec_Context0);
      int int0 = 972;
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (-3522), 972, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3522
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }
}
