/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:25:30 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base32_ESTest extends Base32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base32 base32_0 = new Base32(65);
      boolean boolean0 = base32_0.isInAlphabet("[m89O3pAo9CwmY7;Z5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32((byte) (-99));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 1;
      base32_0.encode((byte[]) null, 36, (-35), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-44);
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAABVAAAAAAAAAAAA======", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (int) (byte) (-101), (int) (byte)0, baseNCodec_Context0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)74;
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-2847);
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte)1, (int) (byte)38, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32((-3060), byteArray0);
      boolean boolean0 = base32_0.isInAlphabet((byte)80);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base32 base32_0 = new Base32();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode((byte[]) null, 1205, 1205, baseNCodec_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base32 base32_0 = new Base32(65);
      byte[] byteArray0 = new byte[9];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, (int) (byte)0, 876, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = new Base32(0, byteArray0);
      // Undeclared exception!
      try { 
        base32_0.decode((byte[]) null, 9, 17, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(1161, (byte[]) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 1161 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet((byte) (-31));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(65);
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)90;
      boolean boolean0 = base32_0.containsAlphabetOrPad(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      boolean boolean0 = base32_0.isInAlphabet(" w:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[5];
      String string0 = base32_0.encodeAsString(byteArray0);
      assertEquals("AAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-62);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(20, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[0];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-2080);
      // Undeclared exception!
      try { 
        base32_0.encode(byteArray0, 82, (-108), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus -2080
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base32 base32_0 = new Base32(65);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base32 base32_0 = new Base32(46);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      String string0 = base32_0.encodeAsString(byteArray1);
      assertEquals("IFAUCQKBIFAUCQKBIFAT2PJ5HUGQU===\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base32 base32_0 = new Base32(10);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base32_0.encode(byteArray0);
      String string0 = base32_0.encodeAsString(byteArray1);
      assertEquals("IFAUCQKB\r\nIFAUCDIK\r\nIFAT2PJ5\r\nHU6T2DIK\r\n", string0);
      assertEquals(20, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-3693), (-4156), baseNCodec_Context0);
      base32_0.encode(byteArray0, 0, (-102), baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32(61, byteArray0, false, (byte) (-127));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = 8192;
      // Undeclared exception!
      try { 
        base32_0.decode(byteArray0, (int) (byte) (-127), (int) (byte) (-20), baseNCodec_Context0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Impossible modulus 8192
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base32 base32_0 = new Base32(1);
      Object object0 = base32_0.decode((Object) "UTF-16LE");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      Object object0 = base32_0.decode((Object) "LzcA2P5");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(255);
      Object object0 = base32_0.decode((Object) "MzcA2g5");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)65;
      byteArray0[7] = (byte)67;
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)96}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(1);
      Object object0 = base32_0.decode((Object) "qN?O]");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32(1);
      Object object0 = base32_0.decode((Object) "JUTF-16LE");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-44);
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32(46);
      byte[] byteArray0 = base32_0.decode("%s[buffer=%s, currentLinePos=%s, eof=%s, ibitWorkArea=%s, lbitWorkArea=%s, modulus=%s, pos=%s, readPos=%s]");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      byte[] byteArray0 = new byte[1];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.encode(byteArray0, (-3693), (-4156), baseNCodec_Context0);
      base32_0.decode((byte[]) null, 5, (-697), baseNCodec_Context0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((-3681), byteArray0, false, (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(false, (byte)90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pad must not be in alphabet or whitespace
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32(3657, byteArray0, false, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)110, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineLength 110 > 0, but lineSeparator is null
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte) (-119));
      byte[] byteArray0 = base32_0.decode("KJDUKWKUINGUUQJSI5IT2PJ5HUGQU===\r\n");
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = new byte[4];
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, (int) (byte)0, 0, baseNCodec_Context0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base32 base32_0 = new Base32(0, (byte[]) null, false);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
  }
}
